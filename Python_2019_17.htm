<!DOCTYPE html>
<!-- saved from url=(0158)file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88.htm -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script type="application/ld+json">{
    "articleBody": "&lt;p&gt;&lt;div class=&quot;toc&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;ul&gt; &lt;li&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;语言特性&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#1python&quot;&gt;1. 谈谈对 Python 和其他语言的区别&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;2. 简述解释型和编译型编程语言&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#3python&quot;&gt;3. Python 的解释器种类以及相关特点？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#4python3python2&quot;&gt;4. Python3 和 Python2 的区别？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#5python3python2intlong&quot;&gt;5. Python3 和 Python2 中 int 和 long 区别？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#6xrangerange&quot;&gt;6. xrange 和 range 的区别？&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-1&quot;&gt;编码规范&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#7pep8&quot;&gt;7. 什么是 PEP8?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#8python&quot;&gt;8. 了解 Python 之禅么？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#9docstrings&quot;&gt;9. 了解 DocStrings 么？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#10&quot;&gt;10. 了解类型注解么？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#11python&quot;&gt;11. 例举你知道 Python 对象的命名规范，例如方法或者类等&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#12python&quot;&gt;12. Python 中的注释有几种？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#13&quot;&gt;13. 如何优雅的给一个函数加注释？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#14&quot;&gt;14. 如何给变量加注释？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#15pythontab&quot;&gt;15. Python 代码缩进中是否支持 Tab 键和空格混用。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#16import&quot;&gt;16. 是否可以在一句 import 中导入多个库?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#17py&quot;&gt;17. 在给 Py 文件命名的时候需要注意什么?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#18python&quot;&gt;18. 例举几个规范 Python 代码风格的工具&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-2&quot;&gt;数据类型-字符串&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#19python&quot;&gt;19. 列举 Python 中的基本数据类型？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#20&quot;&gt;20. 如何区别可变数据类型和不可变数据类型&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#21helloworldhelloworld&quot;&gt;21. 将&quot;hello world&quot;转换为首字母大写&quot;Hello World&quot;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#22&quot;&gt;22. 如何检测字符串中只含有数字?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#23ilovechina&quot;&gt;23. 将字符串&quot;ilovechina&quot;进行反转&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#24python&quot;&gt;24. Python 中的字符串格式化方式你知道哪些？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#25adabdw&quot;&gt;25. 有一个字符串开头和末尾都有空格，比如“ adabdw ”，要求写一个函数把这个字符串的前后空格都去掉。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#26123456&quot;&gt;26. 获取字符串”123456“最后的两个字符。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#27gbksutf8&quot;&gt;27. 一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#281sinfoxiaozhang33shandonginfoxiaozhang33shandong2a&quot;&gt;28. （1）s=&quot;info：xiaoZhang 33 shandong&quot;，用正则切分字符串输出[ info ,  xiaoZhang ,  33 ,  shandong ]。（2）a = &quot;你好     中国  &quot;，去除多余空格只留一个空格。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#2912&quot;&gt;29. (1) 怎样将字符串转换为小写。 (2) 单引号、双引号、三引号的区别？&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-3&quot;&gt;数据类型 - 列表&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#30alist12312alist&quot;&gt;30. 已知 AList = [1,2,3,1,2]，对 AList 列表元素去重，写出具体过程。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#31123123&quot;&gt;31. 如何实现 &quot;1,2,3&quot; 变成 [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#32listab&quot;&gt;32. 给定两个 list，A 和 B，找出相同元素和不同元素&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#33123456123456&quot;&gt;33. [[1,2],[3,4],[5,6]] 一行代码展开该列表，得出 [1,2,3,4,5,6]&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#3415792268&quot;&gt;34. 合并列表 [1,5,7,9] 和 [2,2,6,8]&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#35&quot;&gt;35. 如何打乱一个列表的元素？&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-4&quot;&gt;数据类型 - 字典&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#36delpop&quot;&gt;36. 字典操作中 del 和 pop 有什么区别&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#37&quot;&gt;37. 按照字典的内的年龄排序&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#38aa1b2bc3d4&quot;&gt;38. 请合并下面两个字典 a = {&quot;A&quot;：1,&quot;B&quot;：2},b = {&quot;C&quot;：3,&quot;D&quot;：4}&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#39&quot;&gt;39. 如何使用生成式的方式生成一个字典，写一段功能代码。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#40ab12a1b2&quot;&gt;40. 如何把元组 (&quot;a&quot;,&quot;b&quot;) 和元组 (1,2)，变为字典 {&quot;a&quot;：1,&quot;b&quot;：2}&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-5&quot;&gt;数据类型 - 综合&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#41&quot;&gt;41. 下列字典对象键类型不正确的是？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#42a1b2&quot;&gt;42. 如何交换字典 {&quot;A&quot;：1,&quot;B&quot;：2}的键和值&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#43pythontuplelist&quot;&gt;43. Python 里面如何实现 tuple 和 list 的转换？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#44&quot;&gt;44. 我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#45iforiinrange3&quot;&gt;45. 请将 [i for i in range(3)] 改成生成器&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#46ahellobbytes&quot;&gt;46. a=&quot;hello&quot; 和 b=&quot;你好&quot; 编码成 bytes 类型&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#47&quot;&gt;47. 下面的代码输出结果是什么？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#48&quot;&gt;48. 下面的代码输出的结果是什么?&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-6&quot;&gt;操作类题目&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#49python&quot;&gt;49. Python 交换两个变量的值&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#50readreadlinereadlines&quot;&gt;50. 在读文件操作的时候会使用 read、readline 或者 readlines，简述它们各自的作用&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#51jsondatetime&quot;&gt;51. json 序列化时，可以处理的数据类型有哪些？如何定制支持 datetime 类型？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#52jsonunicode&quot;&gt;52. json 序列化时，默认遇到中文会转换成 unicode，如果想要保留中文怎么办？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#53abc&quot;&gt;53. 有两个磁盘文件 A 和 B，各存放一行字母，要求把这两个文件中的信息合并(按字母顺序排列)，输出到一个新文件 C 中。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#5420190530nn220190601&quot;&gt;54. 如果当前的日期为 20190530，要求写一个函数输出 N 天后的日期，(比如 N 为 2，则输出 20190601)。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#55nn&quot;&gt;55. 写一个函数，接收整数参数 n，返回一个函数，函数的功能是把函数的参数和 n 相乘并把结果返回。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#56&quot;&gt;56. 下面代码会存在什么问题，如何改进？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#571100&quot;&gt;57. 一行代码输出 1-100 之间的所有偶数。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#58with&quot;&gt;58. with 语句的作用，写一段代码？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#59pythonjson&quot;&gt;59. Python 字典和 json 字符串相互转化方法&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#60python&quot;&gt;60. 请写一个 Python 逻辑，计算一个文件中的大写字母数量&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#61pythonmongo&quot;&gt;61. 请写一段 Python连接Mongo数据库，然后的查询代码。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#62redis&quot;&gt;62.说一说Redis的基本类型&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#63pythonredis&quot;&gt;63. 请写一段 Python连接Redis数据库的代码。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#64pythonmysql&quot;&gt;64. 请写一段 Python连接Mysql数据库的代码。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#65redis&quot;&gt;65.了解Redis的事务么&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#66&quot;&gt;66.了解数据库的三范式么？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#67&quot;&gt;67.了解分布式锁么&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#68pythonreids&quot;&gt;68.用 Python 实现一个 Reids 的分布式锁的功能&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#69pythonmongo&quot;&gt;69.写一段 Python 使用 mongo 数据库创建索引的代码:&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-7&quot;&gt;高级特性&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#70&quot;&gt;70. 函数装饰器有什么作用？请列举说明？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#71python&quot;&gt;71. Python 垃圾回收机制？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#72__call__&quot;&gt;72. 魔法函数 _call_怎么使用?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#73&quot;&gt;73. 如何判断一个对象是函数还是方法？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#74classmethodstaticmethod&quot;&gt;74. @classmethod 和 @staticmethod 用法和区别&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#75python&quot;&gt;75. Python 中的接口如何实现？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#76python&quot;&gt;76. Python 中的反射了解么?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#77metaclass&quot;&gt;77. metaclass 作用？以及应用场景？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#78hasattrgetattrsetattr&quot;&gt;78. hasattr()、getattr()、setattr() 的用法&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#79python&quot;&gt;79. 请列举你知道的 Python 的魔法方法及用途。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#80python&quot;&gt;80. 如何知道一个 Python 对象的类型？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#81python&quot;&gt;81. Python 的传参是传值还是传址？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#82pythonmetaclass&quot;&gt;82. Python 中的元类 (metaclass) 使用举例&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#83anyall&quot;&gt;83. 简述 any() 和 all() 方法&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#84filtera12345678910&quot;&gt;84. filter 方法求出列表所有奇数并构造新列表，a =  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#85&quot;&gt;85. 什么是猴子补丁？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#86python&quot;&gt;86. 在 Python 中是如何管理内存的？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#87python&quot;&gt;87. 当退出 Python 时是否释放所有内存分配？&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-8&quot;&gt;正则表达式&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#881htmlh1wwwbaiducomh1html2a98resub98100&quot;&gt;88. （1）使用正则表达式匹配出&lt;html&gt;&lt;h1 &gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;中的地址（2）a=&quot;张明 98 分&quot;，用 re.sub，将 98 替换为 100&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#89&quot;&gt;89. 正则表达式匹配中(.*)和(.*?)匹配区别？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#90&quot;&gt;90. 写一段匹配邮箱的正则表达式&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-9&quot;&gt;其他内容&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#91pythonpass&quot;&gt;91. 解释一下 Python 中 pass 语句的作用？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#92input&quot;&gt;92. 简述你对 input()函数的理解&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#93pythonis&quot;&gt;93. Python 中的 is 和==&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#94python&quot;&gt;94. Python 中的作用域&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#95&quot;&gt;95. 三元运算写法和应用场景？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#96enumerate&quot;&gt;96. 了解 enumerate 么？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#975python&quot;&gt;97. 列举 5 个 Python 中的标准模块&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#98&quot;&gt;98. 如何在函数中设置一个全局变量&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#99pathlib&quot;&gt;99. pathlib 的用法举例&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#100python&quot;&gt;100. Python 中的异常处理，写一个简单的应用场景&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#101python&quot;&gt;101. Python 中递归的最大次数，那如何突破呢？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#102mro&quot;&gt;102. 什么是面向对象的 mro&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#103isinstance&quot;&gt;103. isinstance 作用以及应用场景？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#104&quot;&gt;104. 什么是断言？应用场景？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#105lambda&quot;&gt;105. lambda 表达式格式以及应用场景？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#106&quot;&gt;106. 新式类和旧式类的区别&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#107dir&quot;&gt;107. dir()是干什么用的？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#108demo1pydemo2pydemo3pyfromtoolsimportdemo1demo3&quot;&gt;108. 一个包里有三个模块，demo1.py、demo2.py、demo3.py，但使用 from tools import *导入模块时，如何保证只有 demo1、demo3 被导入了。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#1095python&quot;&gt;109. 列举 5 个 Python 中的异常类型以及其含义&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#110copydeepcopy&quot;&gt;110. copy 和 deepcopy 的区别是什么？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#111argskwargs&quot;&gt;111. 代码中经常遇到的*args, **kwargs 含义及用法。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#112python&quot;&gt;112. Python 中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#113wawb&quot;&gt;113. w、a+、wb 文件写入模式的区别&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#114sortsorted&quot;&gt;114. 举例 sort 和 sorted 的区别&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#115&quot;&gt;115. 什么是负索引？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#116pprint&quot;&gt;116. pprint 模块是干什么的？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#117python&quot;&gt;117. 解释一下 Python 中的赋值运算符&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#118python&quot;&gt;118. 解释一下 Python 中的逻辑运算符&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#119python&quot;&gt;119. 讲讲 Python 中的位运算符&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#120python&quot;&gt;120. 在 Python 中如何使用多进制数字？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#121&quot;&gt;121. 怎样声明多个变量并赋值？&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-10&quot;&gt;算法和数据结构&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#122&quot;&gt;122. 已知：&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#123python&quot;&gt;123. 用 Python 实现一个二分查找的函数&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#124python&quot;&gt;124. Python 单例模式的实现方法&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#125python&quot;&gt;125. 使用 Python 实现一个斐波那契数列&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#126&quot;&gt;126. 找出列表中的重复数字&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#127&quot;&gt;127. 找出列表中的单个数字&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#128&quot;&gt;128. 写一个冒泡排序&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#129&quot;&gt;129. 写一个快速排序&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#130&quot;&gt;130. 写一个拓扑排序&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#131python&quot;&gt;131. Python 实现一个二进制计算&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#132&quot;&gt;132. 有一组“+”和“-”符号，要求将“+”排到左边，“-”排到右边，写出具体的实现方法。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#133&quot;&gt;133. 单链表反转&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#134&quot;&gt;134. 交叉链表求交点&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#135&quot;&gt;135. 用队列实现栈&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#136&quot;&gt;136. 找出数据流的中位数&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#137k&quot;&gt;137. 二叉搜索树中第 K 小的元素&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-11&quot;&gt;爬虫相关&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#138requestsrequestscontentrequeststext&quot;&gt;138. 在 requests 模块中，requests.content 和 requests.text 什么区别&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#139lxml&quot;&gt;139. 简要写一下 lxml 模块的使用方法框架&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#140scrapy&quot;&gt;140. 说一说 scrapy 的工作流程&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#141scrapy&quot;&gt;141. scrapy 的去重原理&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#142scrapy&quot;&gt;142. scrapy 中间件有几种类，你用过哪些中间件&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#143&quot;&gt;143. 你写爬虫的时候都遇到过什么？反爬虫措施，你是怎么解决的？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#144&quot;&gt;144. 为什么会用到代理？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#145&quot;&gt;145. 代理失效了怎么处理？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#146header&quot;&gt;146. 列出你知道 header 的内容以及信息&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#147wwwbaiducom&quot;&gt;147. 说一说打开浏览器访问 www.baidu.com 获取到结果，整个流程。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#148&quot;&gt;148. 爬取速度过快出现了验证码怎么处理&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#149scrapyscrapyredisredis&quot;&gt;149. scrapy 和 scrapy-redis 有什么区别？为什么选择 redis 数据库？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#150&quot;&gt;150. 分布式爬虫主要解决什么问题&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#151&quot;&gt;151. 写爬虫是用多进程好？还是多线程好？ 为什么？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#152&quot;&gt;152. 解析网页的解析器使用最多的是哪几个&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#153ipcookiesession&quot;&gt;153. 需要登录的网页，如何解决同时限制 ip，cookie,session（其中有一些是动态生成的）在不使用动态爬取的情况下？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#154&quot;&gt;154. 验证码的解决?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#155mysqlmongodbredis&quot;&gt;155. 使用最多的数据库（mysql，mongodb，redis 等），对他的理解？&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-12&quot;&gt;网络编程&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#156tcpudp&quot;&gt;156. TCP 和 UDP 的区别？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#157&quot;&gt;157. 简要介绍三次握手和四次挥手&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#158socket&quot;&gt;158. 什么是粘包？ socket 中造成粘包的原因是什么？ 哪些情况会发生粘包现象？&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#-13&quot;&gt;并发&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#159concurrentfuture&quot;&gt;159. 举例说明 concurrent.future 的中线程池的用法&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#160&quot;&gt;160. 说一说多线程，多进程和协程的区别。&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#161gil&quot;&gt;161. 简述 GIL&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#162&quot;&gt;162. 进程之间如何通信&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#163io&quot;&gt;163. IO 多路复用的作用？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#164selectpollepoll&quot;&gt;164. select、poll、epoll 模型的区别？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#165&quot;&gt;165. 什么是并发和并行？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#16612&quot;&gt;166. 一个线程 1 让线程 2 去调用一个函数怎么实现&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#167&quot;&gt;167. 解释什么是异步非阻塞？&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#168threadinglocal&quot;&gt;168. threading.local 的作用？&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#git&quot;&gt;Git 面试题&lt;/a&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#169git&quot;&gt;169. 说说你知道的 git 命令&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#170git&quot;&gt;170. git 如何查看某次提交修改的内容&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/p&gt; &lt;h3 id=&quot;&quot;&gt;语言特性&lt;/h3&gt; &lt;h4 id=&quot;1python&quot;&gt;1. 谈谈对 Python 和其他语言的区别&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：Python 是一门语法简洁优美,功能强大无比,应用领域非常广泛,具有强大完备的第三方库，他是一门强类型的可移植、可扩展，可嵌入的解释型编程语言，属于动态语言。&lt;/p&gt; &lt;p&gt;拿 C 语言和 Python 比： Python 的第三方类库比较齐全并且使用简洁,很少代码就能实现一些功能，如果用 C 去实现相同的功能可能就比较复杂。但是对于速度来说 Python 的运行速度相较于 C 就比较慢了。所以有利的同时也有弊端，毕竟我们的学习成本降低了。&lt;/p&gt; &lt;h4 id=&quot;2&quot;&gt;2. 简述解释型和编译型编程语言&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：解释型语言是在运行程序的时候才翻译，每执行一次，要翻译一次，效率较低。 编译型就是直接编译成机型可以执行的，只翻译一次，所以效率相对来说较高。&lt;/p&gt; &lt;h4 id=&quot;3python&quot;&gt;3. Python 的解释器种类以及相关特点？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;CPython c 语言开发的，使用最广的解释器&lt;/li&gt; &lt;li&gt;IPython 基于 cPython 之上的一个交互式计时器，交互方式增强功能和 cPython 一样&lt;/li&gt; &lt;li&gt;PyPy 目标是执行效率，采用 JIT 技术。对 Python 代码进行动态编译，提高执行效率&lt;/li&gt; &lt;li&gt;JPython 运行在 Java 上的解释器，直接把 Python 代码编译成 Java 字节码执行&lt;/li&gt; &lt;li&gt;IronPython 运行在微软 .NET 平台上的解释器，把 Python 编译成 . NET 的字节码。&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;4python3python2&quot;&gt;4. Python3 和 Python2 的区别？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：  这里例举 5 条&lt;/p&gt; &lt;ol&gt; &lt;li&gt;print 在 Python3 中是函数必须加括号，Python2 中 print 为 class。&lt;/li&gt; &lt;li&gt;Python2 中使用 xrange，Python3 使用 range。&lt;/li&gt; &lt;li&gt;Python2 中默认的字符串类型默认是 ASCII，Python3 中默认的字符串类型是 Unicode。&lt;/li&gt; &lt;li&gt;Python2 中/的结果是整型，Python3 中是浮点类型。&lt;/li&gt; &lt;li&gt;Python2 中声明元类：_&lt;em&gt;metaclass&lt;/em&gt;_ = MetaClass,Python3 中声明元类：class newclass(metaclass=MetaClass)：pass。&lt;/li&gt; &lt;/ol&gt; &lt;h4 id=&quot;5python3python2intlong&quot;&gt;5. Python3 和 Python2 中 int 和 long 区别？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：Python2 有 int 和 long 类型。int 类型最大值不能超过 sys.maxint，而且这个最大值是平台相关的。可以通过在数字的末尾附上一个Ｌ来定义长整型，显然，它比 int 类型表示的数字范围更大。在 Python3 里，只有一种整数类型 int，大多数情况下，和 Python２中的长整型类似。&lt;/p&gt; &lt;h4 id=&quot;6xrangerange&quot;&gt;6. xrange 和 range 的区别？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：xrange 是在 Python2 中的用法，Python3 中只有 range xrange 用法与 range 完全相同，所不同的是生成的不是一个 list 对象，而是一个生成器。&lt;/p&gt; &lt;h3 id=&quot;-1&quot;&gt;编码规范&lt;/h3&gt; &lt;h4 id=&quot;7pep8&quot;&gt;7. 什么是 PEP8?&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：PEP8 通常会听别人提到，但是具体的指什么内容呢，简单介绍下。  《Python Enhancement Proposal #8》（8 号 Python 增强提案）又叫 PEP8，他针对的 Python 代码格式而编订的风格指南。&lt;/p&gt; &lt;h4 id=&quot;8python&quot;&gt;8. 了解 Python 之禅么？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：通过 import this 语句可以获取其具体的内容。它告诉大家如何写出高效整洁的代码。&lt;/p&gt; &lt;h4 id=&quot;9docstrings&quot;&gt;9. 了解 DocStrings 么？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：DocStrings 文档字符串是一个重要工具，用于解释文档程序，帮助你的程序文档更加简单易懂。主要是解释代码作用的。&lt;/p&gt; &lt;h4 id=&quot;10&quot;&gt;10. 了解类型注解么？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：PEP 484 引入了类型提示，这使得可以对 Python 代码进行静态类型检查。 在使用 Ide 的时候可以获取到参数的类型，更方便传入参数。使用格式如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;def foo(num： int) -&amp;gt; None：     print(f&quot;接收到的数字是：{num}&quot;) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;介绍下这个简单例子，我们可以在函数的参数部分使用参数名+：+类型，来指定参数可以接受的类型，这里的话就是 num 参数为 int 类型，然后后面-&amp;gt;接的是返回值的类型。这里返回值为 None，然后通过 fstring 格式化字符串输出传入的数字。&lt;/p&gt; &lt;h4 id=&quot;11python&quot;&gt;11. 例举你知道 Python 对象的命名规范，例如方法或者类等&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;p&gt;类：总是使用首字母大写单词串，如 MyClass。内部类可以使用额外的前导下划线。 变量：小写，由下划线连接各个单词。方法名类似 常量：常量名所有字母大写 等&lt;/p&gt; &lt;h4 id=&quot;12python&quot;&gt;12. Python 中的注释有几种？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：总体来说分为两种，单行注释和多行注释。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;单行注释在行首是 &lt;code&gt;#&lt;/code&gt;。&lt;/li&gt; &lt;li&gt;多行注释可以使用三个单引号或三个双引号，包括要注释的内容。&lt;/li&gt; &lt;/ol&gt; &lt;h4 id=&quot;13&quot;&gt;13. 如何优雅的给一个函数加注释？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：可以使用 docstring 配合类型注解&lt;/p&gt; &lt;h4 id=&quot;14&quot;&gt;14. 如何给变量加注释？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：可以通过变量名：类型的方式如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a： str = &quot;this is string type&quot; &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;15pythontab&quot;&gt;15. Python 代码缩进中是否支持 Tab 键和空格混用。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：不允许 tab 键和空格键混用，这种现象在使用 sublime 的时候尤为明显。&lt;/p&gt; &lt;p&gt;一般推荐使用 4 个空格替代 tab 键。&lt;/p&gt; &lt;h4 id=&quot;16import&quot;&gt;16. 是否可以在一句 import 中导入多个库?&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：可以是可以，但是不推荐。因为一次导入多个模块可读性不是很好，所以一行导入一个模块会比较好。同样的尽量少用 from modulename import *，因为判断某个函数或者属性的来源有些困难，不方便调试，可读性也降低了。&lt;/p&gt; &lt;h4 id=&quot;17py&quot;&gt;17. 在给 Py 文件命名的时候需要注意什么?&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：给文件命名的时候不要和标准库库的一些模块重复，比如 abc。 另外要名字要有意义，不建议数字开头或者中文命名。&lt;/p&gt; &lt;h4 id=&quot;18python&quot;&gt;18. 例举几个规范 Python 代码风格的工具&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：pylint 和 flake8&lt;/p&gt; &lt;h3 id=&quot;-2&quot;&gt;数据类型-字符串&lt;/h3&gt; &lt;h4 id=&quot;19python&quot;&gt;19. 列举 Python 中的基本数据类型？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： Python3 中有六个标准的数据类型：字符串（String）、数字（Digit）、列表（List）、元组（Tuple）、集合（Sets）、字典（Dictionary）。&lt;/p&gt; &lt;h4 id=&quot;20&quot;&gt;20. 如何区别可变数据类型和不可变数据类型&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： 从对象内存地址方向来说&lt;/p&gt; &lt;ol&gt; &lt;li&gt;可变数据类型：在内存地址不变的情况下，值可改变（列表和字典是可变类型，但是字典中的 key 值必须是不可变类型）&lt;/li&gt; &lt;li&gt;不可变数据类型：内存改变，值也跟着改变。（数字，字符串，布尔类型，都是不可变类型）可以通过 id() 方法进行内存地址的检测。&lt;/li&gt; &lt;/ol&gt; &lt;h4 id=&quot;21helloworldhelloworld&quot;&gt;21. 将&quot;hello world&quot;转换为首字母大写&quot;Hello World&quot;&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： 这个得看清题目是要求两个单词首字母都要大写，如果只是第一个单词首字母大小的话，只使用 capitalize 即可，但是这里是两个单词，所以用下面的方法。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;arr = &quot;hello world&quot;.split(&quot; &quot;) new_str = f&quot;{arr[0].capitalize()} {arr[1].capitalize()}&quot; print(new_str) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;后来评论中有朋友提到了下面的方法，这里感谢这位朋友提醒。方案如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&quot;hello world&quot;.title() &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;非常简单一句话搞定。&lt;/p&gt; &lt;h4 id=&quot;22&quot;&gt;22. 如何检测字符串中只含有数字?&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：可以通过 isdigit 方法，例子如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;s1 = &quot;12223&quot;.isdigit() print(s1)  s2 = &quot;12223a&quot;.isdigit() print(s2)  #结果如下： #True #False &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;23ilovechina&quot;&gt;23. 将字符串&quot;ilovechina&quot;进行反转&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;s1 = &quot;ilovechina&quot;[：：-1] print(s1) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;24python&quot;&gt;24. Python 中的字符串格式化方式你知道哪些？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：%s，format，fstring(Python3.6 开始才支持，现在推荐的写法)&lt;/p&gt; &lt;h4 id=&quot;25adabdw&quot;&gt;25. 有一个字符串开头和末尾都有空格，比如“ adabdw ”，要求写一个函数把这个字符串的前后空格都去掉。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：因为题目要是写一个函数所以我们不能直接使用 strip，不过我们可以把它封装到函数啊&lt;/p&gt; &lt;pre&gt;&lt;code&gt;def strip_function(s1)：     return s1.strip()  s1 = &quot; adabdw &quot; print(strip_function(s1)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;26123456&quot;&gt;26. 获取字符串”123456“最后的两个字符。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：切片使用的考察，最后两个即开始索引是 -2，代码如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a = &quot;123456&quot; print(a[-2：：]) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;27gbksutf8&quot;&gt;27. 一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a= &quot;S&quot;.encode(&quot;gbk&quot;).decode(&quot;utf-8&quot;, ignore ) print(a) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;281sinfoxiaozhang33shandonginfoxiaozhang33shandong2a&quot;&gt;28. （1）s=&quot;info：xiaoZhang 33 shandong&quot;，用正则切分字符串输出[ info ,  xiaoZhang ,  33 ,  shandong ]。（2）a = &quot;你好     中国  &quot;，去除多余空格只留一个空格。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;p&gt;（1）我们需要根据冒号或者空格切分&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import re  s = &quot;info：xiaoZhang 33 shandong&quot; res = re.split(r&quot;：| &quot;, s) print(res) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;（2）&lt;/p&gt; &lt;pre&gt;&lt;code&gt;s = &quot;你好     中国  &quot; print(&quot; &quot;.join(s.split())) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;2912&quot;&gt;29. (1) 怎样将字符串转换为小写。 (2) 单引号、双引号、三引号的区别？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： (1) 使用字符串的 lower() 方法。&lt;/p&gt; &lt;p&gt;(2)单独使用单引号和双引号没什么区别，但是如果引号里面还需要使用引号的时候，就需要这两个配合使用了，然后说三引号，同样的三引号也分为三单引号和三双引号，两个都可以声名长的字符串时候使用，如果使用 docstring 就需要使用三双引号。&lt;/p&gt; &lt;h3 id=&quot;-3&quot;&gt;数据类型 - 列表&lt;/h3&gt; &lt;h4 id=&quot;30alist12312alist&quot;&gt;30. 已知 AList = [1,2,3,1,2]，对 AList 列表元素去重，写出具体过程。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;list(set(AList)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;31123123&quot;&gt;31. 如何实现 &quot;1,2,3&quot; 变成 [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;s = &quot;1,2,3&quot; print(s.split(&quot;,&quot;)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;32listab&quot;&gt;32. 给定两个 list，A 和 B，找出相同元素和不同元素&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;A、B 中相同元素：print(set(A)&amp;amp;set(B))  A、B 中不同元素：print(set(A)^set(B)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;33123456123456&quot;&gt;33. [[1,2],[3,4],[5,6]] 一行代码展开该列表，得出 [1,2,3,4,5,6]&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;l = [[1,2],[3,4],[5,6]] x=[j for i in l for j in i]   print(x) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;3415792268&quot;&gt;34. 合并列表 [1,5,7,9] 和 [2,2,6,8]&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：使用 extend 和 + 都可以。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a = [1,5,7,9] b = [2,2,6,8] a.extend(b) print(a) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;35&quot;&gt;35. 如何打乱一个列表的元素？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import random  a = [1, 2, 3, 4, 5] random.shuffle(a) print(a) &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;-4&quot;&gt;数据类型 - 字典&lt;/h3&gt; &lt;h4 id=&quot;36delpop&quot;&gt;36. 字典操作中 del 和 pop 有什么区别&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：del 可以根据索引（元素所在位置）来删除的，没有返回值。 pop 可以根据索引弹出一个值，然后可以接收它的返回值。&lt;/p&gt; &lt;h4 id=&quot;37&quot;&gt;37. 按照字典的内的年龄排序&lt;/h4&gt; &lt;pre&gt;&lt;code&gt;d1 = [     { name ： alice ,  age ：38},     { name ： bob ,  age ：18},     { name ： Carl ,  age ：28}, ] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;d1 = [     { name ：  alice ,  age ： 38},     { name ：  bob ,  age ： 18},     { name ：  Carl ,  age ： 28}, ]  print(sorted(d1, key=lambda x：x[&quot;age&quot;])) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;38aa1b2bc3d4&quot;&gt;38. 请合并下面两个字典 a = {&quot;A&quot;：1,&quot;B&quot;：2},b = {&quot;C&quot;：3,&quot;D&quot;：4}&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： 合并字典方法很多，可以使用 a.update(b) 或者下面字典解包的方式&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a = {&quot;A&quot;：1,&quot;B&quot;：2} b = {&quot;C&quot;：3,&quot;D&quot;：4} print({**a,**b}) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;39&quot;&gt;39. 如何使用生成式的方式生成一个字典，写一段功能代码。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# 需求 3： 把字典的 key 和 value 值调换； d = { a ： 1 ,  b ： 2 }  print({v：k for k,v in d.items()}) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;40ab12a1b2&quot;&gt;40. 如何把元组 (&quot;a&quot;,&quot;b&quot;) 和元组 (1,2)，变为字典 {&quot;a&quot;：1,&quot;b&quot;：2}&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt; zip 的使用，但是最后记得把 zip 对象再转换为字典。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a = (&quot;a&quot;, &quot;b&quot;) b = (1, 2) print(dict(zip(a, b))) &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;-5&quot;&gt;数据类型 - 综合&lt;/h3&gt; &lt;h4 id=&quot;41&quot;&gt;41. 下列字典对象键类型不正确的是？&lt;/h4&gt; &lt;pre&gt;&lt;code&gt;A：{1：0,2：0,3：0} B：{&quot;a&quot;：0, &quot;b&quot;：0, &quot;c&quot;：0} C： {(1,2)：0, (2,3)：0} D： {[1,2]：0, [2,3]：0} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;D 因为只有可 hash 的对象才能做字典的键，列表是可变类型不是可 hash 对象，所以不能用列表做为字典的键。&lt;/p&gt; &lt;h4 id=&quot;42a1b2&quot;&gt;42. 如何交换字典 {&quot;A&quot;：1,&quot;B&quot;：2}的键和值&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;s =  {&quot;A&quot;：1,&quot;B&quot;：2}  #方法一： dict_new = {value:key for key，value in s.items()}  # 方法二： new_s= dict(zip(s.values()，s.keys())) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;43pythontuplelist&quot;&gt;43. Python 里面如何实现 tuple 和 list 的转换？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; Python 中的类型转换，一般通过类型强转即可完成 tuple 转 list 是 list() 方法 list 转 tuple 使用 tuple() 方法&lt;/p&gt; &lt;h4 id=&quot;44&quot;&gt;44. 我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 这个题目考察了 Python 标准库的 itertools 模快的掌握情况，该模块提供了操作生成器的一些方法。 对于生成器类型我们使用 islice 方法来实现切片的功能。例子如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;from itertools import islice gen = iter(range(10)) #iter()函数用来生成迭代器 #第一个参数是迭代器，第二个参数起始索引，第三个参数结束索引，不支持负数索引 for i in islice(gen,0,4)：      print(i) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;45iforiinrange3&quot;&gt;45. 请将 [i for i in range(3)] 改成生成器&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;通过把列表生产式的中括号，改为小括号我们就实现了生产器的功能即，&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(i for i in range(3)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;46ahellobbytes&quot;&gt;46. a=&quot;hello&quot; 和 b=&quot;你好&quot; 编码成 bytes 类型&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 这个题目一共三种方式，第一种是在字符串的前面加一个 b，第二种可以使用 bytes 方法，第三种使用字符串 encode 方法。具体代码如下，abc 代表三种情况&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a = b&quot;hello&quot; b = bytes(&quot;你好&quot;, &quot;utf-8&quot;) c = &quot;你好&quot;.encode(&quot;utf-8&quot;) print(a, b, c) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;47&quot;&gt;47. 下面的代码输出结果是什么？&lt;/h4&gt; &lt;pre&gt;&lt;code&gt;a = (1,2,3,[4,5,6,7],8) a[2] = 2 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 我们知道元组里的元素是不能改变的所以这个题目的答案是出现异常。&lt;/p&gt; &lt;h4 id=&quot;48&quot;&gt;48. 下面的代码输出的结果是什么?&lt;/h4&gt; &lt;pre&gt;&lt;code&gt;a = (1,2,3,[4,5,6,7],8) a[3][0] = 2 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;前面我说了元组的里元素是不能改变的，这句话严格来说是不准确的，如果元组里面元素本身就是可变类型，比如列表，那么在操作这个元素里的对象时，其内存地址也是不变的。a[3] 对应的元素是列表，然后对列表第一个元素赋值，所以最后的结果是： (1,2,3,[2,5,6,7],8)&lt;/p&gt; &lt;h3 id=&quot;-6&quot;&gt;操作类题目&lt;/h3&gt; &lt;h4 id=&quot;49python&quot;&gt;49. Python 交换两个变量的值&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;在 Python 中交换两个对象的值通过下面的方式即可&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a , b = b ,a  &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;但是需要强调的是这并不是元组解包，通过 dis 模块可以发现，这是交换操作的字节码是 ROT_TWO，意思是在栈的顶端做两个值的互换操作。&lt;/p&gt; &lt;h4 id=&quot;50readreadlinereadlines&quot;&gt;50. 在读文件操作的时候会使用 read、readline 或者 readlines，简述它们各自的作用&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;.read() 每次读取整个文件，它通常用于将文件内容放到一个字符串变量中。如果希望一行一行的输出那么就可以使用 readline()，该方法会把文件的内容加载到内存，所以对于对于大文件的读取操作来说非常的消耗内存资源，此时就可以通过 readlines 方法，将文件的句柄生成一个生产器，然后去读就可以了。&lt;/p&gt; &lt;h4 id=&quot;51jsondatetime&quot;&gt;51. json 序列化时，可以处理的数据类型有哪些？如何定制支持 datetime 类型？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 可以处理的数据类型是 str、int、list、tuple、dict、bool、None, 因为 datetime 类不支持 json 序列化，所以我们对它进行拓展。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# 自定义时间序列化 import json from datetime import datetime, date  # JSONEncoder 不知道怎么去把这个数据转换成 json 字符串的时候 # ，它就会去调 default()函数,所以都是重写这个函数来处理它本身不支持的数据类型， # default()函数默#认是直接抛异常的。 class DateToJson(json.JSONEncoder)：     def default(self, obj)：         if isinstance(obj, datetime)：             return obj.strftime( %Y-%m-%d %H：%M：%S )         elif isinstance(obj, date)：             return obj.strftime( %Y-%m-%d )         else：             return json.JSONEncoder.default(self, obj)   d = { name ：  cxa ,  data ： datetime.now()} print(json.dumps(d, cls=DateToJson)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;52jsonunicode&quot;&gt;52. json 序列化时，默认遇到中文会转换成 unicode，如果想要保留中文怎么办？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;可以通过 json.dumps 的 ensure_ascii 参数解决，代码示例如下：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import json a=json.dumps({&quot;name&quot;：&quot;张三&quot;},ensure_ascii=False) print(a) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;53abc&quot;&gt;53. 有两个磁盘文件 A 和 B，各存放一行字母，要求把这两个文件中的信息合并(按字母顺序排列)，输出到一个新文件 C 中。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;#文件 A.txt 内容为 ASDCF #文件 B.txt 内容为 EFGGTG with open(&quot;A.txt&quot;) as f1：     f1_txt = f1.readline() with open(&quot;B.txt&quot;) as f2：     f2_txt = f2.readline() f3_txt = f1_txt + f2_txt  f3_list = sorted(f3_txt)  with open(&quot;C.txt&quot;, &quot;a+&quot;) as f：      f.write(&quot;&quot;.join(f3_list)) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;输出的文件 C 的内容为 ACDEFFGGGST&lt;/p&gt; &lt;h4 id=&quot;5420190530nn220190601&quot;&gt;54. 如果当前的日期为 20190530，要求写一个函数输出 N 天后的日期，(比如 N 为 2，则输出 20190601)。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;这个题目考察的是 datetime 里的 timedelta 方法的使用，参数可选、默认值都为 0：datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0) 通过这个参数可以指定不同的日期类型进行加减操作，这里我们需要改的是 days，代码如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import datetime   def datetime_operate(n： int)：     now = datetime.datetime.now()  # 获取当前时间     _new_date = now + datetime.timedelta(days=n)  # 获取指定天数后的新日期     new_date = _new_date.strftime(&quot;%Y%m%d&quot;)  # 转换为指定的输出格式     return new_date   if __name__ ==  __main__ ：     print(datetime_operate(4)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;55nn&quot;&gt;55. 写一个函数，接收整数参数 n，返回一个函数，函数的功能是把函数的参数和 n 相乘并把结果返回。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;这个题目考查了闭包的使用代码示例如下，返回函数之类型是函数对象。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;def mul_operate(num):     def g(val):         return num * val      return g   m = mul_operate(8) print(m(5)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;56&quot;&gt;56. 下面代码会存在什么问题，如何改进？&lt;/h4&gt; &lt;pre&gt;&lt;code&gt;def strappend(num)：     str= first      for i in range(num)：         str+=str(i)     return str &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 首先不应该使用 Python 的内置类似 str 作为变量名这里我把它改为了 s,另外在Python,str 是个不可变对象，每次迭代都会生成新的存储空间，num 越大，创建的 str 对象就会越多，内存消耗越大。使用 yield 改成生成器即可, 还有一点就是命名规范的位置，函数名改为_分割比较好，完整的代码如下:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;def str_append(num):     s =  first      for i in range(num):         s += str(i)         yield s  if __name__ ==  __main__ :     for i in str_append(3):         print(i) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;571100&quot;&gt;57. 一行代码输出 1-100 之间的所有偶数。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;可以通过列表生成式，然后使用与操作如果如 1 与之后结果为 0 则表明为偶数，等于 1 则为奇数。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# 方法1 print([i for i in range(1, 101) if i &amp;amp; 0x1 == 0]) # 方法2：测试发现方法二效率更高 print(list(range(2, 101, 2))) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;58with&quot;&gt;58. with 语句的作用，写一段代码？&lt;/h4&gt; &lt;p&gt;with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭、线程中锁的自动获取和释放等。&lt;/p&gt; &lt;p&gt;其他的内容看下面我之前写的代码。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;#一般访问文件资源时我们会这样处理：  f = open(      c： test.txt ,  r ) data = f.read() f.close() # 这样写没有错，但是容易犯两个毛病： # 1. 如果在读写时出现异常而忘了异常处理。 # 2. 忘了关闭文件句柄  #以下的加强版本的写法：  f = open( c： test.txt ,  r ) try：     data = f.read() finally：     f.close()  #以上的写法就可以避免因读取文件时异常的发生而没有关闭问题的处理了。代码长了一些。 #但使用 with 有更优雅的写法：  with open(r c： test.txt ,  r ) as f：     data = f.read() #with 的实现  class Test：     def __enter__(self)：         print( __enter__() is call! )         return self      def dosomething(self)：         print( dosomethong! )      def __exit__(self, exc_type, exc_value, traceback)：         print( __exit__() is call! )         print(f type：{exc_type} )         print(f value：{exc_value} )         print(f trace：{traceback} )         print( __exit()__ is call! )  with Test() as sample：       pass  #当对象被实例化时，就会主动调用__enter__()方法，任务执行完成后就会调用__exit__()方法， #另外，注意到，__exit__()方法是带有三个参数的(exc_type, exc_value, traceback), #依据上面的官方说明：如果上下文运行时没有异常发生，那么三个参数都将置为 None,  #这里三个参数由于没有发生异常，的确是置为了 None, 与预期一致.  # 修改后不出异常了 class Test：     def __enter__(self)：         print( __enter__() is call! )         return self      def dosomething(self)：         x = 1/0         print( dosomethong! )      def __exit__(self, exc_type, exc_value, traceback)：         print( __exit__() is call! )         print(f type：{exc_type} )         print(f value：{exc_value} )         print(f trace：{traceback} )         print( __exit()__ is call! )         return True   with Test() as sample： &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;59pythonjson&quot;&gt;59. Python 字典和 json 字符串相互转化方法&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;在 Python 中使用 dumps 方法 将 dict 对象转为 Json 对象，使用 loads 方法可以将 Json 对象转为 dict 对象。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dic = { a : 123,  b : &quot;456&quot;,  c : &quot;liming&quot;} json_str = json.dumps(dic) dic2 = json.loads(json_str) print(dic2) 打印：  {&quot;a&quot;: 123, &quot;b&quot;: &quot;456&quot;, &quot;c&quot;: &quot;liming&quot;}  { a : 123,  b :  456 ,  c :  liming } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;我们再来看一个特殊的例子&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import json dic = { a ： 123,  b ： &quot;456&quot;,  c ： &quot;liming&quot;} dic_str = json.loads(str(dic).replace(&quot; &quot;, &quot; &quot;&quot;)) print(dic_str) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;下面我解释下上面代码是测试什么:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;首先 json.loads(jsonstr) 这里面的参数只能是 jsonstr 格式的字符串. 当我们使用 str 将字典 dic 转化为字符串以后，得到的结果为:&quot;{ a : 123,  b :  456 ,  c :  liming }&quot;。 如果直接使用 json.loads(str(dic)) 你会发现出现错误，原因就是，单引号的字符串不符合Json的标准格式所以再次使用了 replace(&quot; &quot;, &quot; &quot;&quot;)。得到字典 其实这个例子主要目的是告诉大家 Json 的标准格式是不支持单引号型字符串的，否则会出现以下错误。 json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;60python&quot;&gt;60. 请写一个 Python 逻辑，计算一个文件中的大写字母数量&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;with open( A.txt ) as fs：     count = 0     for i in fs.read()：         if i.isupper()：             count += 1 print(count) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;61pythonmongo&quot;&gt;61. 请写一段 Python连接Mongo数据库，然后的查询代码。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*- # @Author : 陈祥安 import pymongo db_configs = {      type :  mongo ,      host :  地址 ,      port :  端口 ,      user :  spider_data ,      passwd :  密码 ,      db_name :  spider_data  }   class Mongo():     def __init__(self, db=db_configs[&quot;db_name&quot;], username=db_configs[&quot;user&quot;],                  password=db_configs[&quot;passwd&quot;]):         self.client = pymongo.MongoClient(f mongodb://{db_configs[&quot;host&quot;]}:db_configs[&quot;port&quot;] )         self.username = username         self.password = password         if self.username and self.password:             self.db1 = self.client[db].authenticate(self.username, self.password)         self.db1 = self.client[db]      def find_data(self):         # 获取状态为0的数据         data = self.db1.test.find({&quot;status&quot;: 0})         gen = (item for item in data)         return gen  if __name__ ==  __main__ :     m = Mongo()     print(m.find_data()) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;62redis&quot;&gt;62.说一说Redis的基本类型&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;: Redis 支持五种数据类型： string（字符串） 、 hash（哈希）、list（列表） 、 set（集合） 及 zset(sorted set： 有序集合)。&lt;/p&gt; &lt;h4 id=&quot;63pythonredis&quot;&gt;63. 请写一段 Python连接Redis数据库的代码。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;from redis import StrictRedis, ConnectionPool redis_url=&quot;redis://:xxxx@112.27.10.168:6379/15&quot; pool = ConnectionPool.from_url(redis_url, decode_responses=True) r= StrictRedis(connection_pool=pool) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;64pythonmysql&quot;&gt;64. 请写一段 Python连接Mysql数据库的代码。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;conn = pymysql.connect(host= localhost ,  port=3306, user= root ,  passwd= 1234 , db= user , charset= utf8mb4 )#声明mysql连接对象 cursor=conn.cursor(cursor=pymysql.cursors.DictCursor)#查询结果以字典的形式 cursor.execute(sql语句字符串)#执行sql语句 conn.close()#关闭链接 &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;65redis&quot;&gt;65.了解Redis的事务么&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;: 简单理解，可以认为 redis 事务是一些列 redis 命令的集合，并且有如下两个特点： 1.事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 2.事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。 一般来说，事务有四个性质称为ACID，分别是原子性，一致性，隔离性和持久性。 一个事务从开始到执行会经历以下三个阶段：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;开始事务&lt;/li&gt; &lt;li&gt;命令入队&lt;/li&gt; &lt;li&gt;执行事务 代码示例:&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;import redis import sys def run():        try:         conn=redis.StrictRedis( 192.168.80.41 )        # Python中redis事务是通过pipeline的封装实现的         pipe=conn.pipeline()         pipe.sadd( s001 , a )         sys.exit()         #在事务还没有提交前退出，所以事务不会被执行。         pipe.sadd( s001 , b )         pipe.execute()         pass     except Exception as err:         print(err)         pass if __name__==&quot;__main__&quot;:       run() &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;66&quot;&gt;66.了解数据库的三范式么？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答:&lt;/strong&gt; 经过研究和对使用中问题的总结，对于设计数据库提出了一些规范，这些规范被称为范式 一般需要遵守下面3范式即可: 第一范式（1NF）：强调的是列的原子性，即列不能够再分成其他几列。 第二范式（2NF）：首先是 1NF，另外包含两部分内容，一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。 第三范式（3NF）：首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。&lt;/p&gt; &lt;h4 id=&quot;67&quot;&gt;67.了解分布式锁么&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;: 分布式锁是控制分布式系统之间的同步访问共享资源的一种方式。 对于分布式锁的目标，我们必须首先明确三点：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;任何一个时间点必须只能够有一个客户端拥有锁。&lt;/li&gt; &lt;li&gt;不能够有死锁，也就是最终客户端都能够获得锁，尽管可能会经历失败。&lt;/li&gt; &lt;li&gt;错误容忍性要好，只要有大部分的Redis实例存活，客户端就应该能够获得锁。 分布式锁的条件 互斥性：分布式锁需要保证在不同节点的不同线程的互斥 可重入性：同一个节点上的同一个线程如果获取了锁之后，能够再次获取这个锁。 锁超时：支持超时释放锁，防止死锁 高效，高可用：加锁和解锁需要高效，同时也需要保证高可用防止分布式锁失效，可以增加降级。 支持阻塞和非阻塞：可以实现超时获取失败，tryLock(long timeOut) 支持公平锁和非公平锁&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;分布式锁的实现方案 1、数据库实现（乐观锁） 2、基于zookeeper的实现 3、基于Redis的实现（推荐）&lt;/p&gt; &lt;h4 id=&quot;68pythonreids&quot;&gt;68.用 Python 实现一个 Reids 的分布式锁的功能&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;:REDIS分布式锁实现的方式：SETNX + GETSET,NX是Not eXists的缩写，如SETNX命令就应该理解为：SET if Not eXists。 多个进程执行以下Redis命令：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;SETNX lock.foo &amp;lt;current Unix time + lock timeout + 1&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;如果 SETNX 返回1，说明该进程获得锁，SETNX将键 lock.foo 的值设置为锁的超时时间（当前时间 + 锁的有效时间）。  如果 SETNX 返回0，说明其他进程已经获得了锁，进程不能进入临界区。进程可以在一个循环中不断地尝试 SETNX 操作，以获得锁。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import time import redis from conf.config import REDIS_HOST, REDIS_PORT, REDIS_PASSWORD  class RedisLock:     def __init__(self):         self.conn = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD, db=1)         self._lock = 0         self.lock_key = &quot;&quot;     @staticmethod     def my_float(timestamp):         &quot;&quot;&quot;         Args:             timestamp:         Returns:             float或者0             如果取出的是None，说明原本锁并没人用，getset已经写入，返回0，可以继续操作。         &quot;&quot;&quot;         if timestamp:             return float(timestamp)         else:             #防止取出的值为None，转换float报错             return 0      @staticmethod     def get_lock(cls, key, timeout=10):         cls.lock_key = f&quot;{key}_dynamic_lock&quot;         while cls._lock != 1:             timestamp = time.time() + timeout + 1             cls._lock = cls.conn.setnx(cls.lock_key, timestamp)             # if 条件中，可能在运行到or之后被释放，也可能在and之后被释放             # 将导致 get到一个None，float失败。             if cls._lock == 1 or (                             time.time() &amp;gt; cls.my_float(cls.conn.get(cls.lock_key)) and                             time.time() &amp;gt; cls.my_float(cls.conn.getset(cls.lock_key, timestamp))):                 break             else:                 time.sleep(0.3)      @staticmethod     def release(cls):         if cls.conn.get(cls.lock_key) and time.time() &amp;lt; cls.conn.get(cls.lock_key):             cls.conn.delete(cls.lock_key)   def redis_lock_deco(cls):     def _deco(func):         def __deco(*args, **kwargs):             cls.get_lock(cls, args[1])             try:                 return func(*args, **kwargs)             finally:                 cls.release(cls)         return __deco     return _deco   @redis_lock_deco(RedisLock()) def my_func():     print(&quot;myfunc() called.&quot;)     time.sleep(20)  if __name__ == &quot;__main__&quot;:     my_func() &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;69pythonmongo&quot;&gt;69.写一段 Python 使用 mongo 数据库创建索引的代码:&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*- # @Time : 2018/12/28 10:01 AM # @Author : cxa import pymongo db_configs = {      type :  mongo ,      host :  地址 ,      port :  端口 ,      user :  spider_data ,      passwd :  密码 ,      db_name :  spider_data  }   class Mongo():     def __init__(self, db=db_configs[&quot;db_name&quot;], username=db_configs[&quot;user&quot;],                  password=db_configs[&quot;passwd&quot;]):         self.client = pymongo.MongoClient(f mongodb://{db_configs[&quot;host&quot;]}:{db_configs[&quot;port&quot;]} )         self.username = username         self.password = password         if self.username and self.password:             self.db1 = self.client[db].authenticate(self.username, self.password)         self.db1 = self.client[db]      def add_index(self):         &quot;&quot;&quot;           通过create_index添加索引         &quot;&quot;&quot;         self.db1.test.create_index([( name , pymongo.ASCENDING)], unique=True)      def get_index(self,):         &quot;&quot;&quot;           查看索引列表         &quot;&quot;&quot;         indexlist=self.db1.test.list_indexes()         for index in indexlist:             print(index)  if __name__ ==  __main__ :     m = Mongo()     m.add_index()     print(m.get_index()) &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;-7&quot;&gt;高级特性&lt;/h3&gt; &lt;h4 id=&quot;70&quot;&gt;70. 函数装饰器有什么作用？请列举说明？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 装饰器就是一个函数，它可以在不需要做任何代码变动的前提下给一个函数增加额外功能，启动装饰的效果。 它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。 下面是一个日志功能的装饰器&lt;/p&gt; &lt;pre&gt;&lt;code&gt;from functools import wraps def log(label)：     def decorate(func)：        @wraps(func)         def _wrap(*args,**kwargs)：         try：           func(*args,**kwargs)           print(&quot;name&quot;,func.__name__)         except Exception as e：            print(e.args)        return _wrap     return decorate      @log(&quot;info&quot;) def foo(a,b,c)：      print(a+b+c)      print(&quot;in foo&quot;)  #decorate=decorate(foo)     if __name__ ==  __main__ ：     foo(1,2,3)      #decorate() &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;71python&quot;&gt;71. Python 垃圾回收机制？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;Python 不像 C++，Java 等语言一样，他们可以不用事先声明变量类型而直接对变量进行赋值。对 Python 语言来讲，对象的类型和内存都是在运行时确定的。这也是为什么我们称 Python 语言为动态类型的原因。&lt;/p&gt; &lt;p&gt;主要体现在下面三个方法：&lt;/p&gt; &lt;p&gt;1.引用计数机制 2.标记-清除 3.分代回收&lt;/p&gt; &lt;h4 id=&quot;72__call__&quot;&gt;72. 魔法函数 _&lt;em&gt;call&lt;/em&gt;_怎么使用?&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; _&lt;em&gt;call&lt;/em&gt;_ 可以把类实例当做函数调用。 使用示例如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;class Bar：     def __call__(self, *args, **kwargs)：         print( in call )   if __name__ ==  __main__ ：     b = Bar()     b() &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;73&quot;&gt;73. 如何判断一个对象是函数还是方法？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;看代码已经结果就懂了&lt;/p&gt; &lt;pre&gt;&lt;code&gt;from types import MethodType, FunctionType   class Bar：     def foo(self)：         pass   def foo2()：     pass   def run()：     print(&quot;foo 是函数&quot;, isinstance(Bar().foo, FunctionType))     print(&quot;foo 是方法&quot;, isinstance(Bar().foo, MethodType))     print(&quot;foo2 是函数&quot;, isinstance(foo2, FunctionType))     print(&quot;foo2 是方法&quot;, isinstance(foo2, MethodType))   if __name__ ==  __main__ ：     run() &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;输出&lt;/p&gt; &lt;pre&gt;&lt;code&gt;foo 是函数 False foo 是方法 True foo2 是函数 True foo2 是方法 False &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;74classmethodstaticmethod&quot;&gt;74. @classmethod 和 @staticmethod 用法和区别&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;  相同之处：@staticmethod 和@classmethod 都可以直接类名.方法名()来调用，不用在示例化一个类。 @classmethod  我们要写一个只在类中运行而不在实例中运行的方法。如果我们想让方法不在实例中运行，可以这么做：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;def iget_no_of_instance(ins_obj)：     return ins_obj.__class__.no_inst   class Kls(object)：     no_inst = 0      def __init__(self)：         Kls.no_inst = Kls.no_inst + 1   ik1 = Kls() ik2 = Kls() print(iget_no_of_instance(ik1)) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;@staticmethod  经常有一些跟类有关系的功能但在运行时又不需要实例和类参与的情况下需要用到静态方法&lt;/p&gt; &lt;pre&gt;&lt;code&gt;IND =  ON    class Kls(object)：     def __init__(self, data)：         self.data = data      @staticmethod     def check_ind()：         return (IND ==  ON )      def do_reset(self)：         if self.check_ind()：             print( Reset done for： , self.data)      def set_db(self)：         if self.check_ind()：             self.db =  New db connection          print( DB connection made for：  , self.data)   ik1 = Kls(12) ik1.do_reset() ik1.set_db() &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;75python&quot;&gt;75. Python 中的接口如何实现？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 接口提取了一群类共同的函数，可以把接口当做一个函数的集合，然后让子类去实现接口中的函数。但是在 Python 中根本就没有一个叫做 interface 的关键字，如果非要去模仿接口的概念，可以使用抽象类来实现。抽象类是一个特殊的类，它的特殊之处在于只能被继承，不能被实例化。使用 abc 模块来实现抽象类。&lt;/p&gt; &lt;h4 id=&quot;76python&quot;&gt;76. Python 中的反射了解么?&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;Python 的反射机制设定较为简单，一共有四个关键函数分别是 getattr、hasattr、setattr、delattr。&lt;/p&gt; &lt;h4 id=&quot;77metaclass&quot;&gt;77. metaclass 作用？以及应用场景？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; metaclass 即元类，metaclass 是类似创建类的模板，所有的类都是通过他来 create 的(调用&lt;strong&gt;new&lt;/strong&gt;)，这使得你可以自由的控制创建类的那个过程，实现你所需要的功能。 我们可以使用元类创建单例模式和实现 ORM 模式。&lt;/p&gt; &lt;h4 id=&quot;78hasattrgetattrsetattr&quot;&gt;78. hasattr()、getattr()、setattr() 的用法&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;这三个方法属于 Python 的反射机制里面的，hasattr 可以判断一个对象是否含有某个属性，getattr 可以充当 get 获取对象属性的作用。而 setattr 可以充当 person.name = &quot;liming&quot;的赋值操作。代码示例如下：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;class Person()：     def __init__(self)：         self.name = &quot;liming&quot;         self.age = 12      def show(self)：         print(self.name)         print(self.age)      def set_name(self)：         setattr(Person, &quot;sex&quot;, &quot;男&quot;)      def get_name(self)：         print(getattr(self, &quot;name&quot;))         print(getattr(self, &quot;age&quot;))         print(getattr(self, &quot;sex&quot;))   def run()：     if hasattr(Person, &quot;show&quot;)：         print(&quot;判断 Person 类是否含有 show 方法&quot;)       Person().set_name()     Person().get_name()   if __name__ ==  __main__ ：     run() &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;79python&quot;&gt;79. 请列举你知道的 Python 的魔法方法及用途。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;1 __init__： 类的初始化方法。它获取任何传给构造器的参数（比如我们调用 x = SomeClass(10, ‘foo’) ， __init__就会接到参数 10 和 ‘foo’ 。 __init__在 Python 的类定义中用的最多。  2 __new__： __new__是对象实例化时第一个调用的方法，它只取下 cls 参数，并把其他参数传给 __init__ 。 __new__很少使用，但是也有它适合的场景，尤其是当类继承自一个像元组或者字符串这样不经常改变的类型的时候.  3 __del__： __new__和 __init__是对象的构造器， __del__是对象的销毁器。它并非实现了语句 del x (因此该语句不等同于 x.__del__())。而是定义了当对象被垃圾回收时的行为。 当对象需要在销毁时做一些处理的时候这个方法很有用，比如 socket 对象、文件对象。但是需要注意的是，当 Python 解释器退出但对象仍然存活的时候，__del__并不会 执行。 所以养成一个手工清理的好习惯是很重要的，比如及时关闭连接。 &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;80python&quot;&gt;80. 如何知道一个 Python 对象的类型？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;可以通过 type 方法&lt;/p&gt; &lt;h4 id=&quot;81python&quot;&gt;81. Python 的传参是传值还是传址？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;Python 中的传参即不是传值也不是传地址，传的是对象的引用。&lt;/p&gt; &lt;h4 id=&quot;82pythonmetaclass&quot;&gt;82. Python 中的元类 (metaclass) 使用举例&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;可以使用元类实现一个单例模式，代码如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;class Singleton(type)：     def __init__(self, *args, **kwargs)：         print(&quot;in __init__&quot;)         self.__instance = None         super(Singleton, self).__init__(*args, **kwargs)      def __call__(self, *args, **kwargs)：         print(&quot;in __call__&quot;)         if self.__instance is None：             self.__instance = super(Singleton, self).__call__(*args, **kwargs)         return self.__instance  class Foo(metaclass=Singleton)：     pass  # 在代码执行到这里的时候，元类中的__new__方法和__init__方法其实已经被执行了，而不是在 Foo 实例化的时候执行。且仅会执行一次。  foo1 = Foo() foo2 = Foo() print(foo1 is foo2) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;83anyall&quot;&gt;83. 简述 any() 和 all() 方法&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; any(x)：判断 x 对象是否为空对象，如果都为空、0、false，则返回 false，如果不都为空、0、false，则返回 true。 all(x)：如果 all(x) 参数 x 对象的所有元素不为 0、  、False 或者 x 为空对象，则返回 True，否则返回 False。&lt;/p&gt; &lt;h4 id=&quot;84filtera12345678910&quot;&gt;84. filter 方法求出列表所有奇数并构造新列表，a =  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/h4&gt; &lt;p&gt;答&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(list(filter(lambda x： x % 2 == 1, a))) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;其实现在不推荐使用 filter,map 等方法了，一般列表生成式就可以搞定了。&lt;/p&gt; &lt;h4 id=&quot;85&quot;&gt;85. 什么是猴子补丁？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 猴子补丁（monkey patching)：在运行时动态修改模块、类或函数，通常是添加功能或修正缺陷。猴子补丁在代码运行时内存中）发挥作用，不会修改源码，因此只对当前运行的程序实例有效。因为猴子补丁破坏了封装，而且容易导致程序与补丁代码的实现细节紧密耦合，所以被视为临时的变通方案，不是集成代码的推荐方式。大概是下面这样的一个效果&lt;/p&gt; &lt;pre&gt;&lt;code&gt;def post()：     print(&quot;this is post&quot;)     print(&quot;想不到吧&quot;)  class Http()：     @classmethod     def get(self)：         print(&quot;this is get&quot;)   def main()：     Http.get=post #动态的修改了 get 原因的功能，  if __name__ ==  __main__ ：     main()           Http.get()  &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;86python&quot;&gt;86. 在 Python 中是如何管理内存的？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;  垃圾回收：Python 不像 C++，Java 等语言一样，他们可以不用事先声明变量类型而直接对变量进行赋值。对 Python 语言来讲，对象的类型和内存都是在运行时确定的。这也是为什么我们称 Python 语言为动态类型的原因（这里我们把动态类型可以简单的归结为对变量内存地址的分配是在运行时自动判断变量类型并对变量进行赋值）。&lt;/p&gt; &lt;p&gt;引用计数：Python 采用了类似 Windows 内核对象一样的方式来对内存进行管理。每一个对象，都维护这一个对指向该对对象的引用的计数。当变量被绑定在一个对象上的时候，该变量的引用计数就是 1，(还有另外一些情况也会导致变量引用计数的增加)，系统会自动维护这些标签，并定时扫描，当某标签的引用计数变为 0 的时候，该对就会被回收。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;内存池机制 Python 的内存机制以金字塔行，1、2 层主要有操作系统进行操作&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;第 0 层是 C 中的 malloc，free 等内存分配和释放函数进行操作&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;第 1 层和第 2 层是内存池，有 Python 的接口函数 PyMem_Malloc 函数实现，当对象小于 256K 时有该层直接分配内存&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;第 3 层是最上层，也就是我们对 Python 对象的直接操作&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;在 C 中如果频繁的调用 malloc 与 free 时,是会产生性能问题的.再加上频繁的分配与释放小块的内存会产生内存碎片。Python 在这里主要干的工作有：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;如果请求分配的内存在 1~256 字节之间就使用自己的内存管理系统,否则直接使用 malloc。&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;这里还是会调用 malloc 分配内存，但每次会分配一块大小为 256k 的大块内存。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;经由内存池登记的内存到最后还是会回收到内存池，并不会调用 C 的 free 释放掉以便下次使用。对于简单的 Python 对象，例如数值、字符串，元组（tuple 不允许被更改)采用的是复制的方式(深拷贝?)，也就是说当将另一个变量 B 赋值给变量 A 时，虽然 A 和 B 的内存空间仍然相同，但当 A 的值发生变化时，会重新给 A 分配空间，A 和 B 的地址变得不再相同。&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;87python&quot;&gt;87. 当退出 Python 时是否释放所有内存分配？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;不是的，循环引用其他对象或引用自全局命名空间的对象的模块，在 Python 退出时并非完全释放。&lt;/p&gt; &lt;p&gt;另外，也不会释放 c 库保留的内存部分&lt;/p&gt; &lt;h3 id=&quot;-8&quot;&gt;正则表达式&lt;/h3&gt; &lt;h4 id=&quot;881htmlh1wwwbaiducomh1html2a98resub98100&quot;&gt;88. （1）使用正则表达式匹配出&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;h1 &amp;gt;www.baidu.com&amp;lt;/h1&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt;中的地址（2）a=&quot;张明 98 分&quot;，用 re.sub，将 98 替换为 100&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 第一问答案&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import re  source = &quot;&amp;lt;html&amp;gt;&amp;lt;h1&amp;gt;www.baidu.com&amp;lt;/h1&amp;gt;&amp;lt;/html&amp;gt;&quot; pat = re.compile(&quot;&amp;lt;html&amp;gt;&amp;lt;h1&amp;gt;(.*?)&amp;lt;/h1&amp;gt;&amp;lt;/html&amp;gt;&quot;) print(pat.findall(source)[0]) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;第二问答案&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import re s = &quot;张明 98 分&quot; print(re.sub(r&quot; d+&quot;,&quot;100&quot;,s)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;89&quot;&gt;89. 正则表达式匹配中(.*)和(.*?)匹配区别？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;(.*) 为贪婪模式极可能多的匹配内容 ,(.*?) 为非贪婪模式又叫懒惰模式，一般匹配到结果就好，匹配字符的少为主，示例代码如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import re  s = &quot;&amp;lt;html&amp;gt;&amp;lt;div&amp;gt;文本 1&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;文本 2&amp;lt;/div&amp;gt;&amp;lt;/html&amp;gt;&quot;  pat1 = re.compile(r&quot; &amp;lt;div&amp;gt;(.*?) &amp;lt;/div&amp;gt;&quot;) print(pat1.findall(s))  pat2 = re.compile(r&quot; &amp;lt;div&amp;gt;(.*) &amp;lt;/div&amp;gt;&quot;) print(pat2.findall(s)) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;输出&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[ 文本 1 ,  文本 2 ] [ 文本 1&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;文本 2 ] &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;90&quot;&gt;90. 写一段匹配邮箱的正则表达式&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;关于邮箱的匹配这个还真的是一个永恒的话题。&lt;/p&gt; &lt;p&gt;电子邮件地址有统一的标准格式：用户名@服务器域名。用户名表示邮件信箱、注册名或信件接收者的用户标识，@符号后是你使用的邮件服务器的域名。@可以读成“at”，也就是“在”的意思。整个电子邮件地址可理解为网络中某台服务器上的某个用户的地址。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;用户名，可以自己选择。由字母 a～z(不区分大小写)、数字 0～9、点、减号或下划线组成；只能以数字或字母开头和结尾。&lt;/li&gt; &lt;li&gt;与你使用的网站有关，代表邮箱服务商。例如网易的有@163.com 新浪有@vip.sina.com 等。&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;网上看到了各种各样的版本，都不确定用哪个，于是自己简单的总结了一个。大家有更好的欢迎留言。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;r&quot;^[a-zA-Z0-9]+[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+ .[a-zA-Z0-9-.]+$&quot; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;下面解释上面的表达式&lt;/p&gt; &lt;ol&gt; &lt;li&gt;首先强调一点关于 w 的含义， w 匹配英文字母和俄语字母或数字或下划线或汉字。&lt;/li&gt; &lt;li&gt;注意^[]和[^]的区别，[]表示字符集合，^[]表示已[]内的任意字符集开始，[^]表示。&lt;/li&gt; &lt;li&gt;^[a-zA-Z0-9]+：这里注意^[]和[^]的,第一个^表示已什么开头，第二个[]的^表示不等于[]内。所以这段表示以英文字母和数字开头，后面紧跟的+，限定其个数&amp;gt;=1 个。&lt;/li&gt; &lt;li&gt;[a-zA-Z0-9&lt;em&gt;.+-]+：表示匹配英文字母和数字开头以及&lt;/em&gt;.+-, 的任意一个字符，并限定其个数&amp;gt;=1 个。为了考虑@前面可能出现.+-（但是不在开头出现）。&lt;/li&gt; &lt;li&gt;@就是邮箱必备符号了&lt;/li&gt; &lt;li&gt;@[a-zA-Z0-9-]+.：前面的不用说了，后面的.表示.转义了,也是必备符号。&lt;/li&gt; &lt;li&gt;[ a-zA-Z0-9-.]+：$符表示以什么结束,这里表示以英文字和数字或 -. 1 个或多个结尾。&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;来个例子验证一波：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import re plt=re.compile(r&quot;^[a-zA-Z0-9]+[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+ .[a-zA-Z0-9-.]+$&quot;) b=plt.findall( adas+fefe.we@qq.com.cn ) print(b) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;网上找了个验证邮件地址的通用正则表达式（符合 RFC 5322 标准）&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(?：[a-z0-9!#$%&amp;amp; *+/=?^_`{|}~-]+(?： .[a-z0-9!#$%&amp;amp; *+/=?^_`{|}~-]+)*|&quot;(?：[ x01- x08 x0b x0c x0e- x1f x21 x23- x5b x5d- x7f]|  [ x01- x09 x0b x0c x0e- x7f])*&quot;)@(?：(?：[a-z0-9](?：[a-z0-9-]*[a-z0-9])? .)+[a-z0-9](?：[a-z0-9-]*[a-z0-9])?| [(?：(?：25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?) .){3}(?：25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]：(?：[ x01- x08 x0b x0c x0e- x1f x21- x5a x53- x7f]|  [ x01- x09 x0b x0c x0e- x7f])+) ]) &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;-9&quot;&gt;其他内容&lt;/h3&gt; &lt;h4 id=&quot;91pythonpass&quot;&gt;91. 解释一下 Python 中 pass 语句的作用？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;pass 实际上就是一个占位符，在写一个函数但是不确定里面写啥的时候，这个时候可以使用 pass。示例如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;def foo()：  pass &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;92input&quot;&gt;92. 简述你对 input()函数的理解&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;在 Python3 中 input 函数可以接收用户输入的字符串。&lt;/p&gt; &lt;p&gt;然后根据程序的需要转换成所需格式即可。&lt;/p&gt; &lt;h4 id=&quot;93pythonis&quot;&gt;93. Python 中的 is 和==&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;先说==它的作用是判断两个对象的值是否相同，然后说 is。is 表示的谁是谁，这也就意味着对象完全相等。我们知道一个对象有各自的内存地址和对应的值，当内存地址和值都相同的时候使用 is 可以得到结果 True。另外需要注意的下面两点特殊的情况。&lt;/p&gt; &lt;p&gt;这些变量很可能在许多程序中使用。 通过池化这些对象，Python 可以防止对一致使用的对象进行内存分配调用。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;1.介于数字-5 和 256 之间的整数 2.字符串仅包含字母、数字或下划线 &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;94python&quot;&gt;94. Python 中的作用域&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定  当 Python 遇到一个变量的话它会按照这的顺序进行搜索  本地作用域(Local)---&amp;gt;当前作用域被嵌入的本地作用域(Enclosing locals)---&amp;gt;全局/模块作用域(Global)---&amp;gt;内置作用域(Built-in) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;95&quot;&gt;95. 三元运算写法和应用场景？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;Python 中的三元运算又称三目运算，是对简单的条件语句的简写。 是一种比较 Pythonic 的学法，形式为：val = 1 if 条件成立 else 2 代码示例如下：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a = 2 b = 5  # 普通写法 if a &amp;gt; b：     val = True else：     val = False # 改为三元运算符后     val = a if a &amp;gt; b else b print(val)  # 5 &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;96enumerate&quot;&gt;96. 了解 enumerate 么？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;enumerate 可以在迭代一个对象的时候，同时获取当前对象的索引和值。 代码示例如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;from string import ascii_lowercase  s = ascii_lowercase  for index, value in enumerate(s)：     print(index, value) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;975python&quot;&gt;97. 列举 5 个 Python 中的标准模块&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; pathlib：路径操作模块，比 os 模块拼接方便。 urllib：网络请求模块，包括对 url 的结构解析。 asyncio： Python 的异步库，基于事件循环的协程模块。 re：正则表达式模块。 itertools：提供了操作生成器的一些模块。&lt;/p&gt; &lt;h4 id=&quot;98&quot;&gt;98. 如何在函数中设置一个全局变量&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# 通过使用 global 对全局变量进行修改。 n = 0 def foo()：     global n     n = 100 foo() print(n) x = 0 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;之前我在视频教程中对这块做了个讲解，具体点击下方链接 https：//www.bilibili.com/video/av50865713&lt;/p&gt; &lt;h4 id=&quot;99pathlib&quot;&gt;99. pathlib 的用法举例&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;pathlib 可以对文件以及文件的其他属性进行操作。比较喜欢的一点是路径拼接符&quot;/&quot;的使用，之前在公众号中写过 pathlib 一些其他的用法这里就不一一例举了。&lt;/p&gt; &lt;h4 id=&quot;100python&quot;&gt;100. Python 中的异常处理，写一个简单的应用场景&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 比如在计算除法中出现为 0 的情况出现异常&lt;/p&gt; &lt;pre&gt;&lt;code&gt;try：     1 / 0 except ZeroDivisionError as e：     print(e.args) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;101python&quot;&gt;101. Python 中递归的最大次数，那如何突破呢？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;Python 有递归次数限制，默认最大次数为 1000。通过下面的代码可以突破这个限制&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import sys sys.setrecursionlimit(1500) # set the maximum depth as 1500 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;另外需要注意的是 sys.setrecursionlimit() 只是修改解释器在解释时允许的最大递归次数，此外，限制最大递归次数的还和操作系统有关。&lt;/p&gt; &lt;h4 id=&quot;102mro&quot;&gt;102. 什么是面向对象的 mro&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;Python 是支持面向对象编程的，同时也是支持多重继承的。一般我们通过调用类对象的 mro()方法获取其继承关系。&lt;/p&gt; &lt;h4 id=&quot;103isinstance&quot;&gt;103. isinstance 作用以及应用场景？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;isinstance 是判断一个对象是否为另一个对象的子类的，例如我们知道在 Python3 中 bool 类型其实是 int 的子类，所以我们可以对其检测。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;print(isinstance(True,int)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;104&quot;&gt;104. 什么是断言？应用场景？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;在 Python 中是断言语句 assert 实现此功能，一般在表达式为 True 的情况下，程序才能通过。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;#author：  #assert（）方法，断言成功，则程序继续执行，断言失败，则程序报错 # 断言能够帮助别人或未来的你理解代码， # 找出程序中逻辑不对的地方。一方面， # 断言会提醒你某个对象应该处于何种状态， # 另一方面，如果某个时候断言为假， # 会抛出 AssertionError 异常，很有可能终止程序。  def foo(a)：     assert a==2,Exception(&quot;不等于 2&quot;)     print(&quot;ok&quot;,a)  if __name__ ==  __main__ ：     foo(1) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;105lambda&quot;&gt;105. lambda 表达式格式以及应用场景？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;lambda 表达式其实就是一个匿名函数,在函数编程中经常作为参数使用。 例子如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a = [( a ,1),( b ,2),( c ,3),( d ,4)] a_1 = list(map(lambda x：x[0],a)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;106&quot;&gt;106. 新式类和旧式类的区别&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;Python 2.x 中默认都是经典类，只有显式继承了 object 才是新式类，Python 3.x 中默认都是新式类，经典类被移除，不必显式的继承 object。 新式类都从 object 继承，经典类不需要。 新式类的 MRO(method resolution order 基类搜索顺序)算法采用 C3 算法广度优先搜索，而旧式类的 MRO 算法是采用深度优先搜索。 新式类相同父类只执行一次构造函数，经典类重复执行多次。&lt;/p&gt; &lt;h4 id=&quot;107dir&quot;&gt;107. dir()是干什么用的？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;当在使用某一个对象不知道有哪些属性或者方法可以使用时，此时可以通过 dir() 方法进行查看。&lt;/p&gt; &lt;h4 id=&quot;108demo1pydemo2pydemo3pyfromtoolsimportdemo1demo3&quot;&gt;108. 一个包里有三个模块，demo1.py、demo2.py、demo3.py，但使用 from tools import *导入模块时，如何保证只有 demo1、demo3 被导入了。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 增加_&lt;em&gt;init&lt;/em&gt;_.py 文件，并在文件中增加：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;__all__ = [ demo1 , demo3 ] &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;1095python&quot;&gt;109. 列举 5 个 Python 中的异常类型以及其含义&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;AttributeError 对象没有这个属性  NotImplementedError 尚未实现的方法  StopIteration 迭代器没有更多的值  TypeError 对类型无效的操作  IndentationError 缩进错误 &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;110copydeepcopy&quot;&gt;110. copy 和 deepcopy 的区别是什么？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; copy.copy()浅拷贝，只拷贝父对象，不会拷贝对象的内部的子对象。 copy.deepcopy()深拷贝，拷贝对象及其子对象。&lt;/p&gt; &lt;h4 id=&quot;111argskwargs&quot;&gt;111. 代码中经常遇到的*args, **kwargs 含义及用法。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 在函数定义中使用 *args 和**kwargs 传递可变长参数。 *args 用来将参数打包成 tuple 给函数体调用。 **kwargs 打包关键字参数成 dict 给函数体调用。&lt;/p&gt; &lt;h4 id=&quot;112python&quot;&gt;112. Python 中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么?&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; &quot;单下划线&quot; 开始的成员变量叫做保护变量，意思是只有类对象和子类对象自己能访问到这些变量；  &quot;双下划线&quot; 开始的是私有成员，意思是只有类对象自己能访问，连子类对象也不能访问到这个数据。&lt;/p&gt; &lt;p&gt;以单下划线开头（_foo）的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用“from xxx import *”而导入；以双下划线开头的（__foo）代表类的私有成员；&lt;/p&gt; &lt;p&gt;以双下划线开头和结尾的（_&lt;em&gt;foo&lt;strong&gt;）代表 Python 里特殊方法专用的标识，如 _&lt;/em&gt;init&lt;/strong&gt;（）代表类的构造函数。&lt;/p&gt; &lt;p&gt;代码示例&lt;/p&gt; &lt;pre&gt;&lt;code&gt;class Person：     &quot;&quot;&quot;docstring for ClassName&quot;&quot;&quot;     def __init__(self)：        self.__age = 12        self._sex = 12     def _sex(self)：         return &quot;男&quot;     def set_age(self,age)：         self.__age = age      def get_age(self)：         return self.__age     if __name__ ==  __main__ ：     p=Person()     print(p._sex)     #print(p.__age)     #Python 自动将__age 解释成 _Person__age,于是我们用 _Person__age 访问，这次成功。     print(p._Person__age) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;113wawb&quot;&gt;113. w、a+、wb 文件写入模式的区别&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; w 表示写模式支持写入字符串，如果文件存在则覆盖。 a+ 和 w 的功能类型不过如果文件存在的话内容不会覆盖而是追加。 wb 是写入二进制字节类型的数据。&lt;/p&gt; &lt;h4 id=&quot;114sortsorted&quot;&gt;114. 举例 sort 和 sorted 的区别&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 相同之处 sort 和 sorted 都可以对列表元素排序，sort() 与 sorted() 的不同在于，sort 是在原位重新排列列表，而 sorted() 是产生一个新的列表。 sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。&lt;/p&gt; &lt;p&gt;list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。&lt;/p&gt; &lt;h4 id=&quot;115&quot;&gt;115. 什么是负索引？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;负索引一般表示的是从后面取元素。&lt;/p&gt; &lt;h4 id=&quot;116pprint&quot;&gt;116. pprint 模块是干什么的？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;pprint 是 print 函数的美化版，可以通过 import pprint 导入。示例如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import pprint pprint.pprint(&quot;this is pprint&quot;) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;117python&quot;&gt;117. 解释一下 Python 中的赋值运算符&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;通过下面的代码列举出所有的赋值运算符&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a=7 a+=1 print(a) a-=1 print(a) a*=2 print(a) a/=2 print(a) a**=2 print(a) a//=3 print(a) a%=4 print(a) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;118python&quot;&gt;118. 解释一下 Python 中的逻辑运算符&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;Python 中有三个逻辑运算符：and、or、not&lt;/p&gt; &lt;pre&gt;&lt;code&gt;print(False and True) #False print(7&amp;lt;7 or True) #True print(not 2==2) #False &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;119python&quot;&gt;119. 讲讲 Python 中的位运算符&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;按位运算符是把数字看作二进制来进行计算的。Python 中的按位运算法则如下：&lt;/p&gt; &lt;p&gt;下表中变量 a 为 60，b 为 13，二进制格式如下：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a = 0011 1100 b = 0000 1101 ----------------- a&amp;amp;b = 0000 1100 a|b = 0011 1101 a^b = 0011 0001 ~a  = 1100 0011 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&quot;https://images.gitbook.cn/c2660350-8bf3-11e9-86b6-1bdaa75635da&quot; alt=&quot;enter image description here&quot; /&gt;&lt;/p&gt; &lt;h4 id=&quot;120python&quot;&gt;120. 在 Python 中如何使用多进制数字？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 我们在 Python 中，除十进制外还可以使用二进制、八进制和十六进制&lt;/p&gt; &lt;ul&gt; &lt;li&gt;二进制数字由 0 和 1 组成，我们使用 0b 或 0B 前缀表示二进制数&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;print(int(0b1010))#10 &lt;/code&gt;&lt;/pre&gt; &lt;ul&gt; &lt;li&gt;使用 bin()函数将一个数字转换为它的二进制形式&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;print(bin(0xf))#0b1111 &lt;/code&gt;&lt;/pre&gt; &lt;ul&gt; &lt;li&gt;八进制数由数字 0-7 组成，用前缀 0o 或 0O 表示 8 进制数&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;print(oct(8))#0o10 &lt;/code&gt;&lt;/pre&gt; &lt;ul&gt; &lt;li&gt;十六进数由数字 0-15 组成，用前缀 0x 或者 0X 表示 16 进制数&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;print(hex(16))#0x10 print(hex(15))#0xf &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;121&quot;&gt;121. 怎样声明多个变量并赋值？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;Python 是支持多个变量赋值的，代码示例如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;#对变量 a,b,c 声明并赋值 a,b,c = 1,2,3 &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;-10&quot;&gt;算法和数据结构&lt;/h3&gt; &lt;h4 id=&quot;122&quot;&gt;122. 已知：&lt;/h4&gt; &lt;pre&gt;&lt;code&gt;AList = [1,2,3] BSet = {1,2,3} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(1) 从 AList 和 BSet 中 查找 4，最坏时间复杂度哪个大？ (2) 从 AList 和 BSet 中 插入 4，最坏时间复杂度哪个大？&lt;/p&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; (1) 对于查找，列表和集合的最坏时间复杂度都是 O(n)，所以一样的。 (2) 列表操作插入的最坏时间复杂度为 o(n),集合为 o(1)，所以 Alist 大。 set 是哈希表所以操作的复杂度基本上都是 o(1)。&lt;/p&gt; &lt;h4 id=&quot;123python&quot;&gt;123. 用 Python 实现一个二分查找的函数&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;def binary_search(arr, target)：     n = len(arr)     left = 0     right = n-1     while left &amp;lt;= right ：         mid = (left + right)//2         if arr[mid] &amp;lt; target：             left = mid + 1         elif arr[mid] &amp;gt; target：             right = mid - 1           else：              print(f&quot;index：{mid},value：{arr[mid]}&quot;)             return True     return False  if __name__ ==  __main__ ：      l = [1,3,4,5,6,7,8]      binary_search(l,8)    &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;124python&quot;&gt;124. Python 单例模式的实现方法&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;实现单例模式的方法有多种，之前再说元类的时候用 call 方法实现了一个单例模式，另外 Python 的模块就是一个天然的单例模式，这里我们使用 new 关键字来实现一个单例模式。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&quot;&quot;&quot; 通过 new 函数实现简单的单例模式。 &quot;&quot;&quot; class Book：     def __new__(cls, title)：         if not hasattr(cls, &quot;_ins&quot;)：             cls._ins = super().__new__(cls)         print( in __new__ )         return cls._ins      def __init__(self, title)：         print( in __init__ )         super().__init__()         self.title = title   if __name__ ==  __main__ ：     b = Book( The Spider Book )     b2 = Book( The Flask Book )     print(id(b))     print(id(b2))     print(b.title)     print(b2.title) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;125python&quot;&gt;125. 使用 Python 实现一个斐波那契数列&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 斐波那契数列：数列从第 3 项开始，每一项都等于前两项之和。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;def fibonacci(num)：     &quot;&quot;&quot;     获取指定位数的列表     ：param num：     ：return：     &quot;&quot;&quot;     a, b = 0, 1     l = []     for i in range(num)：         a, b = b, a + b         l.append(b)     return l   if __name__ ==  __main__ ：     print(fibonacci(10)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;126&quot;&gt;126. 找出列表中的重复数字&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&quot;&quot;&quot; 从头扫到尾，只要当前元素值与下标不同，就做一次判断,numbers[i]与 numbers[numbers[i]]， 相等就认为找到了重复元素，返回 true,否则就交换两者，继续循环。直到最后还没找到认为没找到重复元素。 &quot;&quot;&quot;   # -*- coding：utf-8 -*- class Solution:     def duplicate(self, numbers):         &quot;&quot;&quot;          :param numbers:         :return:         &quot;&quot;&quot;         if numbers is None or len(numbers) &amp;lt;= 1:             return False         use_set = set()         duplication = {}         for index, value in enumerate(numbers):             if value not in use_set:                 use_set.add(value)             else:                 duplication[index] = value         return duplication   if __name__ ==  __main__ :     s = Solution()     d = s.duplicate([1, 2, -3, 4, 4, 95, 95, 5, 2, 2, -3, 7, 7, 5])     print(d) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;127&quot;&gt;127. 找出列表中的单个数字&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;def find_single(l ：list)：     result = 0     for v in l：         result ^= v     if result == 0：         print(&quot;没有落单元素&quot;)         else：         print(&quot;落单元素&quot; ,result)  if __name__ ==  __main__ ：     l = [1,2,3,4,5,6,2,3,4,5,6]     find_single(l)         &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;128&quot;&gt;128. 写一个冒泡排序&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&quot;&quot;&quot; 冒泡排序 &quot;&quot;&quot; def bubble_sort(arr)：     n = len(arr)     for i in range(n - 1)：         for j in range(n - i - 1)：             if arr[j] &amp;gt; arr[j + 1]：                 arr[j], arr[j + 1] = arr[j + 1], arr[j]   if __name__ ==  __main__ ：     l = [1, 2, 3, 4, 5, 55, 6, 3, 4, 5, 6]     bubble_sort(l)     print(l) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;129&quot;&gt;129. 写一个快速排序&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&quot;&quot;&quot; 快速排序 &quot;&quot;&quot;   def quick_sort(arr, first, last)：     if first &amp;gt;= last：         return     mid_value = arr[first]     low = first     high = last      while low &amp;lt; high：         while low &amp;lt; high and arr[high] &amp;gt;= mid_value：             high -= 1  # 游标左移         arr[low] = arr[high]          while low &amp;lt; high and arr[low] &amp;lt; mid_value：             low += 1         arr[high] = arr[low]         arr[low] = mid_value      quick_sort(arr, first, low - 1)     quick_sort(arr, low + 1, last)   if __name__ ==  __main__ ：     l = [1, 2, 3, 4, 5, 55, 6, 3, 4, 5, 6]     quick_sort(l, 0, len(l) - 1)     print(l) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;130&quot;&gt;130. 写一个拓扑排序&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&quot;&quot;&quot; 拓扑排序 对应于该图的拓扑排序。每一个有向无环图都至少存在一种拓扑排序。  &quot;&quot;&quot; import pysnooper from typing import Mapping   @pysnooper.snoop() def topological_sort(graph： Mapping)：     # in_degrees = { a ： 0,  b ： 0,  c ： 0,  d ： 0,  e ： 0,  f ： 0}     in_degrees = dict((u, 0) for u in graph)     for u in graph：         for v in graph[u]：  # 根据键找出值也就是下级节点             in_degrees[v] += 1  # 对获取到的下级节点的入度加 1     # 循环结束之后的结果： { a ： 0,  b ： 1,  c ： 1,  d ： 2,  e ： 1,  f ： 4}     Q = [u for u in graph if in_degrees[u] == 0]  # 入度为 0 的节点     in_degrees_zero = []     while Q：         u = Q.pop()  # 默认从最后一个移除         in_degrees_zero.append(u)  # 存储入度为 0 的节点         for v in graph[u]：             in_degrees[v] -= 1  # 删除入度为 0 的节点，以及移除其指向             if in_degrees[v] == 0：                 Q.append(v)     return in_degrees_zero   if __name__ ==  __main__ ：     # 用字典的键值表示图的节点之间的关系，键当前节点。值是后续节点。     graph_dict = {          a ：  bf ,  # 表示 a 指向 b 和 f          b ：  cdf ,          c ：  d ,          d ：  ef ,          e ：  f ,          f ：        }      t = topological_sort(graph_dict)     print(t) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;131python&quot;&gt;131. Python 实现一个二进制计算&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&quot;&quot;&quot; 二进制加法 &quot;&quot;&quot; def binary_add(a： str, b： str)：     return bin(int(a, 2) + int(b, 2))[2：]   if __name__ ==  __main__ ：     num1 = input(&quot;输入第一个数，二进制格式： n&quot;)     num2 = input(&quot;输入第二个数，二进制格式： n&quot;)     print(binary_add(num1, num2)) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;132&quot;&gt;132. 有一组“+”和“-”符号，要求将“+”排到左边，“-”排到右边，写出具体的实现方法。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&quot;&quot;&quot; 有一组“+”和“-”符号，要求将“+”排到左边，“-”排到右边，写出具体的实现方法。  如果让+等于 0，-等于 1 不就是排序了么。 &quot;&quot;&quot; from collections import deque from timeit import Timer  s = &quot;++++++----+++----&quot;   # 方法一 def func1()：     new_s = s.replace(&quot;+&quot;, &quot;0&quot;).replace(&quot;-&quot;, &quot;1&quot;)     result = &quot;&quot;.join(sorted(new_s)).replace(&quot;0&quot;, &quot;+&quot;).replace(&quot;1&quot;, &quot;-&quot;)     return result   # 方法二 def func2()：     q = deque()     left = q.appendleft     right = q.append     for i in s：         if i == &quot;+&quot;：             left(&quot;+&quot;)         elif i == &quot;-&quot;：             right(&quot;-&quot;)   def func3()：     data = list(s)     start_index = 0     end_index = 0     count = len(s)     while start_index + end_index &amp;lt; count：         if data[start_index] ==  - ：             data[start_index], data[count - end_index - 1] = data[count - end_index - 1], data[start_index]             end_index += 1         else：             start_index += 1     return &quot;&quot;.join(data)   if __name__ ==  __main__ ：     timer1 = Timer(&quot;func1()&quot;, &quot;from __main__ import func1&quot;)     print(&quot;func1&quot;, timer1.timeit(1000000))     timer2 = Timer(&quot;func2()&quot;, &quot;from __main__ import func2&quot;)     print(&quot;func2&quot;, timer2.timeit(1000000))     timer3 = Timer(&quot;func3()&quot;, &quot;from __main__ import func3&quot;)     print(&quot;func3&quot;, timer3.timeit(1000000))  # 1000000 测试结果 # func1 1.39003764 # func2 1.593012875 # func3 3.3487415590000005 # func1 的方式最优，其次是 func2 &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;133&quot;&gt;133. 单链表反转&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&quot;&quot;&quot; 单链表反转 &quot;&quot;&quot;   class Node：     def __init__(self, val=None)：         self.val = val         self.next = None   class SingleLinkList：     def __init__(self, head=None)：         &quot;&quot;&quot;链表的头部&quot;&quot;&quot;         self._head = head      def add(self, val： int)：         &quot;&quot;&quot;         给链表添加元素         ：param val： 传过来的数字         ：return：         &quot;&quot;&quot;         # 创建一个节点         node = Node(val)         if self._head is None：             self._head = node         else：             cur = self._head             while cur.next is not None：                 cur = cur.next  # 移动游标             cur.next = node  # 如果 next 后面没了证明以及到最后一个节点了      def traversal(self)：         if self._head is None：             return         else：             cur = self._head             while cur is not None：                 print(cur.val)                 cur = cur.next      def size(self)：         &quot;&quot;&quot;         获取链表的大小         ：return：         &quot;&quot;&quot;         count = 0         if self._head is None：             return count         else：             cur = self._head             while cur is not None：                 count += 1                 cur = cur.next             return count      def reverse(self)：         &quot;&quot;&quot;         单链表反转         思路：         让 cur.next 先断开即指向 none，指向设定 pre 游标指向断开的元素，然后         cur.next 指向断开的元素，再把开始 self._head 再最后一个元素的时候.         ：return：         &quot;&quot;&quot;         if self._head is None or self.size() == 1：             return         else：             pre = None             cur = self._head             while cur is not None：                 post = cur.next                 cur.next = pre                 pre = cur                 cur = post             self._head = pre  # 逆向后的头节点   if __name__ ==  __main__ ：     single_link = SingleLinkList()     single_link.add(3)     single_link.add(5)     single_link.add(6)     single_link.add(7)     single_link.add(8)     print(&quot;对链表进行遍历&quot;)     single_link.traversal()     print(f&quot;size：{single_link.size()}&quot;)     print(&quot;对链表进行逆向操作之后&quot;)     single_link.reverse()     single_link.traversal() &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;134&quot;&gt;134. 交叉链表求交点&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# Definition for singly-linked list. class ListNode：     def __init__(self, x)：         self.val = x         self.next = None   class Solution：     def getIntersectionNode(self, headA, headB)：         &quot;&quot;&quot;         ：tye head1, head1： ListNode         ：rtye： ListNode         &quot;&quot;&quot;         if headA is not None and headB is not None：             cur1, cur2 = headA, headB              while cur1 != cur2：                 cur1 = cur1.next if cur1 is not None else headA                 cur2 = cur2.next if cur2 is not None else headB              return cur1 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;cur1、cur2，2 个指针的初始位置是链表 headA、headB 头结点，cur1、cur2 两个指针一直往后遍历。 直到 cur1 指针走到链表的末尾，然后 cur1 指向 headB； 直到 cur2 指针走到链表的末尾，然后 cur2 指向 headA； 然后再继续遍历； 每次 cur1、cur2 指向 None，则将 cur1、cur2 分别指向 headB、headA。 循环的次数越多，cur1、cur2 的距离越接近，直到 cur1 等于 cur2。则是两个链表的相交点。&lt;/p&gt; &lt;h4 id=&quot;135&quot;&gt;135. 用队列实现栈&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： 下面代码分别使用 1 个队列和 2 个队列实现了栈。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;from queue import Queue  #使用 2 个队列实现 class MyStack：      def __init__(self)：         &quot;&quot;&quot;         Initialize your data structure here.         &quot;&quot;&quot;         # q1 作为进栈出栈，q2 作为中转站         self.q1 = Queue()         self.q2 = Queue()      def push(self, x)：         &quot;&quot;&quot;         Push element x onto stack.         ：type x： int         ：rtype： void         &quot;&quot;&quot;         self.q1.put(x)      def pop(self)：         &quot;&quot;&quot;         Removes the element on top of the stack and returns that element.         ：rtype： int         &quot;&quot;&quot;          while self.q1.qsize() &amp;gt; 1：             self.q2.put(self.q1.get())  # 将 q1 中除尾元素外的所有元素转到 q2 中         if self.q1.qsize() == 1：             res = self.q1.get()  # 弹出 q1 的最后一个元素             self.q1, self.q2 = self.q2, self.q1  # 交换 q1,q2             return res      def top(self)：         &quot;&quot;&quot;         Get the top element.         ：rtype： int         &quot;&quot;&quot;         while self.q1.qsize() &amp;gt; 1：             self.q2.put(self.q1.get())  # 将 q1 中除尾元素外的所有元素转到 q2 中         if self.q1.qsize() == 1：             res = self.q1.get()  # 弹出 q1 的最后一个元素             self.q2.put(res)  # 与 pop 唯一不同的是需要将 q1 最后一个元素保存到 q2 中             self.q1, self.q2 = self.q2, self.q1  # 交换 q1,q2             return res      def empty(self)：         &quot;&quot;&quot;         Returns whether the stack is empty.         ：rtype： bool         &quot;&quot;&quot;         return not bool(self.q1.qsize() + self.q2.qsize())  # 为空返回 True，不为空返回 False   #使用 1 个队列实现 class MyStack2(object)：      def __init__(self)：         &quot;&quot;&quot;         Initialize your data structure here.         &quot;&quot;&quot;         self.sq1 = Queue()      def push(self, x)：         &quot;&quot;&quot;         Push element x onto stack.         ：type x： int         ：rtype： void         &quot;&quot;&quot;         self.sq1.put(x)      def pop(self)：         &quot;&quot;&quot;         Removes the element on top of the stack and returns that element.         ：rtype： int         &quot;&quot;&quot;         count = self.sq1.qsize()         if count == 0：             return False         while count &amp;gt; 1：             x = self.sq1.get()             self.sq1.put(x)             count -= 1         return self.sq1.get()      def top(self)：         &quot;&quot;&quot;         Get the top element.         ：rtype： int         &quot;&quot;&quot;         count = self.sq1.qsize()         if count == 0：             return False         while count：             x = self.sq1.get()             self.sq1.put(x)             count -= 1         return x      def empty(self)：         &quot;&quot;&quot;         Returns whether the stack is empty.         ：rtype： bool         &quot;&quot;&quot;         return self.sq1.empty()   if __name__ ==  __main__ ：     obj = MyStack2()     obj.push(1)     obj.push(3)     obj.push(4)     print(obj.pop())     print(obj.pop())     print(obj.pop())     print(obj.empty()) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;136&quot;&gt;136. 找出数据流的中位数&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：对于一个升序排序的数组，中位数为左半部分的最大值，右半部分的最小值，而左右两部分可以是无需的，只要保证左半部分的数均小于右半部分即可。因此，左右两半部分分别可用最大堆、最小堆实现。&lt;/p&gt; &lt;p&gt;如果有奇数个数，则中位数放在左半部分；如果有偶数个数，则取左半部分的最大值、右边部分的最小值之平均值。&lt;/p&gt; &lt;p&gt;分两种情况讨论： 当目前有偶数个数字时，数字先插入最小堆，然后选择最小堆的最小值插入最大堆（第一个数字插入左半部分的最小堆）。&lt;/p&gt; &lt;p&gt;当目前有奇数个数字时，数字先插入最大堆，然后选择最大堆的最大值插入最小堆。 最大堆：根结点的键值是所有堆结点键值中最大者，且每个结点的值都比其孩子的值大。 最小堆：根结点的键值是所有堆结点键值中最小者，且每个结点的值都比其孩子的值小。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# -*- coding：utf-8 -*- from heapq import *   class Solution：     def __init__(self)：         self.maxheap = []         self.minheap = []      def Insert(self, num)：         if (len(self.maxheap) + len(self.minheap)) &amp;amp; 0x1：  # 总数为奇数插入最大堆             if len(self.minheap) &amp;gt; 0：                 if num &amp;gt; self.minheap[0]：  # 大于最小堆里的元素                     heappush(self.minheap, num)  # 新数据插入最小堆                     heappush(self.maxheap, -self.minheap[0])  # 最小堆中的最小插入最大堆                     heappop(self.minheap)                 else：                     heappush(self.maxheap, -num)             else：                 heappush(self.maxheap, -num)         else：  # 总数为偶数 插入最小堆             if len(self.maxheap) &amp;gt; 0：  # 小于最大堆里的元素                 if num &amp;lt; -self.maxheap[0]：                     heappush(self.maxheap, -num)  # 新数据插入最大堆                     heappush(self.minheap, -self.maxheap[0])  # 最大堆中的最大元素插入最小堆                     heappop(self.maxheap)                 else：                     heappush(self.minheap, num)             else：                 heappush(self.minheap, num)      def GetMedian(self, n=None)：         if (len(self.maxheap) + len(self.minheap)) &amp;amp; 0x1：             mid = self.minheap[0]         else：             mid = (self.minheap[0] - self.maxheap[0]) / 2.0         return mid   if __name__ ==  __main__ ：     s = Solution()     s.Insert(1)     s.Insert(2)     s.Insert(3)     s.Insert(4)     print(s.GetMedian()) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;137k&quot;&gt;137. 二叉搜索树中第 K 小的元素&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：   二叉搜索树(Binary Search Tree)，又名二叉排序树(Binary Sort Tree)。   二叉搜索树是具有有以下性质的二叉树： &lt;/p&gt; &lt;ol&gt; &lt;li&gt;若左子树不为空，则左子树上所有节点的值均小于或等于它的根节点的值。&lt;/li&gt; &lt;li&gt;若右子树不为空，则右子树上所有节点的值均大于或等于它的根节点的值。&lt;/li&gt; &lt;li&gt;左、右子树也分别为二叉搜索树。&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;二叉搜索树按照中序遍历的顺序打印出来正好就是排序好的顺序。所以对其遍历一个节点就进行计数，计数达到 k 的时候就结束。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;class TreeNode：     def __init__(self, x)：         self.val = x         self.left = None         self.right = None   class Solution：     count = 0     nodeVal = 0      def kthSmallest(self, root, k)：         &quot;&quot;&quot;         ：type root： TreeNode         ：type k： int         ：rtype： int         &quot;&quot;&quot;         self.dfs(root, k)         return self.nodeVal      def dfs(self, node, k)：         if node != None：             self.dfs(node.left, k)             self.count = self.count + 1             if self.count == k：                 self.nodeVal = node.val                 # 将该节点的左右子树置为 None,来结束递归，减少时间复杂度                 node.left = None                 node.right = None             self.dfs(node.right, k) &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;-11&quot;&gt;爬虫相关&lt;/h3&gt; &lt;h4 id=&quot;138requestsrequestscontentrequeststext&quot;&gt;138. 在 requests 模块中，requests.content 和 requests.text 什么区别&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; requests.content 获取的是字节，requests.text 获取的是文本内容。&lt;/p&gt; &lt;h4 id=&quot;139lxml&quot;&gt;139. 简要写一下 lxml 模块的使用方法框架&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;from lxml import html source=    &amp;lt;div class=&quot;nam&quot;&amp;gt;&amp;lt;span&amp;gt;中国&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt; root=html.fromstring(source) _content=root.xpath(&quot;string(//div[@class= nam ])&quot;)  if _content and isinstance(_content,list)：     content=_content[0]  elif isinstance(_content,str)：     content=_content     print(content) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;140scrapy&quot;&gt;140. 说一说 scrapy 的工作流程&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;首先还是先看张图&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://images.gitbook.cn/47a53040-8bf4-11e9-86b6-1bdaa75635da&quot; alt=&quot;enter image description here&quot; /&gt;&lt;/p&gt; &lt;p&gt;已 www.baidu.com 为例： 首先需要知道的事各个模块之间调用都是通过引擎进行的。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;spider 把百度需要下载的第一个 url：www.baidu.com 交给引擎。&lt;/li&gt; &lt;li&gt;引擎把 url 交给调度器排序入队处理。&lt;/li&gt; &lt;li&gt;调度器把处理好的 request 返回给引擎。&lt;/li&gt; &lt;li&gt;通过引擎调动下载器，按照下载中间件的设置下载这个 request。&lt;/li&gt; &lt;li&gt;下载器下载完毕结果返回给引擎（如果失败：不好意思，这个 request 下载失败，然后引擎告诉调度器，这个 request 下载失败了，你记录一下，我们待会儿再下载。）&lt;/li&gt; &lt;li&gt;引擎调度 spider，把按照 Spider 中间件处理过了的请求，交给 spider 处理。&lt;/li&gt; &lt;li&gt;spider 把处理好的 url 和 item 传给引擎。&lt;/li&gt; &lt;li&gt;引擎根据不同的类型调度不同的模块，调度 Item Pipeline 处理 item。&lt;/li&gt; &lt;li&gt;把 url 交给调度器。 然后从第 4 步开始循环，直到获取到你需要的信息，&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;注意！只有当调度器中不存在任何 request 了，整个程序才会停止。&lt;/p&gt; &lt;h4 id=&quot;141scrapy&quot;&gt;141. scrapy 的去重原理&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;scrapy 本身自带一个去重中间件，scrapy 源码中可以找到一个 dupefilters.py 去重器。里面有个方法叫做 request_seen，它在 scheduler(发起请求的第一时间)的时候被调用。它代码里面调用了 request_fingerprint 方法（就是给 request 生成一个指纹）。&lt;/p&gt; &lt;p&gt;就是给每一个传递过来的 url 生成一个固定长度的唯一的哈希值。但是这种量级千万到亿的级别内存是可以应付的。&lt;/p&gt; &lt;h4 id=&quot;142scrapy&quot;&gt;142. scrapy 中间件有几种类，你用过哪些中间件&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; scrapy 的中间件理论上有三种(Schduler Middleware,Spider Middleware,Downloader Middleware)。在应用上一般有以下两种&lt;/p&gt; &lt;ol&gt; &lt;li&gt;爬虫中间件 Spider Middleware：主要功能是在爬虫运行过程中进行一些处理。&lt;/li&gt; &lt;li&gt;下载器中间件 Downloader Middleware：这个中间件可以实现修改 User-Agent 等 headers 信息，处理重定向，设置代理，失败重试，设置 cookies 等功能。&lt;/li&gt; &lt;/ol&gt; &lt;h4 id=&quot;143&quot;&gt;143. 你写爬虫的时候都遇到过什么？反爬虫措施，你是怎么解决的？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;Headers： 从用户的 headers 进行反爬是最常见的反爬虫策略。Headers 是一种区分浏览器行为和机器行为中最简单的方法，还有一些网站会对 Referer （上级链接）进行检测（机器行为不太可能通过链接跳转实现）从而实现爬虫。 相应的解决措施：通过审查元素或者开发者工具获取相应的 headers 然后把相应的 headers 传输给 Python 的 requests，这样就能很好地绕过。&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;IP 限制 一些网站会根据你的 IP 地址访问的频率，次数进行反爬。也就是说如果你用单一的 IP 地址访问频率过高，那么服务器会在短时间内禁止这个 IP 访问。&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;解决措施：构造自己的 IP 代理池，然后每次访问时随机选择代理（但一些 IP 地址不是非常稳定，需要经常检查更新）。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UA 限制 UA 是用户访问网站时候的浏览器标识，其反爬机制与 ip 限制类似。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;解决措施：使用随机 UA&lt;/p&gt; &lt;ul&gt; &lt;li&gt;验证码反爬虫或者模拟登陆 验证码：这个办法也是相当古老并且相当的有效果，如果一个爬虫要解释一个验证码中的内容，这在以前通过简单的图像识别是可以完成的，但是就现在来讲，验证码的干扰线，噪点都很多，甚至还出现了人类都难以认识的验证码。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;相应的解决措施：验证码识别的基本方法：截图，二值化、中值滤波去噪、分割、紧缩重排（让高矮统一）、字库特征匹配识别。（Python 的 PIL 库或者其他），复杂的情况需求接入打码平台。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Ajax 动态加载 网页的不希望被爬虫拿到的数据使用 Ajax 动态加载，这样就为爬虫造成了绝大的麻烦，如果一个爬虫不具备 js 引擎，或者具备 js 引擎，但是没有处理 js 返回的方案，或者是具备了 js 引擎，但是没办法让站点显示启用脚本设置。基于这些情况，ajax 动态加载反制爬虫还是相当有效的。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Ajax 动态加载的工作原理是：从网页的 url 加载网页的源代码之后，会在浏览器里执行 JavaScript 程序。这些程序会加载出更多的内容，并把这些内容传输到网页中。这就是为什么有些网页直接爬它的 URL 时却没有数据的原因。&lt;/p&gt; &lt;p&gt;处理方法：找对应的 ajax 接口，一般数据返回类型为 json。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;cookie 限制 一次打开网页会生成一个随机 cookie，如果再次打开网页这个 cookie 不存在，那么再次设置，第三次打开仍然不存在，这就非常有可能是爬虫在工作了。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;解决措施：在 headers 挂上相应的 cookie 或者根据其方法进行构造（例如从中选取几个字母进行构造）。如果过于复杂，可以考虑使用 selenium 模块（可以完全模拟浏览器行为）。&lt;/p&gt; &lt;h4 id=&quot;144&quot;&gt;144. 为什么会用到代理？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;如果使用同一个 ip 去不断的访问的网站的话,会很容易被封 ip，严重的永久封禁，导致当前的访问不了该网站。不只是通过程序，通过浏览器也无法访问。&lt;/p&gt; &lt;h4 id=&quot;145&quot;&gt;145. 代理失效了怎么处理？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;一般通过大家代理池来实现代理切换等操作，来实现时时使用新的代理 ip，来避免代理失效的问题。&lt;/p&gt; &lt;h4 id=&quot;146header&quot;&gt;146. 列出你知道 header 的内容以及信息&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; User-Agent：User-Agent 的内容包含发出请求的用户信息。 Accept：指定客户端能够接收的内容类型。 Accept-Encoding：指定浏览器可以支持的 web 服务器返回内容压缩编码类型。 Accept-Language：浏览器可接受的语言。 Connection：表示是否需要持久连接。（HTTP 1.1 默认进行持久连接）。 Content-Length：请求的内容长度。 If-Modified-Since：如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回 304 代码。 Referer：先前网页的地址，当前请求网页紧随其后，即来路。&lt;/p&gt; &lt;h4 id=&quot;147wwwbaiducom&quot;&gt;147. 说一说打开浏览器访问 www.baidu.com 获取到结果，整个流程。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 浏览器向 DNS 服务器发送 baidu.com 域名解析请求。 DNS 服务器返回解析后的 ip 给客户端浏览器，浏览器想该 ip 发送页面请求。 DNS 服务器接收到请求后，查询该页面，并将页面发送给客户端浏览器。 客户端浏览器接收到页面后，解析页面中的引用，并再次向服务器发送引用资源请求。 服务器接收到资源请求后，查找并返回资源给客户端。 客户端浏览器接收到资源后，渲染，输出页面展现给用户。&lt;/p&gt; &lt;h4 id=&quot;148&quot;&gt;148. 爬取速度过快出现了验证码怎么处理&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;一般在爬取过程中出现了验证码根据不同的情况，处理不一样。 如果在一开始访问就有验证码,那么就想办法绕开验证码,比如通过 wap 端或者 app 去发现其他接口等，如果不行就得破解验证码了，复杂验证码就需要接入第三方打码平台了。 如果开始的时候没有验证码，爬了一段时间才出现验证码，这个情况就要考虑更换代理 ip 了。 可能因为同一个访问频率高导致的。&lt;/p&gt; &lt;h4 id=&quot;149scrapyscrapyredisredis&quot;&gt;149. scrapy 和 scrapy-redis 有什么区别？为什么选择 redis 数据库？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; scrapy 是一个 Python 爬虫框架，爬取效率极高，具有高度定制性，但是不支持分布式。而 scrapy-redis 一套基于 redis 数据库、运行在 scrapy 框架之上的组件，可以让 scrapy 支持分布式策略，Slaver 端共享 Master 端 redis 数据库里的 item 队列、请求队列和请求指纹集合。&lt;/p&gt; &lt;p&gt;为什么选择 redis 数据库，因为 redis 支持主从同步，而且数据都是缓存在内存中的，所以基于 redis 的分布式爬虫，对请求和数据的高频读取效率非常高。&lt;/p&gt; &lt;h4 id=&quot;150&quot;&gt;150. 分布式爬虫主要解决什么问题&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;使用分布式主要目的就是为了给爬虫加速。解决了单个 ip 的限制，宽带的影响，以及 CPU 的使用情况和 io 等一系列操作&lt;/p&gt; &lt;h4 id=&quot;151&quot;&gt;151. 写爬虫是用多进程好？还是多线程好？ 为什么？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 多线程，因为爬虫是对网络操作属于 io 密集型操作适合使用多线程或者协程。&lt;/p&gt; &lt;h4 id=&quot;152&quot;&gt;152. 解析网页的解析器使用最多的是哪几个&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;lxml，pyquery&lt;/p&gt; &lt;h4 id=&quot;153ipcookiesession&quot;&gt;153. 需要登录的网页，如何解决同时限制 ip，cookie,session（其中有一些是动态生成的）在不使用动态爬取的情况下？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 解决限制 IP 可以搭建代理 IP 地址池、adsl 拨号使用等。&lt;/p&gt; &lt;p&gt;不适用动态爬取的情况下可以使用反编译 JS 文件获取相应的文件，或者换用其他平台（比如手机端）看看是否可以获取相应的 json 文件，一般要学会习惯性的先找需要爬取网站的 h5 端页面，看看有没有提供接口，进而简化操作。&lt;/p&gt; &lt;h4 id=&quot;154&quot;&gt;154. 验证码的解决?&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 图形验证码：干扰、杂色不是特别多的图片可以使用开源库 Tesseract 进行识别，太过复杂的需要借助第三方打码平台。 点击和拖动滑块验证码可以借助 selenium、无图形界面浏览器（chromedirver 或者 phantomjs）和 pillow 包来模拟人的点击和滑动操作，pillow 可以根据色差识别需要滑动的位置。&lt;/p&gt; &lt;h4 id=&quot;155mysqlmongodbredis&quot;&gt;155. 使用最多的数据库（mysql，mongodb，redis 等），对他的理解？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; MySQL 数据库：开源免费的关系型数据库，需要实现创建数据库、数据表和表的字段，表与表之间可以进行关联（一对多、多对多），是持久化存储。&lt;/p&gt; &lt;p&gt;mongodb 数据库：是非关系型数据库，数据库的三元素是，数据库、集合、文档，可以进行持久化存储，也可作为内存数据库，存储数据不需要事先设定格式，数据以键值对的形式存储。&lt;/p&gt; &lt;p&gt;redis 数据库：非关系型数据库，使用前可以不用设置格式，以键值对的方式保存，文件格式相对自由，主要用与缓存数据库，也可以进行持久化存储。&lt;/p&gt; &lt;h3 id=&quot;-12&quot;&gt;网络编程&lt;/h3&gt; &lt;h4 id=&quot;156tcpudp&quot;&gt;156. TCP 和 UDP 的区别？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; UDP 是面向无连接的通讯协议，UDP 数据包括目的端口号和源端口号信息。&lt;/p&gt; &lt;p&gt;优点：UDP 速度快、操作简单、要求系统资源较少，由于通讯不需要连接，可以实现广播发送。&lt;/p&gt; &lt;p&gt;缺点：UDP 传送数据前并不与对方建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收，也不重复发送，不可靠。&lt;/p&gt; &lt;p&gt;TCP 是面向连接的通讯协议，通过三次握手建立连接，通讯完成时四次挥手。&lt;/p&gt; &lt;p&gt;优点：TCP 在数据传递时，有确认、窗口、重传、阻塞等控制机制，能保证数据正确性，较为可靠。&lt;/p&gt; &lt;p&gt;缺点：TCP 相对于 UDP 速度慢一点，要求系统资源较多。&lt;/p&gt; &lt;h4 id=&quot;157&quot;&gt;157. 简要介绍三次握手和四次挥手&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt; 三次握手 第一次握手：主机 A 发送同步报文段（SYN）请求建立连接。 第二次握手：主机 B 听到连接请求，就将该连接放入内核等待队列当中，并向主机 A 发送针对 SYN 的确认 ACK，同时主机 B 也发送自己的请求建立连接（SYN）。 第三次握手：主机 A 针对主机 BSYN 的确认应答 ACK。&lt;/p&gt; &lt;p&gt;四次挥手 第一次挥手：当主机 A 发送数据完毕后，发送 FIN 结束报文段。 第二次挥手：主机 B 收到 FIN 报文段后，向主机 A 发送一个确认序号 ACK（为了防止在这段时间内，对方重传 FIN 报文段）。 第三次挥手：主机 B 准备关闭连接，向主机 A 发送一个 FIN 结束报文段。 第四次挥手：主机 A 收到 FIN 结束报文段后，进入 TIME_WAIT 状态。并向主机 B 发送一个 ACK 表示连接彻底释放。&lt;/p&gt; &lt;p&gt;除此之外经常看的问题还有，为什么 2、3 次挥手不能合在一次挥手中？ 那是因为此时 A 虽然不再发送数据了，但是还可以接收数据，B 可能还有数据要发送给 A，所以两次挥手不能合并为一次。&lt;/p&gt; &lt;h4 id=&quot;158socket&quot;&gt;158. 什么是粘包？ socket 中造成粘包的原因是什么？ 哪些情况会发生粘包现象？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;TCP 是流式协议，只有字节流，流是没有边界的，根部就不存在粘包一说，一般粘包都是业务上没处理好造成的。&lt;/p&gt; &lt;p&gt;但是在描述这个现象的时候，可能还得说粘包。TCP 粘包通俗来讲，就是发送方发送的多个数据包，到接收方后粘连在一起，导致数据包不能完整的体现发送的数据。&lt;/p&gt; &lt;p&gt;导致 TCP 粘包的原因，可能是发送方的原因，也有可能是接受方的原因。&lt;/p&gt; &lt;p&gt;发送方 由于 TCP 需要尽可能高效和可靠，所以 TCP 协议默认采用 Nagle 算法，以合并相连的小数据包，再一次性发送，以达到提升网络传输效率的目的。但是接收方并不知晓发送方合并数据包，而且数据包的合并在 TCP 协议中是没有分界线的，所以这就会导致接收方不能还原其本来的数据包。&lt;/p&gt; &lt;p&gt;接收方 TCP 是基于“流”的。网络传输数据的速度可能会快过接收方处理数据的速度，这时候就会导致，接收方在读取缓冲区时，缓冲区存在多个数据包。在 TCP 协议中接收方是一次读取缓冲区中的所有内容，所以不能反映原本的数据信息。&lt;/p&gt; &lt;p&gt;一般的解决方案大概下面几种：&lt;/p&gt; &lt;ol&gt; &lt;li&gt;发送定长包。如果每个消息的大小都是一样的，那么在接收对等方只要累计接收数据，直到数据等于一个定长的数值就将它作为一个消息。&lt;/li&gt; &lt;li&gt;包尾加上 r n 标记。FTP 协议正是这么做的。但问题在于如果数据正文中也含有 r n，则会误判为消息的边界。&lt;/li&gt; &lt;li&gt;包头加上包体长度。包头是定长的 4 个字节，说明了包体的长度。接收对等方先接收包体长度，依据包体长度来接收包体。&lt;/li&gt; &lt;/ol&gt; &lt;h3 id=&quot;-13&quot;&gt;并发&lt;/h3&gt; &lt;h4 id=&quot;159concurrentfuture&quot;&gt;159. 举例说明 concurrent.future 的中线程池的用法&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;from concurrent.futures import ThreadPoolExecutor import requests URLS = [ http：//www.163.com ,  https：//www.baidu.com/ ,  https：//github.com/ ] def load_url(url)：         req= requests.get(url, timeout=60)         print(f {url} page is {len(req.content))} bytes ) with ThreadPoolExecutor(max_workers=3) as pool：         pool.map(load_url,URLS) print( 主线程结束 ) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;160&quot;&gt;160. 说一说多线程，多进程和协程的区别。&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： 概念：&lt;/p&gt; &lt;p&gt;进程：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动, 进程是系统进行资源分配和调度的一个独立单位。每个进程都有自己的独立内存空间， 不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存， 所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;线程：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;线程是进程的一个实体,是 CPU 调度和分派的基本单位, 它是比进程更小的能独立运行的基本单位. 线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈), 但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。 线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;协程：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;协程是一种用户态的轻量级线程，协程的调度完全由用户控制。 协程拥有自己的寄存器上下文和栈。 协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈， 直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;区别： 进程与线程比较： 线程是指进程内的一个执行单元,也是进程内的可调度实体。线程与进程的区别：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;1) 地址空间：线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间， 而进程有自己独立的地址空间 2) 资源拥有：进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源 3) 线程是处理器调度的基本单位,但进程不是 4) 二者均可并发执行 5) 每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口， 但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;协程与线程进行比较：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;1) 一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样 Python 中则能使用多核 CPU。 2) 线程进程都是同步机制，而协程则是异步 3) 协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态 &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;161gil&quot;&gt;161. 简述 GIL&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： GIL：全局解释器锁。每个线程在执行的过程都需要先获取 GIL，保证同一时刻只有一个线程可以执行代码。 &lt;/p&gt; &lt;p&gt;线程释放 GIL 锁的情况：在 IO 操作等可能会引起阻塞的 systemcall 之前,可以暂时释放 GIL，但在执行完毕后, 必须重新获取 GIL，Python3.x 使用计时器（执行时间达到阈值后，当前线程释放 GIL）或 Python2.x，tickets 计数达到 100 。&lt;/p&gt; &lt;p&gt;Python 使用多进程是可以利用多核的 CPU 资源的。 &lt;/p&gt; &lt;p&gt;多线程爬取比单线程性能有提升，因为遇到 IO 阻塞会自动释放 GIL 锁。&lt;/p&gt; &lt;h4 id=&quot;162&quot;&gt;162. 进程之间如何通信&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： 可以通过队列的形式，示例如下&lt;/p&gt; &lt;pre&gt;&lt;code&gt;from multiprocessing import Queue, Process import time, random  # 要写入的数据 list1 = [&quot;java&quot;, &quot;Python&quot;, &quot;JavaScript&quot;]   def write(queue)：     &quot;&quot;&quot;     向队列中添加数据     ：param queue：     ：return：     &quot;&quot;&quot;     for value in list1：         print(f&quot;正在向队列中添加数据--&amp;gt;{value}&quot;)         # put_nowait 不会等待队列有空闲位置再放入数据，如果数据放入不成功就直接崩溃,比如数据满了。put 的话就会一直等待         queue.put_nowait(value)         time.sleep(random.random())   def read(queue)：      while True：         # 判断队列是否为空         if not queue.empty()：             # get_nowait 队列为空，取值的时候不等待，但是取不到值那么直接崩溃了             value = queue.get_nowait()             print(f 从队列中取到的数据为--&amp;gt;{value} )             time.sleep(random.random())         else：             break  if __name__ ==  __main__ ：     # 父进程创建出队列，通过参数的形式传递给子进程     #queue = Queue(2)     queue = Queue()      # 创建两个进程 一个写数据 一个读数据     write_data = Process(target=write, args=(queue,))     read_data = Process(target=read, args=(queue,))      # 启动进程 写入数据     write_data.start()     # 使用 join 等待写数据结束     write_data.join()     # 启动进程  读取数据     print( *  * 20)     read_data.start()     # 使用 join  等待读数据结束     read_data.join()      print( 所有的数据都写入并读取完成。。。 ) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;163io&quot;&gt;163. IO 多路复用的作用？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： 阻塞 I/O 只能阻塞一个 I/O 操作，而 I/O 复用模型能够阻塞多个 I/O 操作，所以才叫做多路复用。&lt;/p&gt; &lt;p&gt;I/O 多路复用是用于提升效率，单个进程可以同时监听多个网络连接 IO。 在 IO 密集型的系统中， 相对于线程切换的开销问题，IO 多路复用可以极大的提升系统效率。&lt;/p&gt; &lt;h4 id=&quot;164selectpollepoll&quot;&gt;164. select、poll、epoll 模型的区别？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： select，poll，epoll 都是 IO 多路复用的机制。I/O 多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。&lt;/p&gt; &lt;p&gt;select 模型： select 目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select 的一 个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在 Linux 上一般为 1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但 是这样也会造成效率的降低。&lt;/p&gt; &lt;p&gt;poll 模型： poll 和 select 的实现非常类似，本质上的区别就是存放 fd 集合的数据结构不一样。select 在一个进程内可以维持最多 1024 个连接，poll 在此基础上做了加强，可以维持任意数量的连接。&lt;/p&gt; &lt;p&gt;但 select 和 poll 方式有一个很大的问题就是，我们不难看出来 select 是通过轮训的方式来查找是否可读或者可写，打个比方，如果同时有 100 万个连接都没有断开，而只有一个客户端发送了数据，所以这里它还是需要循环这么多次，造成资源浪费。所以后来出现了 epoll 系统调用。&lt;/p&gt; &lt;p&gt;epoll 模型： epoll 是 select 和 poll 的增强版，epoll 同 poll 一样，文件描述符数量无限制。但是也并不是所有情况下 epoll 都比 select/poll 好，比如在如下场景：在大多数客户端都很活跃的情况下，系统会把所有的回调函数都唤醒，所以会导致负载较高。既然要处理这么多的连接，那倒不如 select 遍历简单有效。&lt;/p&gt; &lt;h4 id=&quot;165&quot;&gt;165. 什么是并发和并行？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：“并行是指同一时刻同时做多件事情，而并发是指同一时间间隔内做多件事情”。&lt;/p&gt; &lt;p&gt;并发与并行是两个既相似而又不相同的概念：并发性，又称共行性，是指能处理多个同时性活动的能力；并行是指同时发生的两个并发事件，具有并发的含义，而并发则不一定并行，也亦是说并发事件之间不一定要同一时刻发生。&lt;/p&gt; &lt;p&gt;并发的实质是一个物理 CPU(也可以多个物理 CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。 并行性指两个或两个以上事件或活动在同一时刻发生。在多道程序环境下，并行性使多个程序同一时刻可在不同 CPU 上同时执行。&lt;/p&gt; &lt;p&gt;并行，是每个 CPU 运行一个程序。&lt;/p&gt; &lt;h4 id=&quot;16612&quot;&gt;166. 一个线程 1 让线程 2 去调用一个函数怎么实现&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import threading   def func1(t2)：     print( 正在执行函数func1 )     t2.start()   def func2()：     print( 正在执行函数func2 )   if __name__ ==  __main__ ：     t2 = threading.Thread(target=func2)     t1 = threading.Thread(target=func1, args=(t2,))     t1.start() &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;167&quot;&gt;167. 解释什么是异步非阻塞？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： 异步 异步与同步相对，当一个异步过程调用发出后，调用者在没有得到结果之前，就可以继续执行后续操作。当这个调用完成后，一般通过状态、通知和回调来通知调用者。对于异步调用，调用的返回并不受调用者控制。&lt;/p&gt; &lt;p&gt;非阻塞 非阻塞是这样定义的，当线程遇到 I/O 操作时，不会以阻塞的方式等待 I/O 操作的完成或数据的返回，而只是将 I/O 请求发送给操作系统，继续执行下一条语句。当操作系统完成 I/O 操作时，以事件的形式通知执行 I/O 操作的线程，线程会在特定时候处理这个事件。简答理解就是如果程序不会卡住，可以继续执行，就是说非阻塞的。&lt;/p&gt; &lt;h4 id=&quot;168threadinglocal&quot;&gt;168. threading.local 的作用？&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： threading.local()这个方法是用来保存一个全局变量，但是这个全局变量只有在当前线程才能访问，如果你在开发多线程应用的时候，需要每个线程保存一个单独的数据供当前线程操作，可以考虑使用这个方法，简单有效。代码示例&lt;/p&gt; &lt;pre&gt;&lt;code&gt;import threading import time  a = threading.local()#全局对象  def worker()：     a.x = 0     for i in range(200)：         time.sleep(0.01)         a.x += 1     print(threading.current_thread(),a.x)  for i in range(20)：     threading.Thread(target=worker).start() &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;git&quot;&gt;Git 面试题&lt;/h3&gt; &lt;h4 id=&quot;169git&quot;&gt;169. 说说你知道的 git 命令&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;： git init：该命令将创建一个名为 .git 的子目录,这个子目录含有你初始化的 Git 仓库中所有的必须文件,这些文件是 Git 仓库的骨干 git clone url：将服务器代码下载到本地 git pull：将服务器的代码拉到本地进行同步，如果本地有修改会产生冲突。 git push：提交本地修改的代码到服务器 git checkout -b branch：创建并切换分支 git status：查看修改状态 git add 文件名：提交到暂存区 git commit -m &quot;提交内容&quot;：输入提交的注释内容 git log：查看提交的日志情况&lt;/p&gt; &lt;h4 id=&quot;170git&quot;&gt;170. git 如何查看某次提交修改的内容&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：我们首先可以 git log 显示历史的提交列表 之后我们用 git show &lt;commit-hashId&gt; 便可以显示某次提交的修改内容 同样 git show &lt;commit-hashId&gt; filename 可以显示某次提交的某个内容的修改信息。&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;本文首发于 GitChat，未经授权不得转载，转载需与 GitChat 联系。&lt;/p&gt;"
}</script><style>.articleDiv img{
    max-width: 100%;
    display: block;
    margin:0 auto;
}
blockquote{
    font-size:16px;
}
a{
    color:#777;
    text-decoration: none;
}
a:hover{
    color:#FF700A;
    text-decoration: none;
}
.btn{
    padding: 6px 11px;
}
.toc {
    margin-left: -100px;
}
.qr img {
    margin: 20px auto;
    padding: 5px;
    border-radius: 5px;
    border: 1px solid #3f3f3f;
}
.dropload-down{
    display:none;
}
.cvip {
    display: inline-block;
    float: left;
    border: 0;
    margin: 15px 0 0 -66px;
    width: 55px;
    height: 55px;
}
@media screen and (min-width:481px){
    .main_view{
        margin-top:89px;
        padding:0 25px;
        border:0;
    }
}
@media screen and (max-width:480px){
    .main_view{
        margin-top:64px;
    }
}
#article_content img {
    cursor: pointer;
}

#showImageModal .modal-dialog {`
    max-width: 80%;
    width: 80%;
    margin: 0 auto;
    border: none;
    box-shadow: none;
}

#showImageModal .modal-content {
    margin-top: 100px;
    background-color: rgba(0, 0, 0, 0);
    border: none;
    box-shadow: none;
}

#showImageModal .modal-body {
    padding: 0;
    text-align: center;
    background-color: rgba(0, 0, 0, 0);
    border: none;
    box-shadow: none;
}
.cvip2 {
    display: inline-block;
    float: left;
    border: 0;
    margin: 0px 0 0 -33px;
    width: 32px;
    height: 32px;
}</style><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head><!--link(href='/dist/gitbook/css/backToTop.css', rel='stylesheet')--><body style="background-color: rgb(245, 245, 245);"><div id="MathJax_Message" style="display: none;"></div><link rel="stylesheet" href="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/topV6.css"><div class="my_container"><div class="mainDiv main_view"><div style="border:0;padding:0 20px 0 20px;background-color:#fff;" class="mazi-columns-container item-container"><h2 style="padding-left:18px;">Python 常见的 170 道面试题全解析：2019 版</h2><div style="padding: 0 18px;border: 0;margin-top: -16px;" class="mazi-activity-container"><div style="border:0;background-color:#fafafa;" class="mazi-author-describe"><a href="https://gitbook.cn/gitchat/author/5ca1ad4cc97e5d5a48bc7c7e"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/crown.png" style="width:15px;position: absolute;margin: 8px 0 0 28px;transform: rotate(-25deg)"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/6b3dd170-5449-11e9-b29e-6fbf413efb9a" style="border:2px solid #c9a063" class="mazi-activity-holder-cycle-thumb"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/cvip.png" class="cvip"></a><div class="mazi-activity-author-nd"><div class="mazi-author-name-mine"><div style="color:#036eb8;float:left;white-space: nowrap;overflow: hidden;text-overflow: ellipsis;max-width: 200px;"><a href="https://gitbook.cn/gitchat/author/5ca1ad4cc97e5d5a48bc7c7e"><span style="color:#036eb8;"> </span></a></div><span style="margin-left: 5px"><span class="avatorStar"></span><span class="avatorStar"></span><span class="avatorStar"></span><span class="avatorStar"></span><style>.avatorStar {
    display: inline-block;
    /*background-image: url('https://images.gitbook.cn/star36_on@2x.png');*/
    background-image: url('https://images.gitbook.cn/FtdV9WYTRquFIIfuwny71IrDzz-S');
    height: 12px;
    width: 12px;
    background-size: 12px 12px;
    background-repeat: no-repeat;
    margin-left: 3px;
}
.halfStar{
    display: inline-block;
    /*background-image: url('https://images.gitbook.cn/star36_half@2x.png');*/
    background-image: url('https://images.gitbook.cn/FjBozPVpuon43z4NzwiSxZxg075e');
    height: 12px;
    width: 12px;
    background-size: 6px 12px;
    background-repeat: no-repeat;
    margin-left: 3px;
}</style></span></div><div id="article_content" class="mazi-article-content dont-break-out"><p></p><div class="toc">
<ul>
<li><ul>
<li><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#">语言特性</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#1python">1. 谈谈对 Python 和其他语言的区别</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#2">2. 简述解释型和编译型编程语言</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#3python">3. Python 的解释器种类以及相关特点？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#4python3python2">4. Python3 和 Python2 的区别？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#5python3python2intlong">5. Python3 和 Python2 中 int 和 long 区别？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#6xrangerange">6. xrange 和 range 的区别？</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-1">编码规范</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#7pep8">7. 什么是 PEP8?</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#8python">8. 了解 Python 之禅么？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#9docstrings">9. 了解 DocStrings 么？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#10">10. 了解类型注解么？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#11python">11. 例举你知道 Python 对象的命名规范，例如方法或者类等</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#12python">12. Python 中的注释有几种？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#13">13. 如何优雅的给一个函数加注释？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#14">14. 如何给变量加注释？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#15pythontab">15. Python 代码缩进中是否支持 Tab 键和空格混用。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#16import">16. 是否可以在一句 import 中导入多个库?</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#17py">17. 在给 Py 文件命名的时候需要注意什么?</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#18python">18. 例举几个规范 Python 代码风格的工具</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-2">数据类型-字符串</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#19python">19. 列举 Python 中的基本数据类型？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#20">20. 如何区别可变数据类型和不可变数据类型</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#21helloworldhelloworld">21. 将"hello world"转换为首字母大写"Hello World"</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#22">22. 如何检测字符串中只含有数字?</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#23ilovechina">23. 将字符串"ilovechina"进行反转</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#24python">24. Python 中的字符串格式化方式你知道哪些？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#25adabdw">25. 有一个字符串开头和末尾都有空格，比如“ adabdw ”，要求写一个函数把这个字符串的前后空格都去掉。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#26123456">26. 获取字符串”123456“最后的两个字符。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#27gbksutf8">27. 一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#281sinfoxiaozhang33shandonginfoxiaozhang33shandong2a">28. （1）s="info：xiaoZhang 33 shandong"，用正则切分字符串输出['info', 'xiaoZhang', '33', 'shandong']。（2）a = "你好     中国  "，去除多余空格只留一个空格。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#2912">29. (1) 怎样将字符串转换为小写。 (2) 单引号、双引号、三引号的区别？</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-3">数据类型 - 列表</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#30alist12312alist">30. 已知 AList = [1,2,3,1,2]，对 AList 列表元素去重，写出具体过程。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#31123123">31. 如何实现 "1,2,3" 变成 ["1","2","3"]</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#32listab">32. 给定两个 list，A 和 B，找出相同元素和不同元素</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#33123456123456">33. [[1,2],[3,4],[5,6]] 一行代码展开该列表，得出 [1,2,3,4,5,6]</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#3415792268">34. 合并列表 [1,5,7,9] 和 [2,2,6,8]</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#35">35. 如何打乱一个列表的元素？</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-4">数据类型 - 字典</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#36delpop">36. 字典操作中 del 和 pop 有什么区别</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#37">37. 按照字典的内的年龄排序</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#38aa1b2bc3d4">38. 请合并下面两个字典 a = {"A"：1,"B"：2},b = {"C"：3,"D"：4}</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#39">39. 如何使用生成式的方式生成一个字典，写一段功能代码。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#40ab12a1b2">40. 如何把元组 ("a","b") 和元组 (1,2)，变为字典 {"a"：1,"b"：2}</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-5">数据类型 - 综合</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#41">41. 下列字典对象键类型不正确的是？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#42a1b2">42. 如何交换字典 {"A"：1,"B"：2}的键和值</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#43pythontuplelist">43. Python 里面如何实现 tuple 和 list 的转换？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#44">44. 我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#45iforiinrange3">45. 请将 [i for i in range(3)] 改成生成器</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#46ahellobbytes">46. a="hello" 和 b="你好" 编码成 bytes 类型</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#47">47. 下面的代码输出结果是什么？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#48">48. 下面的代码输出的结果是什么?</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-6">操作类题目</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#49python">49. Python 交换两个变量的值</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#50readreadlinereadlines">50. 在读文件操作的时候会使用 read、readline 或者 readlines，简述它们各自的作用</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#51jsondatetime">51. json 序列化时，可以处理的数据类型有哪些？如何定制支持 datetime 类型？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#52jsonunicode">52. json 序列化时，默认遇到中文会转换成 unicode，如果想要保留中文怎么办？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#53abc">53. 有两个磁盘文件 A 和 B，各存放一行字母，要求把这两个文件中的信息合并(按字母顺序排列)，输出到一个新文件 C 中。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#5420190530nn220190601">54. 如果当前的日期为 20190530，要求写一个函数输出 N 天后的日期，(比如 N 为 2，则输出 20190601)。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#55nn">55. 写一个函数，接收整数参数 n，返回一个函数，函数的功能是把函数的参数和 n 相乘并把结果返回。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#56">56. 下面代码会存在什么问题，如何改进？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#571100">57. 一行代码输出 1-100 之间的所有偶数。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#58with">58. with 语句的作用，写一段代码？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#59pythonjson">59. Python 字典和 json 字符串相互转化方法</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#60python">60. 请写一个 Python 逻辑，计算一个文件中的大写字母数量</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#61pythonmongo">61. 请写一段 Python连接Mongo数据库，然后的查询代码。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#62redis">62.说一说Redis的基本类型</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#63pythonredis">63. 请写一段 Python连接Redis数据库的代码。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#64pythonmysql">64. 请写一段 Python连接Mysql数据库的代码。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#65redis">65.了解Redis的事务么</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#66">66.了解数据库的三范式么？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#67">67.了解分布式锁么</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#68pythonreids">68.用 Python 实现一个 Reids 的分布式锁的功能</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#69pythonmongo">69.写一段 Python 使用 mongo 数据库创建索引的代码:</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-7">高级特性</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#70">70. 函数装饰器有什么作用？请列举说明？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#71python">71. Python 垃圾回收机制？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#72__call__">72. 魔法函数 _call_怎么使用?</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#73">73. 如何判断一个对象是函数还是方法？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#74classmethodstaticmethod">74. @classmethod 和 @staticmethod 用法和区别</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#75python">75. Python 中的接口如何实现？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#76python">76. Python 中的反射了解么?</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#77metaclass">77. metaclass 作用？以及应用场景？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#78hasattrgetattrsetattr">78. hasattr()、getattr()、setattr() 的用法</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#79python">79. 请列举你知道的 Python 的魔法方法及用途。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#80python">80. 如何知道一个 Python 对象的类型？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#81python">81. Python 的传参是传值还是传址？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#82pythonmetaclass">82. Python 中的元类 (metaclass) 使用举例</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#83anyall">83. 简述 any() 和 all() 方法</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#84filtera12345678910">84. filter 方法求出列表所有奇数并构造新列表，a =  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#85">85. 什么是猴子补丁？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#86python">86. 在 Python 中是如何管理内存的？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#87python">87. 当退出 Python 时是否释放所有内存分配？</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-8">正则表达式</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#881htmlh1wwwbaiducomh1html2a98resub98100">88. （1）使用正则表达式匹配出<h1\>www.baidu.com中的地址（2）a="张明 98 分"，用 re.sub，将 98 替换为 100</h1\></a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#89">89. 正则表达式匹配中(.*)和(.*?)匹配区别？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#90">90. 写一段匹配邮箱的正则表达式</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-9">其他内容</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#91pythonpass">91. 解释一下 Python 中 pass 语句的作用？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#92input">92. 简述你对 input()函数的理解</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#93pythonis">93. Python 中的 is 和==</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#94python">94. Python 中的作用域</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#95">95. 三元运算写法和应用场景？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#96enumerate">96. 了解 enumerate 么？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#975python">97. 列举 5 个 Python 中的标准模块</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#98">98. 如何在函数中设置一个全局变量</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#99pathlib">99. pathlib 的用法举例</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#100python">100. Python 中的异常处理，写一个简单的应用场景</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#101python">101. Python 中递归的最大次数，那如何突破呢？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#102mro">102. 什么是面向对象的 mro</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#103isinstance">103. isinstance 作用以及应用场景？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#104">104. 什么是断言？应用场景？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#105lambda">105. lambda 表达式格式以及应用场景？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#106">106. 新式类和旧式类的区别</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#107dir">107. dir()是干什么用的？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#108demo1pydemo2pydemo3pyfromtoolsimportdemo1demo3">108. 一个包里有三个模块，demo1.py、demo2.py、demo3.py，但使用 from tools import *导入模块时，如何保证只有 demo1、demo3 被导入了。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#1095python">109. 列举 5 个 Python 中的异常类型以及其含义</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#110copydeepcopy">110. copy 和 deepcopy 的区别是什么？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#111argskwargs">111. 代码中经常遇到的*args, **kwargs 含义及用法。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#112python">112. Python 中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么?</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#113wawb">113. w、a+、wb 文件写入模式的区别</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#114sortsorted">114. 举例 sort 和 sorted 的区别</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#115">115. 什么是负索引？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#116pprint">116. pprint 模块是干什么的？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#117python">117. 解释一下 Python 中的赋值运算符</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#118python">118. 解释一下 Python 中的逻辑运算符</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#119python">119. 讲讲 Python 中的位运算符</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#120python">120. 在 Python 中如何使用多进制数字？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#121">121. 怎样声明多个变量并赋值？</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-10">算法和数据结构</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#122">122. 已知：</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#123python">123. 用 Python 实现一个二分查找的函数</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#124python">124. Python 单例模式的实现方法</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#125python">125. 使用 Python 实现一个斐波那契数列</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#126">126. 找出列表中的重复数字</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#127">127. 找出列表中的单个数字</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#128">128. 写一个冒泡排序</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#129">129. 写一个快速排序</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#130">130. 写一个拓扑排序</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#131python">131. Python 实现一个二进制计算</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#132">132. 有一组“+”和“-”符号，要求将“+”排到左边，“-”排到右边，写出具体的实现方法。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#133">133. 单链表反转</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#134">134. 交叉链表求交点</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#135">135. 用队列实现栈</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#136">136. 找出数据流的中位数</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#137k">137. 二叉搜索树中第 K 小的元素</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-11">爬虫相关</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#138requestsrequestscontentrequeststext">138. 在 requests 模块中，requests.content 和 requests.text 什么区别</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#139lxml">139. 简要写一下 lxml 模块的使用方法框架</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#140scrapy">140. 说一说 scrapy 的工作流程</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#141scrapy">141. scrapy 的去重原理</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#142scrapy">142. scrapy 中间件有几种类，你用过哪些中间件</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#143">143. 你写爬虫的时候都遇到过什么？反爬虫措施，你是怎么解决的？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#144">144. 为什么会用到代理？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#145">145. 代理失效了怎么处理？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#146header">146. 列出你知道 header 的内容以及信息</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#147wwwbaiducom">147. 说一说打开浏览器访问 www.baidu.com 获取到结果，整个流程。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#148">148. 爬取速度过快出现了验证码怎么处理</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#149scrapyscrapyredisredis">149. scrapy 和 scrapy-redis 有什么区别？为什么选择 redis 数据库？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#150">150. 分布式爬虫主要解决什么问题</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#151">151. 写爬虫是用多进程好？还是多线程好？ 为什么？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#152">152. 解析网页的解析器使用最多的是哪几个</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#153ipcookiesession">153. 需要登录的网页，如何解决同时限制 ip，cookie,session（其中有一些是动态生成的）在不使用动态爬取的情况下？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#154">154. 验证码的解决?</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#155mysqlmongodbredis">155. 使用最多的数据库（mysql，mongodb，redis 等），对他的理解？</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-12">网络编程</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#156tcpudp">156. TCP 和 UDP 的区别？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#157">157. 简要介绍三次握手和四次挥手</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#158socket">158. 什么是粘包？ socket 中造成粘包的原因是什么？ 哪些情况会发生粘包现象？</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#-13">并发</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#159concurrentfuture">159. 举例说明 concurrent.future 的中线程池的用法</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#160">160. 说一说多线程，多进程和协程的区别。</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#161gil">161. 简述 GIL</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#162">162. 进程之间如何通信</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#163io">163. IO 多路复用的作用？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#164selectpollepoll">164. select、poll、epoll 模型的区别？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#165">165. 什么是并发和并行？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#16612">166. 一个线程 1 让线程 2 去调用一个函数怎么实现</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#167">167. 解释什么是异步非阻塞？</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#168threadinglocal">168. threading.local 的作用？</a></li>
</ul>
</li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#git">Git 面试题</a><ul>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#169git">169. 说说你知道的 git 命令</a></li>
<li><a href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#170git">170. git 如何查看某次提交修改的内容</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<p></p>
<h3 id="">语言特性</h3>
<h4 id="1python">1. 谈谈对 Python 和其他语言的区别</h4>
<p><strong>答</strong>：Python 是一门语法简洁优美,功能强大无比,应用领域非常广泛,具有强大完备的第三方库，他是一门强类型的可移植、可扩展，可嵌入的解释型编程语言，属于动态语言。</p>
<p>拿 C 语言和 Python 比：
Python 的第三方类库比较齐全并且使用简洁,很少代码就能实现一些功能，如果用 C 去实现相同的功能可能就比较复杂。但是对于速度来说 Python 的运行速度相较于 C 就比较慢了。所以有利的同时也有弊端，毕竟我们的学习成本降低了。</p>
<h4 id="2">2. 简述解释型和编译型编程语言</h4>
<p><strong>答</strong>：解释型语言是在运行程序的时候才翻译，每执行一次，要翻译一次，效率较低。
编译型就是直接编译成机型可以执行的，只翻译一次，所以效率相对来说较高。</p>
<h4 id="3python">3. Python 的解释器种类以及相关特点？</h4>
<p><strong>答</strong>：</p>
<ul>
<li>CPython
c 语言开发的，使用最广的解释器</li>
<li>IPython
基于 cPython 之上的一个交互式计时器，交互方式增强功能和 cPython 一样</li>
<li>PyPy
目标是执行效率，采用 JIT 技术。对 Python 代码进行动态编译，提高执行效率</li>
<li>JPython
运行在 Java 上的解释器，直接把 Python 代码编译成 Java 字节码执行</li>
<li>IronPython
运行在微软 .NET 平台上的解释器，把 Python 编译成 . NET 的字节码。</li>
</ul>
<h4 id="4python3python2">4. Python3 和 Python2 的区别？</h4>
<p><strong>答</strong>： 
这里例举 5 条</p>
<ol>
<li>print 在 Python3 中是函数必须加括号，Python2 中 print 为 class。</li>
<li>Python2 中使用 xrange，Python3 使用 range。</li>
<li>Python2 中默认的字符串类型默认是 ASCII，Python3 中默认的字符串类型是 Unicode。</li>
<li>Python2 中/的结果是整型，Python3 中是浮点类型。</li>
<li>Python2 中声明元类：_<em>metaclass</em>_ = MetaClass,Python3 中声明元类：class newclass(metaclass=MetaClass)：pass。</li>
</ol>
<h4 id="5python3python2intlong">5. Python3 和 Python2 中 int 和 long 区别？</h4>
<p><strong>答</strong>：Python2 有 int 和 long 类型。int 类型最大值不能超过 sys.maxint，而且这个最大值是平台相关的。可以通过在数字的末尾附上一个Ｌ来定义长整型，显然，它比 int 类型表示的数字范围更大。在 Python3 里，只有一种整数类型 int，大多数情况下，和 Python２中的长整型类似。</p>
<h4 id="6xrangerange">6. xrange 和 range 的区别？</h4>
<p><strong>答</strong>：xrange 是在 Python2 中的用法，Python3 中只有 range
xrange 用法与 range 完全相同，所不同的是生成的不是一个 list 对象，而是一个生成器。</p>
<h3 id="-1">编码规范</h3>
<h4 id="7pep8">7. 什么是 PEP8?</h4>
<p><strong>答</strong>：PEP8 通常会听别人提到，但是具体的指什么内容呢，简单介绍下。 
《Python Enhancement Proposal #8》（8 号 Python 增强提案）又叫 PEP8，他针对的 Python 代码格式而编订的风格指南。</p>
<h4 id="8python">8. 了解 Python 之禅么？</h4>
<p><strong>答</strong>：通过 import this 语句可以获取其具体的内容。它告诉大家如何写出高效整洁的代码。</p>
<h4 id="9docstrings">9. 了解 DocStrings 么？</h4>
<p><strong>答</strong>：DocStrings 文档字符串是一个重要工具，用于解释文档程序，帮助你的程序文档更加简单易懂。主要是解释代码作用的。</p>
<h4 id="10">10. 了解类型注解么？</h4>
<p><strong>答</strong>：PEP 484 引入了类型提示，这使得可以对 Python 代码进行静态类型检查。
在使用 Ide 的时候可以获取到参数的类型，更方便传入参数。使用格式如下</p>
<pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span><span class="hljs-params">(num： int)</span></span> -&gt; None：
    print(f<span class="hljs-string">"接收到的数字是：{num}"</span>)
</code></pre>
<p>介绍下这个简单例子，我们可以在函数的参数部分使用参数名+：+类型，来指定参数可以接受的类型，这里的话就是 num 参数为 int 类型，然后后面-&gt;接的是返回值的类型。这里返回值为 None，然后通过 fstring 格式化字符串输出传入的数字。</p>
<h4 id="11python">11. 例举你知道 Python 对象的命名规范，例如方法或者类等</h4>
<p><strong>答</strong>：</p>
<p>类：总是使用首字母大写单词串，如 MyClass。内部类可以使用额外的前导下划线。
变量：小写，由下划线连接各个单词。方法名类似
常量：常量名所有字母大写
等</p>
<h4 id="12python">12. Python 中的注释有几种？</h4>
<p><strong>答</strong>：总体来说分为两种，单行注释和多行注释。</p>
<ol>
<li>单行注释在行首是 <code>#</code>。</li>
<li>多行注释可以使用三个单引号或三个双引号，包括要注释的内容。</li>
</ol>
<h4 id="13">13. 如何优雅的给一个函数加注释？</h4>
<p><strong>答</strong>：可以使用 docstring 配合类型注解</p>
<h4 id="14">14. 如何给变量加注释？</h4>
<p><strong>答</strong>：可以通过变量名：类型的方式如下</p>
<pre><code class="hljs apache"><span class="hljs-attribute">a</span>： str = <span class="hljs-string">"this is string type"</span>
</code></pre>
<h4 id="15pythontab">15. Python 代码缩进中是否支持 Tab 键和空格混用。</h4>
<p><strong>答</strong>：不允许 tab 键和空格键混用，这种现象在使用 sublime 的时候尤为明显。</p>
<p>一般推荐使用 4 个空格替代 tab 键。</p>
<h4 id="16import">16. 是否可以在一句 import 中导入多个库?</h4>
<p><strong>答</strong>：可以是可以，但是不推荐。因为一次导入多个模块可读性不是很好，所以一行导入一个模块会比较好。同样的尽量少用 from modulename import *，因为判断某个函数或者属性的来源有些困难，不方便调试，可读性也降低了。</p>
<h4 id="17py">17. 在给 Py 文件命名的时候需要注意什么?</h4>
<p><strong>答</strong>：给文件命名的时候不要和标准库库的一些模块重复，比如 abc。
另外要名字要有意义，不建议数字开头或者中文命名。</p>
<h4 id="18python">18. 例举几个规范 Python 代码风格的工具</h4>
<p><strong>答</strong>：pylint 和 flake8</p>
<h3 id="-2">数据类型-字符串</h3>
<h4 id="19python">19. 列举 Python 中的基本数据类型？</h4>
<p><strong>答</strong>：
Python3 中有六个标准的数据类型：字符串（String）、数字（Digit）、列表（List）、元组（Tuple）、集合（Sets）、字典（Dictionary）。</p>
<h4 id="20">20. 如何区别可变数据类型和不可变数据类型</h4>
<p><strong>答</strong>：
从对象内存地址方向来说</p>
<ol>
<li>可变数据类型：在内存地址不变的情况下，值可改变（列表和字典是可变类型，但是字典中的 key 值必须是不可变类型）</li>
<li>不可变数据类型：内存改变，值也跟着改变。（数字，字符串，布尔类型，都是不可变类型）可以通过 id() 方法进行内存地址的检测。</li>
</ol>
<h4 id="21helloworldhelloworld">21. 将"hello world"转换为首字母大写"Hello World"</h4>
<p><strong>答</strong>：
这个得看清题目是要求两个单词首字母都要大写，如果只是第一个单词首字母大小的话，只使用 capitalize 即可，但是这里是两个单词，所以用下面的方法。</p>
<pre><code class="hljs makefile">arr = <span class="hljs-string">"hello world"</span>.split(<span class="hljs-string">" "</span>)
new_str = f<span class="hljs-string">"{arr[0].capitalize()} {arr[1].capitalize()}"</span>
print(new_str)
</code></pre>
<p>后来评论中有朋友提到了下面的方法，这里感谢这位朋友提醒。方案如下</p>
<pre><code class="hljs bash"><span class="hljs-string">"hello world"</span>.title()
</code></pre>
<p>非常简单一句话搞定。</p>
<h4 id="22">22. 如何检测字符串中只含有数字?</h4>
<p><strong>答</strong>：可以通过 isdigit 方法，例子如下</p>
<pre><code class="hljs makefile">s1 = <span class="hljs-string">"12223"</span>.isdigit()
print(s1)

s2 = <span class="hljs-string">"12223a"</span>.isdigit()
print(s2)

<span class="hljs-comment">#结果如下：</span>
<span class="hljs-comment">#True</span>
<span class="hljs-comment">#False</span>
</code></pre>
<h4 id="23ilovechina">23. 将字符串"ilovechina"进行反转</h4>
<p><strong>答</strong>：</p>
<pre><code class="hljs makefile">s1 = <span class="hljs-string">"ilovechina"</span>[：：-1]
print(s1)
</code></pre>
<h4 id="24python">24. Python 中的字符串格式化方式你知道哪些？</h4>
<p><strong>答</strong>：%s，format，fstring(Python3.6 开始才支持，现在推荐的写法)</p>
<h4 id="25adabdw">25. 有一个字符串开头和末尾都有空格，比如“ adabdw ”，要求写一个函数把这个字符串的前后空格都去掉。</h4>
<p><strong>答</strong>：因为题目要是写一个函数所以我们不能直接使用 strip，不过我们可以把它封装到函数啊</p>
<pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strip_function</span><span class="hljs-params">(s1)</span></span>：
    <span class="hljs-keyword">return</span> s1.strip()

s1 = <span class="hljs-string">" adabdw "</span>
print(strip_function(s1))
</code></pre>
<h4 id="26123456">26. 获取字符串”123456“最后的两个字符。</h4>
<p><strong>答</strong>：切片使用的考察，最后两个即开始索引是 -2，代码如下</p>
<pre><code class="hljs makefile">a = <span class="hljs-string">"123456"</span>
print(a[-2：：])
</code></pre>
<h4 id="27gbksutf8">27. 一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作？</h4>
<p><strong>答</strong>：</p>
<pre><code class="hljs bash">a= <span class="hljs-string">"S"</span>.encode(<span class="hljs-string">"gbk"</span>).decode(<span class="hljs-string">"utf-8"</span>,<span class="hljs-string">'ignore'</span>)
<span class="hljs-built_in">print</span>(a)
</code></pre>
<h4 id="281sinfoxiaozhang33shandonginfoxiaozhang33shandong2a">28. （1）s="info：xiaoZhang 33 shandong"，用正则切分字符串输出['info', 'xiaoZhang', '33', 'shandong']。（2）a = "你好     中国  "，去除多余空格只留一个空格。</h4>
<p><strong>答</strong>：</p>
<p>（1）我们需要根据冒号或者空格切分</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> re

s = <span class="hljs-string">"info：xiaoZhang 33 shandong"</span>
res = re.split(<span class="hljs-string">r"：| "</span>, s)
print(res)
</code></pre>
<p>（2）</p>
<pre><code class="hljs makefile">s = <span class="hljs-string">"你好     中国  "</span>
print(<span class="hljs-string">" "</span>.join(s.split()))
</code></pre>
<h4 id="2912">29. (1) 怎样将字符串转换为小写。 (2) 单引号、双引号、三引号的区别？</h4>
<p><strong>答</strong>：
(1) 使用字符串的 lower() 方法。</p>
<p>(2)单独使用单引号和双引号没什么区别，但是如果引号里面还需要使用引号的时候，就需要这两个配合使用了，然后说三引号，同样的三引号也分为三单引号和三双引号，两个都可以声名长的字符串时候使用，如果使用 docstring 就需要使用三双引号。</p>
<h3 id="-3">数据类型 - 列表</h3>
<h4 id="30alist12312alist">30. 已知 AList = [1,2,3,1,2]，对 AList 列表元素去重，写出具体过程。</h4>
<p><strong>答</strong>：</p>
<pre><code class="hljs cpp"><span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(AList))
</code></pre>
<h4 id="31123123">31. 如何实现 "1,2,3" 变成 ["1","2","3"]</h4>
<p><strong>答</strong>：</p>
<pre><code class="hljs makefile">s = <span class="hljs-string">"1,2,3"</span>
print(s.split(<span class="hljs-string">","</span>))
</code></pre>
<h4 id="32listab">32. 给定两个 list，A 和 B，找出相同元素和不同元素</h4>
<p><strong>答</strong>：</p>
<pre><code class="hljs bash">A、B 中相同元素：<span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(A)&amp;<span class="hljs-built_in">set</span>(B)) 
A、B 中不同元素：<span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(A)^<span class="hljs-built_in">set</span>(B))
</code></pre>
<h4 id="33123456123456">33. [[1,2],[3,4],[5,6]] 一行代码展开该列表，得出 [1,2,3,4,5,6]</h4>
<p><strong>答</strong>：</p>
<pre><code class="hljs bash">l = [[1,2],[3,4],[5,6]]
x=[j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i]  
<span class="hljs-built_in">print</span>(x)
</code></pre>
<h4 id="3415792268">34. 合并列表 [1,5,7,9] 和 [2,2,6,8]</h4>
<p><strong>答</strong>：使用 extend 和 + 都可以。</p>
<pre><code class="hljs makefile">a = [1,5,7,9]
b = [2,2,6,8]
a.extend(b)
print(a)
</code></pre>
<h4 id="35">35. 如何打乱一个列表的元素？</h4>
<p><strong>答</strong>：</p>
<pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> random

a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]
random.shuffle(a)
<span class="hljs-built_in">print</span>(a)
</code></pre>
<h3 id="-4">数据类型 - 字典</h3>
<h4 id="36delpop">36. 字典操作中 del 和 pop 有什么区别</h4>
<p><strong>答</strong>：del 可以根据索引（元素所在位置）来删除的，没有返回值。
pop 可以根据索引弹出一个值，然后可以接收它的返回值。</p>
<h4 id="37">37. 按照字典的内的年龄排序</h4>
<pre><code class="hljs bash">d1 = [
    {<span class="hljs-string">'name'</span>：<span class="hljs-string">'alice'</span>, <span class="hljs-string">'age'</span>：38},
    {<span class="hljs-string">'name'</span>：<span class="hljs-string">'bob'</span>, <span class="hljs-string">'age'</span>：18},
    {<span class="hljs-string">'name'</span>：<span class="hljs-string">'Carl'</span>, <span class="hljs-string">'age'</span>：28},
]
</code></pre>
<p><strong>答</strong>：</p>
<pre><code class="hljs python">d1 = [
    {<span class="hljs-string">'name'</span>： <span class="hljs-string">'alice'</span>, <span class="hljs-string">'age'</span>： <span class="hljs-number">38</span>},
    {<span class="hljs-string">'name'</span>： <span class="hljs-string">'bob'</span>, <span class="hljs-string">'age'</span>： <span class="hljs-number">18</span>},
    {<span class="hljs-string">'name'</span>： <span class="hljs-string">'Carl'</span>, <span class="hljs-string">'age'</span>： <span class="hljs-number">28</span>},
]

print(sorted(d1, key=<span class="hljs-keyword">lambda</span> x：x[<span class="hljs-string">"age"</span>]))
</code></pre>
<h4 id="38aa1b2bc3d4">38. 请合并下面两个字典 a = {"A"：1,"B"：2},b = {"C"：3,"D"：4}</h4>
<p><strong>答</strong>：
合并字典方法很多，可以使用 a.update(b) 或者下面字典解包的方式</p>
<pre><code class="hljs makefile">a = {<span class="hljs-string">"A"</span>：1,<span class="hljs-string">"B"</span>：2}
b = {<span class="hljs-string">"C"</span>：3,<span class="hljs-string">"D"</span>：4}
print({**a,**b})
</code></pre>
<h4 id="39">39. 如何使用生成式的方式生成一个字典，写一段功能代码。</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs bash"><span class="hljs-comment"># 需求 3： 把字典的 key 和 value 值调换；</span>
d = {<span class="hljs-string">'a'</span>：<span class="hljs-string">'1'</span>, <span class="hljs-string">'b'</span>：<span class="hljs-string">'2'</span>}

<span class="hljs-built_in">print</span>({v：k <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> d.items()})
</code></pre>
<h4 id="40ab12a1b2">40. 如何把元组 ("a","b") 和元组 (1,2)，变为字典 {"a"：1,"b"：2}</h4>
<p><strong>答</strong>
zip 的使用，但是最后记得把 zip 对象再转换为字典。</p>
<pre><code class="hljs makefile">a = (<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>)
b = (1, 2)
print(dict(zip(a, b)))
</code></pre>
<h3 id="-5">数据类型 - 综合</h3>
<h4 id="41">41. 下列字典对象键类型不正确的是？</h4>
<pre><code class="hljs apache"><span class="hljs-attribute">A</span>：{1：0,2：0,3：0}
<span class="hljs-attribute">B</span>：{<span class="hljs-string">"a"</span>：0, <span class="hljs-string">"b"</span>：0, <span class="hljs-string">"c"</span>：0}
<span class="hljs-attribute">C</span>： {(1,2)：0, (2,3)：0}
<span class="hljs-attribute">D</span>： {[1,2]：0,<span class="hljs-meta"> [2,3]：0}
</span></code></pre>
<p><strong>答：</strong>D
因为只有可 hash 的对象才能做字典的键，列表是可变类型不是可 hash 对象，所以不能用列表做为字典的键。</p>
<h4 id="42a1b2">42. 如何交换字典 {"A"：1,"B"：2}的键和值</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs ini"><span class="hljs-attr">s</span> =  {<span class="hljs-string">"A"</span>：<span class="hljs-number">1</span>,<span class="hljs-string">"B"</span>：<span class="hljs-number">2</span>}

<span class="hljs-comment">#方法一：</span>
<span class="hljs-attr">dict_new</span> = {value:key for key，value in s.items()}

<span class="hljs-comment"># 方法二：</span>
<span class="hljs-attr">new_s</span>= dict(zip(s.values()，s.keys()))
</code></pre>
<h4 id="43pythontuplelist">43. Python 里面如何实现 tuple 和 list 的转换？</h4>
<p><strong>答：</strong>
Python 中的类型转换，一般通过类型强转即可完成
tuple 转 list 是 list() 方法
list 转 tuple 使用 tuple() 方法</p>
<h4 id="44">44. 我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？</h4>
<p><strong>答：</strong>
这个题目考察了 Python 标准库的 itertools 模快的掌握情况，该模块提供了操作生成器的一些方法。 对于生成器类型我们使用 islice 方法来实现切片的功能。例子如下</p>
<pre><code class="hljs coffeescript"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> islice
gen = iter(range(<span class="hljs-number">10</span>)) <span class="hljs-comment">#iter()函数用来生成迭代器</span>
<span class="hljs-comment">#第一个参数是迭代器，第二个参数起始索引，第三个参数结束索引，不支持负数索引</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> islice(gen,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>)： 
    <span class="hljs-built_in">print</span>(i)
</code></pre>
<h4 id="45iforiinrange3">45. 请将 [i for i in range(3)] 改成生成器</h4>
<p><strong>答：</strong>通过把列表生产式的中括号，改为小括号我们就实现了生产器的功能即，</p>
<pre><code class="hljs bash">(i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(3))
</code></pre>
<h4 id="46ahellobbytes">46. a="hello" 和 b="你好" 编码成 bytes 类型</h4>
<p><strong>答：</strong>
这个题目一共三种方式，第一种是在字符串的前面加一个 b，第二种可以使用 bytes 方法，第三种使用字符串 encode 方法。具体代码如下，abc 代表三种情况</p>
<pre><code class="hljs makefile">a = b<span class="hljs-string">"hello"</span>
b = bytes(<span class="hljs-string">"你好"</span>, <span class="hljs-string">"utf-8"</span>)
c = <span class="hljs-string">"你好"</span>.encode(<span class="hljs-string">"utf-8"</span>)
print(a, b, c)
</code></pre>
<h4 id="47">47. 下面的代码输出结果是什么？</h4>
<pre><code class="hljs ini"><span class="hljs-attr">a</span> = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>],<span class="hljs-number">8</span>)
<span class="hljs-attr">a[2]</span> = <span class="hljs-number">2</span>
</code></pre>
<p><strong>答：</strong>
我们知道元组里的元素是不能改变的所以这个题目的答案是出现异常。</p>
<h4 id="48">48. 下面的代码输出的结果是什么?</h4>
<pre><code class="hljs markdown">a = (1,2,3,[4,5,6,7],8)
a[<span class="hljs-string">3</span>][<span class="hljs-symbol">0</span>] = 2
</code></pre>
<p><strong>答：</strong>前面我说了元组的里元素是不能改变的，这句话严格来说是不准确的，如果元组里面元素本身就是可变类型，比如列表，那么在操作这个元素里的对象时，其内存地址也是不变的。a[3] 对应的元素是列表，然后对列表第一个元素赋值，所以最后的结果是：
(1,2,3,[2,5,6,7],8)</p>
<h3 id="-6">操作类题目</h3>
<h4 id="49python">49. Python 交换两个变量的值</h4>
<p><strong>答：</strong>在 Python 中交换两个对象的值通过下面的方式即可</p>
<pre><code class="hljs nginx"><span class="hljs-attribute">a</span> , b = b ,a 
</code></pre>
<p>但是需要强调的是这并不是元组解包，通过 dis 模块可以发现，这是交换操作的字节码是 ROT_TWO，意思是在栈的顶端做两个值的互换操作。</p>
<h4 id="50readreadlinereadlines">50. 在读文件操作的时候会使用 read、readline 或者 readlines，简述它们各自的作用</h4>
<p><strong>答：</strong>.read() 每次读取整个文件，它通常用于将文件内容放到一个字符串变量中。如果希望一行一行的输出那么就可以使用 readline()，该方法会把文件的内容加载到内存，所以对于对于大文件的读取操作来说非常的消耗内存资源，此时就可以通过 readlines 方法，将文件的句柄生成一个生产器，然后去读就可以了。</p>
<h4 id="51jsondatetime">51. json 序列化时，可以处理的数据类型有哪些？如何定制支持 datetime 类型？</h4>
<p><strong>答：</strong> 可以处理的数据类型是 str、int、list、tuple、dict、bool、None,
因为 datetime 类不支持 json 序列化，所以我们对它进行拓展。</p>
<pre><code class="hljs coffeescript"><span class="hljs-comment"># 自定义时间序列化</span>
<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime, date

<span class="hljs-comment"># JSONEncoder 不知道怎么去把这个数据转换成 json 字符串的时候</span>
<span class="hljs-comment"># ，它就会去调 default()函数,所以都是重写这个函数来处理它本身不支持的数据类型，</span>
<span class="hljs-comment"># default()函数默#认是直接抛异常的。</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateToJson</span>(<span class="hljs-title">json</span>.<span class="hljs-title">JSONEncoder</span>)：</span>
    def <span class="hljs-keyword">default</span>(self, obj)：
        <span class="hljs-keyword">if</span> isinstance(obj, datetime)：
            <span class="hljs-keyword">return</span> obj.strftime(<span class="hljs-string">'%Y-%m-%d %H：%M：%S'</span>)
        elif isinstance(obj, date)：
            <span class="hljs-keyword">return</span> obj.strftime(<span class="hljs-string">'%Y-%m-%d'</span>)
        <span class="hljs-keyword">else</span>：
            <span class="hljs-keyword">return</span> json.JSONEncoder.<span class="hljs-keyword">default</span>(self, obj)


d = {<span class="hljs-string">'name'</span>： <span class="hljs-string">'cxa'</span>, <span class="hljs-string">'data'</span>： datetime.now()}
<span class="hljs-built_in">print</span>(json.dumps(d, cls=DateToJson))
</code></pre>
<h4 id="52jsonunicode">52. json 序列化时，默认遇到中文会转换成 unicode，如果想要保留中文怎么办？</h4>
<p><strong>答：</strong>可以通过 json.dumps 的 ensure_ascii 参数解决，代码示例如下：</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> json
a=json.dumps({<span class="hljs-string">"name"</span>：<span class="hljs-string">"张三"</span>},ensure_ascii=<span class="hljs-keyword">False</span>)
print(a)
</code></pre>
<h4 id="53abc">53. 有两个磁盘文件 A 和 B，各存放一行字母，要求把这两个文件中的信息合并(按字母顺序排列)，输出到一个新文件 C 中。</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs python"><span class="hljs-comment">#文件 A.txt 内容为 ASDCF</span>
<span class="hljs-comment">#文件 B.txt 内容为 EFGGTG</span>
<span class="hljs-keyword">with</span> open(<span class="hljs-string">"A.txt"</span>) <span class="hljs-keyword">as</span> f1：
    f1_txt = f1.readline()
<span class="hljs-keyword">with</span> open(<span class="hljs-string">"B.txt"</span>) <span class="hljs-keyword">as</span> f2：
    f2_txt = f2.readline()
f3_txt = f1_txt + f2_txt

f3_list = sorted(f3_txt)

<span class="hljs-keyword">with</span> open(<span class="hljs-string">"C.txt"</span>, <span class="hljs-string">"a+"</span>) <span class="hljs-keyword">as</span> f：
     f.write(<span class="hljs-string">""</span>.join(f3_list))
</code></pre>
<p>输出的文件 C 的内容为 ACDEFFGGGST</p>
<h4 id="5420190530nn220190601">54. 如果当前的日期为 20190530，要求写一个函数输出 N 天后的日期，(比如 N 为 2，则输出 20190601)。</h4>
<p><strong>答：</strong>这个题目考察的是 datetime 里的 timedelta 方法的使用，参数可选、默认值都为 0：datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0) 通过这个参数可以指定不同的日期类型进行加减操作，这里我们需要改的是 days，代码如下</p>
<pre><code class="hljs perl">import datetime


def datetime_operate(n： <span class="hljs-keyword">int</span>)：
    now = datetime.datetime.now()  <span class="hljs-comment"># 获取当前时间</span>
    _new_date = now + datetime.timedelta(days=n)  <span class="hljs-comment"># 获取指定天数后的新日期</span>
    new_date = _new_date.strftime(<span class="hljs-string">"%Y%m%d"</span>)  <span class="hljs-comment"># 转换为指定的输出格式</span>
    <span class="hljs-keyword">return</span> new_date


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    <span class="hljs-keyword">print</span>(datetime_operate(<span class="hljs-number">4</span>))
</code></pre>
<h4 id="55nn">55. 写一个函数，接收整数参数 n，返回一个函数，函数的功能是把函数的参数和 n 相乘并把结果返回。</h4>
<p><strong>答：</strong>这个题目考查了闭包的使用代码示例如下，返回函数之类型是函数对象。</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mul_operate</span><span class="hljs-params">(num)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">g</span><span class="hljs-params">(val)</span>:</span>
        <span class="hljs-keyword">return</span> num * val

    <span class="hljs-keyword">return</span> g


m = mul_operate(<span class="hljs-number">8</span>)
print(m(<span class="hljs-number">5</span>))
</code></pre>
<h4 id="56">56. 下面代码会存在什么问题，如何改进？</h4>
<pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strappend</span><span class="hljs-params">(num)</span></span>：
    str=<span class="hljs-string">'first'</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num)：
        str+=str(i)
    <span class="hljs-keyword">return</span> str
</code></pre>
<p><strong>答：</strong>
首先不应该使用 Python 的内置类似 str 作为变量名这里我把它改为了 s,另外在Python,str 是个不可变对象，每次迭代都会生成新的存储空间，num 越大，创建的 str 对象就会越多，内存消耗越大。使用 yield 改成生成器即可,
还有一点就是命名规范的位置，函数名改为_分割比较好，完整的代码如下:</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_append</span><span class="hljs-params">(num)</span>:</span>
    s = <span class="hljs-string">'first'</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num):
        s += str(i)
        <span class="hljs-keyword">yield</span> s

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str_append(<span class="hljs-number">3</span>):
        print(i)
</code></pre>
<h4 id="571100">57. 一行代码输出 1-100 之间的所有偶数。</h4>
<p><strong>答：</strong>可以通过列表生成式，然后使用与操作如果如 1 与之后结果为 0 则表明为偶数，等于 1 则为奇数。</p>
<pre><code class="hljs bash"><span class="hljs-comment"># 方法1</span>
<span class="hljs-built_in">print</span>([i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1, 101) <span class="hljs-keyword">if</span> i &amp; 0x1 == 0])
<span class="hljs-comment"># 方法2：测试发现方法二效率更高</span>
<span class="hljs-built_in">print</span>(list(range(2, 101, 2)))
</code></pre>
<h4 id="58with">58. with 语句的作用，写一段代码？</h4>
<p>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭、线程中锁的自动获取和释放等。</p>
<p>其他的内容看下面我之前写的代码。</p>
<pre><code class="hljs ruby"><span class="hljs-comment">#一般访问文件资源时我们会这样处理：</span>

f = open(
    <span class="hljs-string">'c：\test.txt'</span>, <span class="hljs-string">'r'</span>)
data = f.read()
f.close()
<span class="hljs-comment"># 这样写没有错，但是容易犯两个毛病：</span>
<span class="hljs-comment"># 1. 如果在读写时出现异常而忘了异常处理。</span>
<span class="hljs-comment"># 2. 忘了关闭文件句柄</span>

<span class="hljs-comment">#以下的加强版本的写法：</span>

f = open(<span class="hljs-string">'c：\test.txt'</span>, <span class="hljs-string">'r'</span>)
try：
    data = f.read()
finally：
    f.close()

<span class="hljs-comment">#以上的写法就可以避免因读取文件时异常的发生而没有关闭问题的处理了。代码长了一些。</span>
<span class="hljs-comment">#但使用 with 有更优雅的写法：</span>

with open(r<span class="hljs-string">'c：\test.txt'</span>, <span class="hljs-string">'r'</span>) as f：
    data = f.read()
<span class="hljs-comment">#with 的实现</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        print(<span class="hljs-string">'__enter__() is call!'</span>)
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dosomething</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        print(<span class="hljs-string">'dosomethong!'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, exc_type, exc_value, traceback)</span></span>：
        print(<span class="hljs-string">'__exit__() is call!'</span>)
        print(f<span class="hljs-string">'type：{exc_type}'</span>)
        print(f<span class="hljs-string">'value：{exc_value}'</span>)
        print(f<span class="hljs-string">'trace：{traceback}'</span>)
        print(<span class="hljs-string">'__exit()__ is call!'</span>)

with Test() as sample：
      pass

<span class="hljs-comment">#当对象被实例化时，就会主动调用__enter__()方法，任务执行完成后就会调用__exit__()方法，</span>
<span class="hljs-comment">#另外，注意到，__exit__()方法是带有三个参数的(exc_type, exc_value, traceback),</span>
<span class="hljs-comment">#依据上面的官方说明：如果上下文运行时没有异常发生，那么三个参数都将置为 None, </span>
<span class="hljs-comment">#这里三个参数由于没有发生异常，的确是置为了 None, 与预期一致.</span>

<span class="hljs-comment"># 修改后不出异常了</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        print(<span class="hljs-string">'__enter__() is call!'</span>)
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dosomething</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        x = <span class="hljs-number">1</span>/<span class="hljs-number">0</span>
        print(<span class="hljs-string">'dosomethong!'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, exc_type, exc_value, traceback)</span></span>：
        print(<span class="hljs-string">'__exit__() is call!'</span>)
        print(f<span class="hljs-string">'type：{exc_type}'</span>)
        print(f<span class="hljs-string">'value：{exc_value}'</span>)
        print(f<span class="hljs-string">'trace：{traceback}'</span>)
        print(<span class="hljs-string">'__exit()__ is call!'</span>)
        <span class="hljs-keyword">return</span> True


with Test() as sample：
</code></pre>
<h4 id="59pythonjson">59. Python 字典和 json 字符串相互转化方法</h4>
<p><strong>答:</strong></p>
<p>在 Python 中使用 dumps 方法 将 dict 对象转为 Json 对象，使用 loads 方法可以将 Json 对象转为 dict 对象。</p>
<pre><code class="hljs bash">dic = {<span class="hljs-string">'a'</span>: 123, <span class="hljs-string">'b'</span>: <span class="hljs-string">"456"</span>, <span class="hljs-string">'c'</span>: <span class="hljs-string">"liming"</span>}
json_str = json.dumps(dic)
dic2 = json.loads(json_str)
<span class="hljs-built_in">print</span>(dic2)
打印：
<span class="hljs-string">'{"a": 123, "b": "456", "c": "liming"}'</span>
{<span class="hljs-string">'a'</span>: 123, <span class="hljs-string">'b'</span>: <span class="hljs-string">'456'</span>, <span class="hljs-string">'c'</span>: <span class="hljs-string">'liming'</span>}
</code></pre>
<p>我们再来看一个特殊的例子</p>
<pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> json
dic = {<span class="hljs-string">'a'</span>： <span class="hljs-number">123</span>, <span class="hljs-string">'b'</span>： <span class="hljs-string">"456"</span>, <span class="hljs-string">'c'</span>： <span class="hljs-string">"liming"</span>}
dic_str = json.loads(str(dic).replace(<span class="hljs-string">"'"</span>, <span class="hljs-string">"\""</span>))
<span class="hljs-built_in">print</span>(dic_str)
</code></pre>
<p>下面我解释下上面代码是测试什么:</p>
<pre><code class="hljs cs">首先 json.loads(jsonstr) 这里面的参数只能是 jsonstr 格式的字符串.
当我们使用 str 将字典 dic 转化为字符串以后，得到的结果为:<span class="hljs-string">"{'a': 123, 'b': '456', 'c': 'liming'}"</span>。
如果直接使用 json.loads(str(dic)) 你会发现出现错误，原因就是，单引号的字符串不符合Json的标准格式所以再次使用了 replace(<span class="hljs-string">"'"</span>, <span class="hljs-string">"\""</span>)。得到字典
其实这个例子主要目的是告诉大家 Json 的标准格式是不支持单引号型字符串的，否则会出现以下错误。
json.decoder.JSONDecodeError: Expecting property name enclosed <span class="hljs-keyword">in</span> <span class="hljs-keyword">double</span> quotes: line <span class="hljs-number">1</span> column <span class="hljs-number">2</span> (<span class="hljs-keyword">char</span> <span class="hljs-number">1</span>)
</code></pre>
<h4 id="60python">60. 请写一个 Python 逻辑，计算一个文件中的大写字母数量</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs python"><span class="hljs-keyword">with</span> open(<span class="hljs-string">'A.txt'</span>) <span class="hljs-keyword">as</span> fs：
    count = <span class="hljs-number">0</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fs.read()：
        <span class="hljs-keyword">if</span> i.isupper()：
            count += <span class="hljs-number">1</span>
print(count)
</code></pre>
<h4 id="61pythonmongo">61. 请写一段 Python连接Mongo数据库，然后的查询代码。</h4>
<p><strong>答</strong>:</p>
<pre><code class="hljs ruby"><span class="hljs-comment"># -*- coding: utf-8 -*-</span>
<span class="hljs-comment"># <span class="hljs-doctag">@Author</span> : 陈祥安</span>
import pymongo
db_configs = {
    <span class="hljs-string">'type'</span>: <span class="hljs-string">'mongo'</span>,
    <span class="hljs-string">'host'</span>: <span class="hljs-string">'地址'</span>,
    <span class="hljs-string">'port'</span>: <span class="hljs-string">'端口'</span>,
    <span class="hljs-string">'user'</span>: <span class="hljs-string">'spider_data'</span>,
    <span class="hljs-string">'passwd'</span>: <span class="hljs-string">'密码'</span>,
    <span class="hljs-string">'db_name'</span>: <span class="hljs-string">'spider_data'</span>
}


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mongo</span>():</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, db=db_configs[<span class="hljs-string">"db_name"</span>], username=db_configs[<span class="hljs-string">"user"</span>],
                 password=db_configs[<span class="hljs-string">"passwd"</span>])</span></span>:
        <span class="hljs-keyword">self</span>.client = pymongo.MongoClient(f<span class="hljs-string">'mongodb://{db_configs["host"]}:db_configs["port"]'</span>)
        <span class="hljs-keyword">self</span>.username = username
        <span class="hljs-keyword">self</span>.password = password
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.username <span class="hljs-keyword">and</span> <span class="hljs-keyword">self</span>.<span class="hljs-symbol">password:</span>
            <span class="hljs-keyword">self</span>.db1 = <span class="hljs-keyword">self</span>.client[db].authenticate(<span class="hljs-keyword">self</span>.username, <span class="hljs-keyword">self</span>.password)
        <span class="hljs-keyword">self</span>.db1 = <span class="hljs-keyword">self</span>.client[db]

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_data</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>:
        <span class="hljs-comment"># 获取状态为0的数据</span>
        data = <span class="hljs-keyword">self</span>.db1.test.find({<span class="hljs-string">"status"</span>: <span class="hljs-number">0</span>})
        gen = (item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data)
        <span class="hljs-keyword">return</span> gen

<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>:
    m = Mongo()
    print(m.find_data())
</code></pre>
<h4 id="62redis">62.说一说Redis的基本类型</h4>
<p><strong>答</strong>:
Redis 支持五种数据类型： string（字符串） 、 hash（哈希）、list（列表） 、 set（集合） 及 zset(sorted set： 有序集合)。</p>
<h4 id="63pythonredis">63. 请写一段 Python连接Redis数据库的代码。</h4>
<p><strong>答</strong>:</p>
<pre><code class="hljs makefile">from redis import StrictRedis, ConnectionPool
redis_url=<span class="hljs-string">"redis://:xxxx@112.27.10.168:6379/15"</span>
pool = ConnectionPool.from_url(redis_url, decode_responses=True)
r= StrictRedis(connection_pool=pool)
</code></pre>
<h4 id="64pythonmysql">64. 请写一段 Python连接Mysql数据库的代码。</h4>
<p><strong>答</strong>:</p>
<pre><code class="hljs makefile">conn = pymysql.connect(host='localhost', 
port=3306, user='root', 
passwd='1234', db='user', charset='utf8mb4')<span class="hljs-comment">#声明mysql连接对象</span>
cursor=conn.cursor(cursor=pymysql.cursors.DictCursor)<span class="hljs-comment">#查询结果以字典的形式</span>
cursor.execute(sql语句字符串)<span class="hljs-comment">#执行sql语句</span>
conn.close()<span class="hljs-comment">#关闭链接</span>
</code></pre>
<h4 id="65redis">65.了解Redis的事务么</h4>
<p><strong>答</strong>:
简单理解，可以认为 redis 事务是一些列 redis 命令的集合，并且有如下两个特点：
1.事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。
2.事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。
一般来说，事务有四个性质称为ACID，分别是原子性，一致性，隔离性和持久性。
一个事务从开始到执行会经历以下三个阶段：</p>
<ul>
<li>开始事务</li>
<li>命令入队</li>
<li>执行事务
代码示例:</li>
</ul>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> redis
<span class="hljs-keyword">import</span> sys
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">()</span>:</span>   
    <span class="hljs-keyword">try</span>:
        conn=redis.StrictRedis(<span class="hljs-string">'192.168.80.41'</span>)
       <span class="hljs-comment"># Python中redis事务是通过pipeline的封装实现的</span>
        pipe=conn.pipeline()
        pipe.sadd(<span class="hljs-string">'s001'</span>,<span class="hljs-string">'a'</span>)
        sys.exit()
        <span class="hljs-comment">#在事务还没有提交前退出，所以事务不会被执行。</span>
        pipe.sadd(<span class="hljs-string">'s001'</span>,<span class="hljs-string">'b'</span>)
        pipe.execute()
        <span class="hljs-keyword">pass</span>
    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> err:
        print(err)
        <span class="hljs-keyword">pass</span>
<span class="hljs-keyword">if</span> __name__==<span class="hljs-string">"__main__"</span>:
      run()
</code></pre>
<h4 id="66">66.了解数据库的三范式么？</h4>
<p><strong>答:</strong>
经过研究和对使用中问题的总结，对于设计数据库提出了一些规范，这些规范被称为范式
一般需要遵守下面3范式即可:
第一范式（1NF）：强调的是列的原子性，即列不能够再分成其他几列。
第二范式（2NF）：首先是 1NF，另外包含两部分内容，一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。
第三范式（3NF）：首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。</p>
<h4 id="67">67.了解分布式锁么</h4>
<p><strong>答</strong>:
分布式锁是控制分布式系统之间的同步访问共享资源的一种方式。
对于分布式锁的目标，我们必须首先明确三点：</p>
<ul>
<li>任何一个时间点必须只能够有一个客户端拥有锁。</li>
<li>不能够有死锁，也就是最终客户端都能够获得锁，尽管可能会经历失败。</li>
<li>错误容忍性要好，只要有大部分的Redis实例存活，客户端就应该能够获得锁。
分布式锁的条件
互斥性：分布式锁需要保证在不同节点的不同线程的互斥
可重入性：同一个节点上的同一个线程如果获取了锁之后，能够再次获取这个锁。
锁超时：支持超时释放锁，防止死锁
高效，高可用：加锁和解锁需要高效，同时也需要保证高可用防止分布式锁失效，可以增加降级。
支持阻塞和非阻塞：可以实现超时获取失败，tryLock(long timeOut)
支持公平锁和非公平锁</li>
</ul>
<p>分布式锁的实现方案
1、数据库实现（乐观锁）
2、基于zookeeper的实现
3、基于Redis的实现（推荐）</p>
<h4 id="68pythonreids">68.用 Python 实现一个 Reids 的分布式锁的功能</h4>
<p><strong>答</strong>:REDIS分布式锁实现的方式：SETNX + GETSET,NX是Not eXists的缩写，如SETNX命令就应该理解为：SET if Not eXists。
多个进程执行以下Redis命令：</p>
<pre><code class="hljs sql">SETNX lock.foo &lt;<span class="hljs-keyword">current</span> Unix <span class="hljs-keyword">time</span> + <span class="hljs-keyword">lock</span> <span class="hljs-keyword">timeout</span> + <span class="hljs-number">1</span>&gt;
</code></pre>
<p>如果 SETNX 返回1，说明该进程获得锁，SETNX将键 lock.foo 的值设置为锁的超时时间（当前时间 + 锁的有效时间）。 
如果 SETNX 返回0，说明其他进程已经获得了锁，进程不能进入临界区。进程可以在一个循环中不断地尝试 SETNX 操作，以获得锁。</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> time
<span class="hljs-keyword">import</span> redis
<span class="hljs-keyword">from</span> conf.config <span class="hljs-keyword">import</span> REDIS_HOST, REDIS_PORT, REDIS_PASSWORD

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisLock</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span>
        self.conn = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD, db=<span class="hljs-number">1</span>)
        self._lock = <span class="hljs-number">0</span>
        self.lock_key = <span class="hljs-string">""</span>
<span class="hljs-meta">    @staticmethod</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_float</span><span class="hljs-params">(timestamp)</span>:</span>
        <span class="hljs-string">"""
        Args:
            timestamp:
        Returns:
            float或者0
            如果取出的是None，说明原本锁并没人用，getset已经写入，返回0，可以继续操作。
        """</span>
        <span class="hljs-keyword">if</span> timestamp:
            <span class="hljs-keyword">return</span> float(timestamp)
        <span class="hljs-keyword">else</span>:
            <span class="hljs-comment">#防止取出的值为None，转换float报错</span>
            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>

<span class="hljs-meta">    @staticmethod</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_lock</span><span class="hljs-params">(cls, key, timeout=<span class="hljs-number">10</span>)</span>:</span>
        cls.lock_key = <span class="hljs-string">f"<span class="hljs-subst">{key}</span>_dynamic_lock"</span>
        <span class="hljs-keyword">while</span> cls._lock != <span class="hljs-number">1</span>:
            timestamp = time.time() + timeout + <span class="hljs-number">1</span>
            cls._lock = cls.conn.setnx(cls.lock_key, timestamp)
            <span class="hljs-comment"># if 条件中，可能在运行到or之后被释放，也可能在and之后被释放</span>
            <span class="hljs-comment"># 将导致 get到一个None，float失败。</span>
            <span class="hljs-keyword">if</span> cls._lock == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> (
                            time.time() &gt; cls.my_float(cls.conn.get(cls.lock_key)) <span class="hljs-keyword">and</span>
                            time.time() &gt; cls.my_float(cls.conn.getset(cls.lock_key, timestamp))):
                <span class="hljs-keyword">break</span>
            <span class="hljs-keyword">else</span>:
                time.sleep(<span class="hljs-number">0.3</span>)

<span class="hljs-meta">    @staticmethod</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">release</span><span class="hljs-params">(cls)</span>:</span>
        <span class="hljs-keyword">if</span> cls.conn.get(cls.lock_key) <span class="hljs-keyword">and</span> time.time() &lt; cls.conn.get(cls.lock_key):
            cls.conn.delete(cls.lock_key)


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">redis_lock_deco</span><span class="hljs-params">(cls)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_deco</span><span class="hljs-params">(func)</span>:</span>
        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__deco</span><span class="hljs-params">(*args, **kwargs)</span>:</span>
            cls.get_lock(cls, args[<span class="hljs-number">1</span>])
            <span class="hljs-keyword">try</span>:
                <span class="hljs-keyword">return</span> func(*args, **kwargs)
            <span class="hljs-keyword">finally</span>:
                cls.release(cls)
        <span class="hljs-keyword">return</span> __deco
    <span class="hljs-keyword">return</span> _deco


<span class="hljs-meta">@redis_lock_deco(RedisLock())</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_func</span><span class="hljs-params">()</span>:</span>
    print(<span class="hljs-string">"myfunc() called."</span>)
    time.sleep(<span class="hljs-number">20</span>)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:
    my_func()
</code></pre>
<h4 id="69pythonmongo">69.写一段 Python 使用 mongo 数据库创建索引的代码:</h4>
<p><strong>答</strong>:</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span>
<span class="hljs-comment"># @Time : 2018/12/28 10:01 AM</span>
<span class="hljs-comment"># @Author : cxa</span>
<span class="hljs-keyword">import</span> pymongo
db_configs = {
    <span class="hljs-string">'type'</span>: <span class="hljs-string">'mongo'</span>,
    <span class="hljs-string">'host'</span>: <span class="hljs-string">'地址'</span>,
    <span class="hljs-string">'port'</span>: <span class="hljs-string">'端口'</span>,
    <span class="hljs-string">'user'</span>: <span class="hljs-string">'spider_data'</span>,
    <span class="hljs-string">'passwd'</span>: <span class="hljs-string">'密码'</span>,
    <span class="hljs-string">'db_name'</span>: <span class="hljs-string">'spider_data'</span>
}


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mongo</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, db=db_configs[<span class="hljs-string">"db_name"</span>], username=db_configs[<span class="hljs-string">"user"</span>],
                 password=db_configs[<span class="hljs-string">"passwd"</span>])</span>:</span>
        self.client = pymongo.MongoClient(<span class="hljs-string">f'mongodb://<span class="hljs-subst">{db_configs[<span class="hljs-string">"host"</span>]}</span>:<span class="hljs-subst">{db_configs[<span class="hljs-string">"port"</span>]}</span>'</span>)
        self.username = username
        self.password = password
        <span class="hljs-keyword">if</span> self.username <span class="hljs-keyword">and</span> self.password:
            self.db1 = self.client[db].authenticate(self.username, self.password)
        self.db1 = self.client[db]

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_index</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-string">"""
          通过create_index添加索引
        """</span>
        self.db1.test.create_index([(<span class="hljs-string">'name'</span>, pymongo.ASCENDING)], unique=<span class="hljs-keyword">True</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_index</span><span class="hljs-params">(self,)</span>:</span>
        <span class="hljs-string">"""
          查看索引列表
        """</span>
        indexlist=self.db1.test.list_indexes()
        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> indexlist:
            print(index)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    m = Mongo()
    m.add_index()
    print(m.get_index())
</code></pre>
<h3 id="-7">高级特性</h3>
<h4 id="70">70. 函数装饰器有什么作用？请列举说明？</h4>
<p><strong>答：</strong>
装饰器就是一个函数，它可以在不需要做任何代码变动的前提下给一个函数增加额外功能，启动装饰的效果。
它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。
下面是一个日志功能的装饰器</p>
<pre><code class="hljs ruby">from functools import wraps
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">log</span><span class="hljs-params">(label)</span></span>：
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorate</span><span class="hljs-params">(func)</span></span>：
       @wraps(func) 
       <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_wrap</span><span class="hljs-params">(*args,**kwargs)</span></span>：
        try：
          func(*args,**kwargs)
          print(<span class="hljs-string">"name"</span>,func.__name_<span class="hljs-number">_</span>)
        except Exception as e：
           print(e.args)
       <span class="hljs-keyword">return</span> _wrap
    <span class="hljs-keyword">return</span> decorate    

@log(<span class="hljs-string">"info"</span>)
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span><span class="hljs-params">(a,b,c)</span></span>：
     print(a+b+c)
     print(<span class="hljs-string">"in foo"</span>)

<span class="hljs-comment">#decorate=decorate(foo)   </span>

<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    foo(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)
     <span class="hljs-comment">#decorate()</span>
</code></pre>
<h4 id="71python">71. Python 垃圾回收机制？</h4>
<p><strong>答：</strong>Python 不像 C++，Java 等语言一样，他们可以不用事先声明变量类型而直接对变量进行赋值。对 Python 语言来讲，对象的类型和内存都是在运行时确定的。这也是为什么我们称 Python 语言为动态类型的原因。</p>
<p>主要体现在下面三个方法：</p>
<p>1.引用计数机制
2.标记-清除
3.分代回收</p>
<h4 id="72__call__">72. 魔法函数 _<em>call</em>_怎么使用?</h4>
<p><strong>答：</strong>
_<em>call</em>_ 可以把类实例当做函数调用。
使用示例如下</p>
<pre><code class="hljs ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span>：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, *args, **kwargs)</span></span>：
        print(<span class="hljs-string">'in call'</span>)


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    b = Bar()
    b()
</code></pre>
<h4 id="73">73. 如何判断一个对象是函数还是方法？</h4>
<p><strong>答：</strong>看代码已经结果就懂了</p>
<pre><code class="hljs ruby">from types import MethodType, FunctionType


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span>：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        pass


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo2</span><span class="hljs-params">()</span></span>：
    pass


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>：
    print(<span class="hljs-string">"foo 是函数"</span>, isinstance(Bar().foo, FunctionType))
    print(<span class="hljs-string">"foo 是方法"</span>, isinstance(Bar().foo, MethodType))
    print(<span class="hljs-string">"foo2 是函数"</span>, isinstance(foo2, FunctionType))
    print(<span class="hljs-string">"foo2 是方法"</span>, isinstance(foo2, MethodType))


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    run()
</code></pre>
<p>输出</p>
<pre><code class="hljs php">foo 是函数 <span class="hljs-keyword">False</span>
foo 是方法 <span class="hljs-keyword">True</span>
foo2 是函数 <span class="hljs-keyword">True</span>
foo2 是方法 <span class="hljs-keyword">False</span>
</code></pre>
<h4 id="74classmethodstaticmethod">74. @classmethod 和 @staticmethod 用法和区别</h4>
<p><strong>答：</strong> 
相同之处：@staticmethod 和@classmethod 都可以直接类名.方法名()来调用，不用在示例化一个类。
@classmethod 
我们要写一个只在类中运行而不在实例中运行的方法。如果我们想让方法不在实例中运行，可以这么做：</p>
<pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">iget_no_of_instance</span><span class="hljs-params">(ins_obj)</span></span>：
    <span class="hljs-keyword">return</span> ins_obj.__class_<span class="hljs-number">_</span>.no_inst


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Kls</span>(<span class="hljs-title">object</span>)：</span>
    no_inst = <span class="hljs-number">0</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        Kls.no_inst = Kls.no_inst + <span class="hljs-number">1</span>


ik1 = Kls()
ik2 = Kls()
print(iget_no_of_instance(ik1))
</code></pre>
<p>@staticmethod 
经常有一些跟类有关系的功能但在运行时又不需要实例和类参与的情况下需要用到静态方法</p>
<pre><code class="hljs ruby">IND = <span class="hljs-string">'ON'</span>


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Kls</span>(<span class="hljs-title">object</span>)：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, data)</span></span>：
        <span class="hljs-keyword">self</span>.data = data

    @staticmethod
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_ind</span><span class="hljs-params">()</span></span>：
        <span class="hljs-keyword">return</span> (IND == <span class="hljs-string">'ON'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_reset</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.check_ind()：
            print(<span class="hljs-string">'Reset done for：'</span>, <span class="hljs-keyword">self</span>.data)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_db</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.check_ind()：
            <span class="hljs-keyword">self</span>.db = <span class="hljs-string">'New db connection'</span>
        print(<span class="hljs-string">'DB connection made for： '</span>, <span class="hljs-keyword">self</span>.data)


ik1 = Kls(<span class="hljs-number">12</span>)
ik1.do_reset()
ik1.set_db()
</code></pre>
<h4 id="75python">75. Python 中的接口如何实现？</h4>
<p><strong>答：</strong>
接口提取了一群类共同的函数，可以把接口当做一个函数的集合，然后让子类去实现接口中的函数。但是在 Python 中根本就没有一个叫做 interface 的关键字，如果非要去模仿接口的概念，可以使用抽象类来实现。抽象类是一个特殊的类，它的特殊之处在于只能被继承，不能被实例化。使用 abc 模块来实现抽象类。</p>
<h4 id="76python">76. Python 中的反射了解么?</h4>
<p><strong>答：</strong>Python 的反射机制设定较为简单，一共有四个关键函数分别是 getattr、hasattr、setattr、delattr。</p>
<h4 id="77metaclass">77. metaclass 作用？以及应用场景？</h4>
<p><strong>答：</strong>
metaclass 即元类，metaclass 是类似创建类的模板，所有的类都是通过他来 create 的(调用<strong>new</strong>)，这使得你可以自由的控制创建类的那个过程，实现你所需要的功能。
我们可以使用元类创建单例模式和实现 ORM 模式。</p>
<h4 id="78hasattrgetattrsetattr">78. hasattr()、getattr()、setattr() 的用法</h4>
<p><strong>答：</strong>这三个方法属于 Python 的反射机制里面的，hasattr 可以判断一个对象是否含有某个属性，getattr 可以充当 get 获取对象属性的作用。而 setattr 可以充当 person.name = "liming"的赋值操作。代码示例如下：</p>
<pre><code class="hljs ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>()：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-keyword">self</span>.name = <span class="hljs-string">"liming"</span>
        <span class="hljs-keyword">self</span>.age = <span class="hljs-number">12</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        print(<span class="hljs-keyword">self</span>.name)
        print(<span class="hljs-keyword">self</span>.age)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_name</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        setattr(Person, <span class="hljs-string">"sex"</span>, <span class="hljs-string">"男"</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        print(getattr(<span class="hljs-keyword">self</span>, <span class="hljs-string">"name"</span>))
        print(getattr(<span class="hljs-keyword">self</span>, <span class="hljs-string">"age"</span>))
        print(getattr(<span class="hljs-keyword">self</span>, <span class="hljs-string">"sex"</span>))


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>：
    <span class="hljs-keyword">if</span> hasattr(Person, <span class="hljs-string">"show"</span>)：
        print(<span class="hljs-string">"判断 Person 类是否含有 show 方法"</span>)


    Person().set_name()
    Person().get_name()


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    run()
</code></pre>
<h4 id="79python">79. 请列举你知道的 Python 的魔法方法及用途。</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs markdown">1 <span class="hljs-strong">__init__</span>：
类的初始化方法。它获取任何传给构造器的参数（比如我们调用 x = SomeClass(10, ‘foo’) ， <span class="hljs-strong">__init__</span>就会接到参数 10 和 ‘foo’ 。 <span class="hljs-strong">__init__</span>在 Python 的类定义中用的最多。

2 <span class="hljs-strong">__new__</span>：
<span class="hljs-strong">__new__</span>是对象实例化时第一个调用的方法，它只取下 cls 参数，并把其他参数传给 <span class="hljs-strong">__init__</span> 。 <span class="hljs-strong">__new__</span>很少使用，但是也有它适合的场景，尤其是当类继承自一个像元组或者字符串这样不经常改变的类型的时候.

3 <span class="hljs-strong">__del__</span>：
<span class="hljs-strong">__new__</span>和 <span class="hljs-strong">__init__</span>是对象的构造器， <span class="hljs-strong">__del__</span>是对象的销毁器。它并非实现了语句 del x (因此该语句不等同于 x.<span class="hljs-strong">__del__</span>())。而是定义了当对象被垃圾回收时的行为。 当对象需要在销毁时做一些处理的时候这个方法很有用，比如 socket 对象、文件对象。但是需要注意的是，当 Python 解释器退出但对象仍然存活的时候，<span class="hljs-strong">__del__</span>并不会 执行。 所以养成一个手工清理的好习惯是很重要的，比如及时关闭连接。
</code></pre>
<h4 id="80python">80. 如何知道一个 Python 对象的类型？</h4>
<p><strong>答：</strong>可以通过 type 方法</p>
<h4 id="81python">81. Python 的传参是传值还是传址？</h4>
<p><strong>答：</strong>Python 中的传参即不是传值也不是传地址，传的是对象的引用。</p>
<h4 id="82pythonmetaclass">82. Python 中的元类 (metaclass) 使用举例</h4>
<p><strong>答：</strong>可以使用元类实现一个单例模式，代码如下</p>
<pre><code class="hljs objectivec"><span class="hljs-keyword">class</span> Singleton(type)：
    def __init__(<span class="hljs-keyword">self</span>, *args, **kwargs)：
        print(<span class="hljs-string">"in __init__"</span>)
        <span class="hljs-keyword">self</span>.__instance = None
        <span class="hljs-keyword">super</span>(Singleton, <span class="hljs-keyword">self</span>).__init__(*args, **kwargs)

    def __call__(<span class="hljs-keyword">self</span>, *args, **kwargs)：
        print(<span class="hljs-string">"in __call__"</span>)
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.__instance is None：
            <span class="hljs-keyword">self</span>.__instance = <span class="hljs-keyword">super</span>(Singleton, <span class="hljs-keyword">self</span>).__call__(*args, **kwargs)
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.__instance

<span class="hljs-keyword">class</span> Foo(metaclass=Singleton)：
    pass  <span class="hljs-meta"># 在代码执行到这里的时候，元类中的__new__方法和__init__方法其实已经被执行了，而不是在 Foo 实例化的时候执行。且仅会执行一次。</span>

foo1 = Foo()
foo2 = Foo()
print(foo1 is foo2)
</code></pre>
<h4 id="83anyall">83. 简述 any() 和 all() 方法</h4>
<p><strong>答：</strong>
any(x)：判断 x 对象是否为空对象，如果都为空、0、false，则返回 false，如果不都为空、0、false，则返回 true。
all(x)：如果 all(x) 参数 x 对象的所有元素不为 0、''、False 或者 x 为空对象，则返回 True，否则返回 False。</p>
<h4 id="84filtera12345678910">84. filter 方法求出列表所有奇数并构造新列表，a =  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</h4>
<p>答</p>
<pre><code class="hljs makefile">a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list(filter(lambda x： x % 2 == 1, a)))
</code></pre>
<p>其实现在不推荐使用 filter,map 等方法了，一般列表生成式就可以搞定了。</p>
<h4 id="85">85. 什么是猴子补丁？</h4>
<p><strong>答：</strong>
猴子补丁（monkey patching)：在运行时动态修改模块、类或函数，通常是添加功能或修正缺陷。猴子补丁在代码运行时内存中）发挥作用，不会修改源码，因此只对当前运行的程序实例有效。因为猴子补丁破坏了封装，而且容易导致程序与补丁代码的实现细节紧密耦合，所以被视为临时的变通方案，不是集成代码的推荐方式。大概是下面这样的一个效果</p>
<pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span><span class="hljs-params">()</span></span>：
    print(<span class="hljs-string">"this is post"</span>)
    print(<span class="hljs-string">"想不到吧"</span>)

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Http</span>()：</span>
    @classmethod
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        print(<span class="hljs-string">"this is get"</span>)


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>：
    Http.get=post <span class="hljs-comment">#动态的修改了 get 原因的功能，</span>

<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    main()      
    Http.get() 
</code></pre>
<h4 id="86python">86. 在 Python 中是如何管理内存的？</h4>
<p><strong>答：</strong>
 垃圾回收：Python 不像 C++，Java 等语言一样，他们可以不用事先声明变量类型而直接对变量进行赋值。对 Python 语言来讲，对象的类型和内存都是在运行时确定的。这也是为什么我们称 Python 语言为动态类型的原因（这里我们把动态类型可以简单的归结为对变量内存地址的分配是在运行时自动判断变量类型并对变量进行赋值）。</p>
<p>引用计数：Python 采用了类似 Windows 内核对象一样的方式来对内存进行管理。每一个对象，都维护这一个对指向该对对象的引用的计数。当变量被绑定在一个对象上的时候，该变量的引用计数就是 1，(还有另外一些情况也会导致变量引用计数的增加)，系统会自动维护这些标签，并定时扫描，当某标签的引用计数变为 0 的时候，该对就会被回收。</p>
<ul>
<li><p>内存池机制 Python 的内存机制以金字塔行，1、2 层主要有操作系统进行操作</p></li>
<li><p>第 0 层是 C 中的 malloc，free 等内存分配和释放函数进行操作</p></li>
<li><p>第 1 层和第 2 层是内存池，有 Python 的接口函数 PyMem_Malloc 函数实现，当对象小于 256K 时有该层直接分配内存</p></li>
<li><p>第 3 层是最上层，也就是我们对 Python 对象的直接操作</p></li>
<li><p>在 C 中如果频繁的调用 malloc 与 free 时,是会产生性能问题的.再加上频繁的分配与释放小块的内存会产生内存碎片。Python 在这里主要干的工作有：</p>
<ul>
<li><p>如果请求分配的内存在 1~256 字节之间就使用自己的内存管理系统,否则直接使用 malloc。</p></li>
<li><p>这里还是会调用 malloc 分配内存，但每次会分配一块大小为 256k 的大块内存。</p></li></ul></li>
<li><p>经由内存池登记的内存到最后还是会回收到内存池，并不会调用 C 的 free 释放掉以便下次使用。对于简单的 Python 对象，例如数值、字符串，元组（tuple 不允许被更改)采用的是复制的方式(深拷贝?)，也就是说当将另一个变量 B 赋值给变量 A 时，虽然 A 和 B 的内存空间仍然相同，但当 A 的值发生变化时，会重新给 A 分配空间，A 和 B 的地址变得不再相同。</p></li>
</ul>
<h4 id="87python">87. 当退出 Python 时是否释放所有内存分配？</h4>
<p><strong>答：</strong>不是的，循环引用其他对象或引用自全局命名空间的对象的模块，在 Python 退出时并非完全释放。</p>
<p>另外，也不会释放 c 库保留的内存部分</p>
<h3 id="-8">正则表达式</h3>
<h4 id="881htmlh1wwwbaiducomh1html2a98resub98100">88. （1）使用正则表达式匹配出<code>&lt;html&gt;&lt;h1\&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;</code>中的地址（2）a="张明 98 分"，用 re.sub，将 98 替换为 100</h4>
<p><strong>答：</strong>
第一问答案</p>
<pre><code class="hljs xml">import re

source = "<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>"
pat = re.compile("<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>(.*?)<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>")
print(pat.findall(source)[0])
</code></pre>
<p>第二问答案</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> re
s = <span class="hljs-string">"张明 98 分"</span>
print(re.sub(<span class="hljs-string">r"\d+"</span>,<span class="hljs-string">"100"</span>,s))
</code></pre>
<h4 id="89">89. 正则表达式匹配中(.*)和(.*?)匹配区别？</h4>
<p><strong>答：</strong>(.*) 为贪婪模式极可能多的匹配内容 ,(.*?) 为非贪婪模式又叫懒惰模式，一般匹配到结果就好，匹配字符的少为主，示例代码如下</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> re

s = <span class="hljs-string">"&lt;html&gt;&lt;div&gt;文本 1&lt;/div&gt;&lt;div&gt;文本 2&lt;/div&gt;&lt;/html&gt;"</span>

pat1 = re.compile(<span class="hljs-string">r"\&lt;div&gt;(.*?)\&lt;/div&gt;"</span>)
print(pat1.findall(s))

pat2 = re.compile(<span class="hljs-string">r"\&lt;div&gt;(.*)\&lt;/div&gt;"</span>)
print(pat2.findall(s))
</code></pre>
<p>输出</p>
<pre><code class="hljs json">['文本 <span class="hljs-number">1</span>', '文本 <span class="hljs-number">2</span>']
['文本 <span class="hljs-number">1</span>&lt;/div&gt;&lt;div&gt;文本 <span class="hljs-number">2</span>']
</code></pre>
<h4 id="90">90. 写一段匹配邮箱的正则表达式</h4>
<p><strong>答：</strong>关于邮箱的匹配这个还真的是一个永恒的话题。</p>
<p>电子邮件地址有统一的标准格式：用户名@服务器域名。用户名表示邮件信箱、注册名或信件接收者的用户标识，@符号后是你使用的邮件服务器的域名。@可以读成“at”，也就是“在”的意思。整个电子邮件地址可理解为网络中某台服务器上的某个用户的地址。</p>
<ol>
<li>用户名，可以自己选择。由字母 a～z(不区分大小写)、数字 0～9、点、减号或下划线组成；只能以数字或字母开头和结尾。</li>
<li>与你使用的网站有关，代表邮箱服务商。例如网易的有@163.com 新浪有@vip.sina.com 等。</li>
</ol>
<p>网上看到了各种各样的版本，都不确定用哪个，于是自己简单的总结了一个。大家有更好的欢迎留言。</p>
<pre><code class="hljs css"><span class="hljs-selector-tag">r</span>"^<span class="hljs-selector-attr">[a-zA-Z0-9]</span>+<span class="hljs-selector-attr">[a-zA-Z0-9_.+-]</span>+@[<span class="hljs-keyword">a</span>-<span class="hljs-keyword">zA</span>-<span class="hljs-keyword">Z0</span>-<span class="hljs-keyword">9</span>-]+\.[<span class="hljs-keyword">a</span>-<span class="hljs-keyword">zA</span>-<span class="hljs-keyword">Z0</span>-<span class="hljs-keyword">9</span>-.]+$"
</code></pre>
<p>下面解释上面的表达式</p>
<ol>
<li>首先强调一点关于\w 的含义，\w 匹配英文字母和俄语字母或数字或下划线或汉字。</li>
<li>注意^[]和[^]的区别，[]表示字符集合，^[]表示已[]内的任意字符集开始，[^]表示。</li>
<li>^[a-zA-Z0-9]+：这里注意^[]和[^]的,第一个^表示已什么开头，第二个[]的^表示不等于[]内。所以这段表示以英文字母和数字开头，后面紧跟的+，限定其个数&gt;=1 个。</li>
<li>[a-zA-Z0-9<em>.+-]+：表示匹配英文字母和数字开头以及</em>.+-, 的任意一个字符，并限定其个数&gt;=1 个。为了考虑@前面可能出现.+-（但是不在开头出现）。</li>
<li>@就是邮箱必备符号了</li>
<li>@[a-zA-Z0-9-]+.：前面的不用说了，后面的.表示.转义了,也是必备符号。</li>
<li>[ a-zA-Z0-9-.]+：$符表示以什么结束,这里表示以英文字和数字或 -. 1 个或多个结尾。</li>
</ol>
<p>来个例子验证一波：</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> re
plt=re.compile(<span class="hljs-string">r"^[a-zA-Z0-9]+[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"</span>)
b=plt.findall(<span class="hljs-string">'adas+fefe.we@qq.com.cn'</span>)
print(b)
</code></pre>
<p>网上找了个验证邮件地址的通用正则表达式（符合 RFC 5322 标准）</p>
<pre><code class="hljs markdown">(?：[<span class="hljs-string">a-z0-9!#$%&amp;'*+/=?^_`{|}~-</span>]+(?：\.[<span class="hljs-string">a-z0-9!#$%&amp;'*+/=?^_`{|}~-</span>]+)<span class="hljs-emphasis">*|"(?：[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*</span>")@(?：(?：[<span class="hljs-string">a-z0-9</span>](<span class="hljs-link">?：[a-z0-9-]*[a-z0-9]</span>)?\.)+[<span class="hljs-string">a-z0-9</span>](<span class="hljs-link">?：[a-z0-9-]*[a-z0-9]</span>)?|\[<span class="hljs-string">(?：(?：25[0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?)\.){3}(?：25[<span class="hljs-string">0-5</span>]|2[<span class="hljs-string">0-4</span>][<span class="hljs-symbol">0-9</span>]|[<span class="hljs-string">01</span>]?[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">0-9</span>]?|[a-z0-9-]*[a-z0-9]：(?：[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
</code></pre>
<h3 id="-9">其他内容</h3>
<h4 id="91pythonpass">91. 解释一下 Python 中 pass 语句的作用？</h4>
<p><strong>答：</strong>pass 实际上就是一个占位符，在写一个函数但是不确定里面写啥的时候，这个时候可以使用 pass。示例如下</p>
<pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span>：
 pass
</code></pre>
<h4 id="92input">92. 简述你对 input()函数的理解</h4>
<p><strong>答：</strong>在 Python3 中 input 函数可以接收用户输入的字符串。</p>
<p>然后根据程序的需要转换成所需格式即可。</p>
<h4 id="93pythonis">93. Python 中的 is 和==</h4>
<p><strong>答：</strong>先说==它的作用是判断两个对象的值是否相同，然后说 is。is 表示的谁是谁，这也就意味着对象完全相等。我们知道一个对象有各自的内存地址和对应的值，当内存地址和值都相同的时候使用 is 可以得到结果 True。另外需要注意的下面两点特殊的情况。</p>
<p>这些变量很可能在许多程序中使用。 通过池化这些对象，Python 可以防止对一致使用的对象进行内存分配调用。</p>
<pre><code class="hljs">1.介于数字-5 和 256 之间的整数
2.字符串仅包含字母、数字或下划线
</code></pre>
<h4 id="94python">94. Python 中的作用域</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs coffeescript">Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定

当 Python 遇到一个变量的话它会按照这的顺序进行搜索

本地作用域(Local)---&gt;当前作用域被嵌入的本地作用域(Enclosing locals)---&gt;全局/模块作用域(Global)---&gt;内置作用域(Built-<span class="hljs-keyword">in</span>)
</code></pre>
<h4 id="95">95. 三元运算写法和应用场景？</h4>
<p><strong>答：</strong>Python 中的三元运算又称三目运算，是对简单的条件语句的简写。
是一种比较 Pythonic 的学法，形式为：val = 1 if 条件成立 else 2
代码示例如下：</p>
<pre><code class="hljs makefile">a = 2
b = 5

<span class="hljs-comment"># 普通写法</span>
if a &gt; b：
    val = True
<span class="hljs-keyword">else</span>：
    val = False
<span class="hljs-comment"># 改为三元运算符后    </span>
val = a if a &gt; b <span class="hljs-keyword">else</span> b
print(val)  <span class="hljs-comment"># 5</span>
</code></pre>
<h4 id="96enumerate">96. 了解 enumerate 么？</h4>
<p><strong>答：</strong>enumerate 可以在迭代一个对象的时候，同时获取当前对象的索引和值。
代码示例如下</p>
<pre><code class="hljs cs"><span class="hljs-keyword">from</span> <span class="hljs-keyword">string</span> import ascii_lowercase

s = ascii_lowercase

<span class="hljs-keyword">for</span> index, <span class="hljs-function"><span class="hljs-keyword">value</span> <span class="hljs-keyword">in</span> <span class="hljs-title">enumerate</span>(<span class="hljs-params">s</span>)：
    <span class="hljs-title">print</span>(<span class="hljs-params">index, <span class="hljs-keyword">value</span></span>)
</span></code></pre>
<h4 id="975python">97. 列举 5 个 Python 中的标准模块</h4>
<p><strong>答：</strong>
pathlib：路径操作模块，比 os 模块拼接方便。
urllib：网络请求模块，包括对 url 的结构解析。
asyncio： Python 的异步库，基于事件循环的协程模块。
re：正则表达式模块。
itertools：提供了操作生成器的一些模块。</p>
<h4 id="98">98. 如何在函数中设置一个全局变量</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs makefile"><span class="hljs-comment"># 通过使用 global 对全局变量进行修改。</span>
n = 0
def foo()：
    global n
    n = 100
foo()
print(n)
x = 0
</code></pre>
<p>之前我在视频教程中对这块做了个讲解，具体点击下方链接
https：//www.bilibili.com/video/av50865713</p>
<h4 id="99pathlib">99. pathlib 的用法举例</h4>
<p><strong>答：</strong>pathlib 可以对文件以及文件的其他属性进行操作。比较喜欢的一点是路径拼接符"/"的使用，之前在公众号中写过 pathlib 一些其他的用法这里就不一一例举了。</p>
<h4 id="100python">100. Python 中的异常处理，写一个简单的应用场景</h4>
<p><strong>答：</strong>
比如在计算除法中出现为 0 的情况出现异常</p>
<pre><code class="hljs python"><span class="hljs-keyword">try</span>：
    <span class="hljs-number">1</span> / <span class="hljs-number">0</span>
<span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e：
    print(e.args)
</code></pre>
<h4 id="101python">101. Python 中递归的最大次数，那如何突破呢？</h4>
<p><strong>答：</strong>Python 有递归次数限制，默认最大次数为 1000。通过下面的代码可以突破这个限制</p>
<pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> sys
sys.setrecursionlimit(<span class="hljs-number">1500</span>) <span class="hljs-comment"># set the maximum depth as 1500</span>
</code></pre>
<p>另外需要注意的是 sys.setrecursionlimit() 只是修改解释器在解释时允许的最大递归次数，此外，限制最大递归次数的还和操作系统有关。</p>
<h4 id="102mro">102. 什么是面向对象的 mro</h4>
<p><strong>答：</strong>Python 是支持面向对象编程的，同时也是支持多重继承的。一般我们通过调用类对象的 mro()方法获取其继承关系。</p>
<h4 id="103isinstance">103. isinstance 作用以及应用场景？</h4>
<p><strong>答：</strong>isinstance 是判断一个对象是否为另一个对象的子类的，例如我们知道在 Python3 中 bool 类型其实是 int 的子类，所以我们可以对其检测。</p>
<pre><code class="hljs perl"><span class="hljs-keyword">print</span>(isinstance(True,<span class="hljs-keyword">int</span>))
</code></pre>
<h4 id="104">104. 什么是断言？应用场景？</h4>
<p><strong>答：</strong>在 Python 中是断言语句 assert 实现此功能，一般在表达式为 True 的情况下，程序才能通过。</p>
<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">author：陈祥安</span>
<span class="hljs-meta">#</span><span class="bash">公众号：Python 学习开发</span>
<span class="hljs-meta">
#</span><span class="bash">assert（）方法，断言成功，则程序继续执行，断言失败，则程序报错</span>
<span class="hljs-meta">#</span><span class="bash"> 断言能够帮助别人或未来的你理解代码，</span>
<span class="hljs-meta">#</span><span class="bash"> 找出程序中逻辑不对的地方。一方面，</span>
<span class="hljs-meta">#</span><span class="bash"> 断言会提醒你某个对象应该处于何种状态，</span>
<span class="hljs-meta">#</span><span class="bash"> 另一方面，如果某个时候断言为假，</span>
<span class="hljs-meta">#</span><span class="bash"> 会抛出 AssertionError 异常，很有可能终止程序。</span>

def foo(a)：
    assert a==2,Exception("不等于 2")
    print("ok",a)

if __name__ == '__main__'：
    foo(1)
</code></pre>
<h4 id="105lambda">105. lambda 表达式格式以及应用场景？</h4>
<p><strong>答：</strong>lambda 表达式其实就是一个匿名函数,在函数编程中经常作为参数使用。
例子如下</p>
<pre><code class="hljs ini"><span class="hljs-attr">a</span> = [(<span class="hljs-string">'a'</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">'b'</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">'c'</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">'d'</span>,<span class="hljs-number">4</span>)]
<span class="hljs-attr">a_1</span> = list(map(lambda x：x[<span class="hljs-number">0</span>],a))
</code></pre>
<h4 id="106">106. 新式类和旧式类的区别</h4>
<p><strong>答：</strong>Python 2.x 中默认都是经典类，只有显式继承了 object 才是新式类，Python 3.x 中默认都是新式类，经典类被移除，不必显式的继承 object。
新式类都从 object 继承，经典类不需要。
新式类的 MRO(method resolution order 基类搜索顺序)算法采用 C3 算法广度优先搜索，而旧式类的 MRO 算法是采用深度优先搜索。
新式类相同父类只执行一次构造函数，经典类重复执行多次。</p>
<h4 id="107dir">107. dir()是干什么用的？</h4>
<p><strong>答：</strong>当在使用某一个对象不知道有哪些属性或者方法可以使用时，此时可以通过 dir() 方法进行查看。</p>
<h4 id="108demo1pydemo2pydemo3pyfromtoolsimportdemo1demo3">108. 一个包里有三个模块，demo1.py、demo2.py、demo3.py，但使用 from tools import *导入模块时，如何保证只有 demo1、demo3 被导入了。</h4>
<p><strong>答：</strong>
增加_<em>init</em>_.py 文件，并在文件中增加：</p>
<pre><code class="hljs ini"><span class="hljs-attr">__all__</span> = [<span class="hljs-string">'demo1'</span>,<span class="hljs-string">'demo3'</span>]
</code></pre>
<h4 id="1095python">109. 列举 5 个 Python 中的异常类型以及其含义</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs javascript">AttributeError 对象没有这个属性

NotImplementedError 尚未实现的方法

<span class="hljs-built_in">StopIteration</span> 迭代器没有更多的值

<span class="hljs-built_in">TypeError</span> 对类型无效的操作

IndentationError 缩进错误
</code></pre>
<h4 id="110copydeepcopy">110. copy 和 deepcopy 的区别是什么？</h4>
<p><strong>答：</strong>
copy.copy()浅拷贝，只拷贝父对象，不会拷贝对象的内部的子对象。
copy.deepcopy()深拷贝，拷贝对象及其子对象。</p>
<h4 id="111argskwargs">111. 代码中经常遇到的*args, **kwargs 含义及用法。</h4>
<p><strong>答：</strong>
在函数定义中使用 *args 和**kwargs 传递可变长参数。
*args 用来将参数打包成 tuple 给函数体调用。
**kwargs 打包关键字参数成 dict 给函数体调用。</p>
<h4 id="112python">112. Python 中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么?</h4>
<p><strong>答：</strong>
"单下划线" 开始的成员变量叫做保护变量，意思是只有类对象和子类对象自己能访问到这些变量；
 "双下划线" 开始的是私有成员，意思是只有类对象自己能访问，连子类对象也不能访问到这个数据。</p>
<p>以单下划线开头（_foo）的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用“from xxx import *”而导入；以双下划线开头的（__foo）代表类的私有成员；</p>
<p>以双下划线开头和结尾的（_<em>foo<strong>）代表 Python 里特殊方法专用的标识，如 _</strong></em><strong>init</strong>（）代表类的构造函数。</p>
<p>代码示例</p>
<pre><code class="hljs ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>：</span>
    <span class="hljs-string">""</span><span class="hljs-string">"docstring for ClassName"</span><span class="hljs-string">""</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
       <span class="hljs-keyword">self</span>.__age = <span class="hljs-number">12</span>
       <span class="hljs-keyword">self</span>._sex = <span class="hljs-number">12</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_sex</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-keyword">return</span> <span class="hljs-string">"男"</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_age</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,age)</span></span>：
        <span class="hljs-keyword">self</span>.__age = age

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_age</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.__age   

<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    p=Person()
    print(p._sex)
    <span class="hljs-comment">#print(p.__age)</span>
    <span class="hljs-comment">#Python 自动将__age 解释成 _Person__age,于是我们用 _Person__age 访问，这次成功。</span>
    print(p._Person__age)
</code></pre>
<h4 id="113wawb">113. w、a+、wb 文件写入模式的区别</h4>
<p><strong>答：</strong>
w 表示写模式支持写入字符串，如果文件存在则覆盖。
a+ 和 w 的功能类型不过如果文件存在的话内容不会覆盖而是追加。
wb 是写入二进制字节类型的数据。</p>
<h4 id="114sortsorted">114. 举例 sort 和 sorted 的区别</h4>
<p><strong>答：</strong>
相同之处 sort 和 sorted 都可以对列表元素排序，sort() 与 sorted() 的不同在于，sort 是在原位重新排列列表，而 sorted() 是产生一个新的列表。
sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。</p>
<p>list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</p>
<h4 id="115">115. 什么是负索引？</h4>
<p><strong>答：</strong>负索引一般表示的是从后面取元素。</p>
<h4 id="116pprint">116. pprint 模块是干什么的？</h4>
<p><strong>答：</strong>pprint 是 print 函数的美化版，可以通过 import pprint 导入。示例如下</p>
<pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> pprint
pprint.pprint(<span class="hljs-string">"this is pprint"</span>)
</code></pre>
<h4 id="117python">117. 解释一下 Python 中的赋值运算符</h4>
<p><strong>答：</strong>通过下面的代码列举出所有的赋值运算符</p>
<pre><code class="hljs php">a=<span class="hljs-number">7</span>
a+=<span class="hljs-number">1</span>
<span class="hljs-keyword">print</span>(a)
a-=<span class="hljs-number">1</span>
<span class="hljs-keyword">print</span>(a)
a*=<span class="hljs-number">2</span>
<span class="hljs-keyword">print</span>(a)
a/=<span class="hljs-number">2</span>
<span class="hljs-keyword">print</span>(a)
a**=<span class="hljs-number">2</span>
<span class="hljs-keyword">print</span>(a)
a<span class="hljs-comment">//=3</span>
<span class="hljs-keyword">print</span>(a)
a%=<span class="hljs-number">4</span>
<span class="hljs-keyword">print</span>(a)
</code></pre>
<h4 id="118python">118. 解释一下 Python 中的逻辑运算符</h4>
<p><strong>答：</strong>Python 中有三个逻辑运算符：and、or、not</p>
<pre><code class="hljs python">print(<span class="hljs-keyword">False</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">True</span>) <span class="hljs-comment">#False</span>
print(<span class="hljs-number">7</span>&lt;<span class="hljs-number">7</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">True</span>) <span class="hljs-comment">#True</span>
print(<span class="hljs-keyword">not</span> <span class="hljs-number">2</span>==<span class="hljs-number">2</span>) <span class="hljs-comment">#False</span>
</code></pre>
<h4 id="119python">119. 讲讲 Python 中的位运算符</h4>
<p><strong>答：</strong>按位运算符是把数字看作二进制来进行计算的。Python 中的按位运算法则如下：</p>
<p>下表中变量 a 为 60，b 为 13，二进制格式如下：</p>
<pre><code class="hljs makefile">a = 0011 1100
b = 0000 1101
-----------------
a&amp;b = 0000 1100
a|b = 0011 1101
a^b = 0011 0001
~a  = 1100 0011
</code></pre>
<p><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/c2660350-8bf3-11e9-86b6-1bdaa75635da" alt="enter image description here"></p>
<h4 id="120python">120. 在 Python 中如何使用多进制数字？</h4>
<p><strong>答：</strong>
我们在 Python 中，除十进制外还可以使用二进制、八进制和十六进制</p>
<ul>
<li>二进制数字由 0 和 1 组成，我们使用 0b 或 0B 前缀表示二进制数</li>
</ul>
<pre><code class="hljs perl"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">int</span>(0b101<span class="hljs-number">0</span>))<span class="hljs-comment">#10</span>
</code></pre>
<ul>
<li>使用 bin()函数将一个数字转换为它的二进制形式</li>
</ul>
<pre><code class="hljs bash"><span class="hljs-built_in">print</span>(bin(0xf))<span class="hljs-comment">#0b1111</span>
</code></pre>
<ul>
<li>八进制数由数字 0-7 组成，用前缀 0o 或 0O 表示 8 进制数</li>
</ul>
<pre><code class="hljs perl"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">oct</span>(<span class="hljs-number">8</span>))<span class="hljs-comment">#0o10</span>
</code></pre>
<ul>
<li>十六进数由数字 0-15 组成，用前缀 0x 或者 0X 表示 16 进制数</li>
</ul>
<pre><code class="hljs perl"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">hex</span>(<span class="hljs-number">16</span>))<span class="hljs-comment">#0x10</span>
<span class="hljs-keyword">print</span>(<span class="hljs-keyword">hex</span>(<span class="hljs-number">15</span>))<span class="hljs-comment">#0xf</span>
</code></pre>
<h4 id="121">121. 怎样声明多个变量并赋值？</h4>
<p><strong>答：</strong>Python 是支持多个变量赋值的，代码示例如下</p>
<pre><code class="hljs apache"><span class="hljs-comment">#对变量 a,b,c 声明并赋值</span>
<span class="hljs-attribute">a</span>,b,c = 1,2,3
</code></pre>
<h3 id="-10">算法和数据结构</h3>
<h4 id="122">122. 已知：</h4>
<pre><code class="hljs ini"><span class="hljs-attr">AList</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]
<span class="hljs-attr">BSet</span> = {<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>}
</code></pre>
<p>(1) 从 AList 和 BSet 中 查找 4，最坏时间复杂度哪个大？
(2) 从 AList 和 BSet 中 插入 4，最坏时间复杂度哪个大？</p>
<p><strong>答：</strong>
(1) 对于查找，列表和集合的最坏时间复杂度都是 O(n)，所以一样的。
(2) 列表操作插入的最坏时间复杂度为 o(n),集合为 o(1)，所以 Alist 大。
set 是哈希表所以操作的复杂度基本上都是 o(1)。</p>
<h4 id="123python">123. 用 Python 实现一个二分查找的函数</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs php">def binary_search(arr, target)：
    n = len(arr)
    left = <span class="hljs-number">0</span>
    right = n<span class="hljs-number">-1</span>
    <span class="hljs-keyword">while</span> left &lt;= right ：
        mid = (left + right)<span class="hljs-comment">//2</span>
        <span class="hljs-keyword">if</span> arr[mid] &lt; target：
            left = mid + <span class="hljs-number">1</span>
        elif arr[mid] &gt; target：
            right = mid - <span class="hljs-number">1</span>  
        <span class="hljs-keyword">else</span>： 
            <span class="hljs-keyword">print</span>(f<span class="hljs-string">"index：{mid},value：{arr[mid]}"</span>)
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span>

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>：
     l = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]
     binary_search(l,<span class="hljs-number">8</span>)   
</code></pre>
<h4 id="124python">124. Python 单例模式的实现方法</h4>
<p><strong>答：</strong>实现单例模式的方法有多种，之前再说元类的时候用 call 方法实现了一个单例模式，另外 Python 的模块就是一个天然的单例模式，这里我们使用 new 关键字来实现一个单例模式。</p>
<pre><code class="hljs ruby"><span class="hljs-string">""</span><span class="hljs-string">"
通过 new 函数实现简单的单例模式。
"</span><span class="hljs-string">""</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span>：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span><span class="hljs-params">(cls, title)</span></span>：
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hasattr(cls, <span class="hljs-string">"_ins"</span>)：
            cls._ins = <span class="hljs-keyword">super</span>().__new_<span class="hljs-number">_</span>(cls)
        print(<span class="hljs-string">'in __new__'</span>)
        <span class="hljs-keyword">return</span> cls._ins

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, title)</span></span>：
        print(<span class="hljs-string">'in __init__'</span>)
        <span class="hljs-keyword">super</span>().__init_<span class="hljs-number">_</span>()
        <span class="hljs-keyword">self</span>.title = title


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    b = Book(<span class="hljs-string">'The Spider Book'</span>)
    b2 = Book(<span class="hljs-string">'The Flask Book'</span>)
    print(id(b))
    print(id(b2))
    print(b.title)
    print(b2.title)
</code></pre>
<h4 id="125python">125. 使用 Python 实现一个斐波那契数列</h4>
<p><strong>答：</strong>
斐波那契数列：数列从第 3 项开始，每一项都等于前两项之和。</p>
<pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">(num)</span></span>：
    <span class="hljs-string">""</span><span class="hljs-string">"
    获取指定位数的列表
    ：param num：
    ：return：
    "</span><span class="hljs-string">""</span>
    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>
    l = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num)：
        a, b = b, a + b
        l.append(b)
    <span class="hljs-keyword">return</span> l


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    print(fibonacci(<span class="hljs-number">10</span>))
</code></pre>
<h4 id="126">126. 找出列表中的重复数字</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs python"><span class="hljs-string">"""
从头扫到尾，只要当前元素值与下标不同，就做一次判断,numbers[i]与 numbers[numbers[i]]，
相等就认为找到了重复元素，返回 true,否则就交换两者，继续循环。直到最后还没找到认为没找到重复元素。
"""</span>


<span class="hljs-comment"># -*- coding：utf-8 -*-</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">duplicate</span><span class="hljs-params">(self, numbers)</span>:</span>
        <span class="hljs-string">"""

        :param numbers:
        :return:
        """</span>
        <span class="hljs-keyword">if</span> numbers <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(numbers) &lt;= <span class="hljs-number">1</span>:
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span>
        use_set = set()
        duplication = {}
        <span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> enumerate(numbers):
            <span class="hljs-keyword">if</span> value <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> use_set:
                use_set.add(value)
            <span class="hljs-keyword">else</span>:
                duplication[index] = value
        <span class="hljs-keyword">return</span> duplication


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    s = Solution()
    d = s.duplicate([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">95</span>, <span class="hljs-number">95</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>])
    print(d)
</code></pre>
<h4 id="127">127. 找出列表中的单个数字</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_single</span><span class="hljs-params">(l ：list)</span></span>：
    result = <span class="hljs-number">0</span>
    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> l：
        result ^= v
    <span class="hljs-keyword">if</span> result == <span class="hljs-number">0</span>：
        print(<span class="hljs-string">"没有落单元素"</span>)    
    <span class="hljs-keyword">else</span>：
        print(<span class="hljs-string">"落单元素"</span> ,result)

<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    l = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]
    find_single(l)        
</code></pre>
<h4 id="128">128. 写一个冒泡排序</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs ruby"><span class="hljs-string">""</span><span class="hljs-string">"
冒泡排序
"</span><span class="hljs-string">""</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(arr)</span></span>：
    n = len(arr)
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n - <span class="hljs-number">1</span>)：
        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(n - i - <span class="hljs-number">1</span>)：
            <span class="hljs-keyword">if</span> arr[j] &gt; arr[j + <span class="hljs-number">1</span>]：
                arr[j], arr[j + <span class="hljs-number">1</span>] = arr[j + <span class="hljs-number">1</span>], arr[j]


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    l = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]
    bubble_sort(l)
    print(l)
</code></pre>
<h4 id="129">129. 写一个快速排序</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs perl"><span class="hljs-string">""</span><span class="hljs-string">"
快速排序
"</span><span class="hljs-string">""</span>


def quick_sort(arr, first, <span class="hljs-keyword">last</span>)：
    <span class="hljs-keyword">if</span> first &gt;= <span class="hljs-keyword">last</span>：
        <span class="hljs-keyword">return</span>
    mid_value = arr[first]
    low = first
    high = <span class="hljs-keyword">last</span>

    <span class="hljs-keyword">while</span> low &lt; high：
        <span class="hljs-keyword">while</span> low &lt; high <span class="hljs-keyword">and</span> arr[high] &gt;= mid_value：
            high -= <span class="hljs-number">1</span>  <span class="hljs-comment"># 游标左移</span>
        arr[low] = arr[high]

        <span class="hljs-keyword">while</span> low &lt; high <span class="hljs-keyword">and</span> arr[low] &lt; mid_value：
            low += <span class="hljs-number">1</span>
        arr[high] = arr[low]
        arr[low] = mid_value

    quick_sort(arr, first, low - <span class="hljs-number">1</span>)
    quick_sort(arr, low + <span class="hljs-number">1</span>, <span class="hljs-keyword">last</span>)


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    l = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]
    quick_sort(l, <span class="hljs-number">0</span>, len(l) - <span class="hljs-number">1</span>)
    <span class="hljs-keyword">print</span>(l)
</code></pre>
<h4 id="130">130. 写一个拓扑排序</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs ruby"><span class="hljs-string">""</span><span class="hljs-string">"
拓扑排序
对应于该图的拓扑排序。每一个有向无环图都至少存在一种拓扑排序。

"</span><span class="hljs-string">""</span>
import pysnooper
from typing import Mapping


@pysnooper.snoop()
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">topological_sort</span><span class="hljs-params">(graph： Mapping)</span></span>：
    <span class="hljs-comment"># in_degrees = {'a'： 0, 'b'： 0, 'c'： 0, 'd'： 0, 'e'： 0, 'f'： 0}</span>
    in_degrees = dict((u, <span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> graph)
    <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> graph：
        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> graph[u]：  <span class="hljs-comment"># 根据键找出值也就是下级节点</span>
            in_degrees[v] += <span class="hljs-number">1</span>  <span class="hljs-comment"># 对获取到的下级节点的入度加 1</span>
    <span class="hljs-comment"># 循环结束之后的结果： {'a'： 0, 'b'： 1, 'c'： 1, 'd'： 2, 'e'： 1, 'f'： 4}</span>
    Q = [u <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> graph <span class="hljs-keyword">if</span> in_degrees[u] == <span class="hljs-number">0</span>]  <span class="hljs-comment"># 入度为 0 的节点</span>
    in_degrees_zero = []
    <span class="hljs-keyword">while</span> Q：
        u = Q.pop()  <span class="hljs-comment"># 默认从最后一个移除</span>
        in_degrees_zero.append(u)  <span class="hljs-comment"># 存储入度为 0 的节点</span>
        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> graph[u]：
            in_degrees[v] -= <span class="hljs-number">1</span>  <span class="hljs-comment"># 删除入度为 0 的节点，以及移除其指向</span>
            <span class="hljs-keyword">if</span> in_degrees[v] == <span class="hljs-number">0</span>：
                Q.append(v)
    <span class="hljs-keyword">return</span> in_degrees_zero


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    <span class="hljs-comment"># 用字典的键值表示图的节点之间的关系，键当前节点。值是后续节点。</span>
    graph_dict = {
        <span class="hljs-string">'a'</span>： <span class="hljs-string">'bf'</span>,  <span class="hljs-comment"># 表示 a 指向 b 和 f</span>
        <span class="hljs-string">'b'</span>： <span class="hljs-string">'cdf'</span>,
        <span class="hljs-string">'c'</span>： <span class="hljs-string">'d'</span>,
        <span class="hljs-string">'d'</span>： <span class="hljs-string">'ef'</span>,
        <span class="hljs-string">'e'</span>： <span class="hljs-string">'f'</span>,
        <span class="hljs-string">'f'</span>： <span class="hljs-string">''</span>
    }

    t = topological_sort(graph_dict)
    print(t)
</code></pre>
<h4 id="131python">131. Python 实现一个二进制计算</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs perl"><span class="hljs-string">""</span><span class="hljs-string">"
二进制加法
"</span><span class="hljs-string">""</span>
def binary_add(a： str, b： str)：
    <span class="hljs-keyword">return</span> bin(<span class="hljs-keyword">int</span>(a, <span class="hljs-number">2</span>) + <span class="hljs-keyword">int</span>(b, <span class="hljs-number">2</span>))[<span class="hljs-number">2</span>：]


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    num1 = input(<span class="hljs-string">"输入第一个数，二进制格式：\n"</span>)
    num2 = input(<span class="hljs-string">"输入第二个数，二进制格式：\n"</span>)
    <span class="hljs-keyword">print</span>(binary_add(num1, num2))
</code></pre>
<h4 id="132">132. 有一组“+”和“-”符号，要求将“+”排到左边，“-”排到右边，写出具体的实现方法。</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs ruby"><span class="hljs-string">""</span><span class="hljs-string">"
有一组“+”和“-”符号，要求将“+”排到左边，“-”排到右边，写出具体的实现方法。

如果让+等于 0，-等于 1 不就是排序了么。
"</span><span class="hljs-string">""</span>
from collections import deque
from timeit import Timer

s = <span class="hljs-string">"++++++----+++----"</span>


<span class="hljs-comment"># 方法一</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span>：
    new_s = s.replace(<span class="hljs-string">"+"</span>, <span class="hljs-string">"0"</span>).replace(<span class="hljs-string">"-"</span>, <span class="hljs-string">"1"</span>)
    result = <span class="hljs-string">""</span>.join(sorted(new_s)).replace(<span class="hljs-string">"0"</span>, <span class="hljs-string">"+"</span>).replace(<span class="hljs-string">"1"</span>, <span class="hljs-string">"-"</span>)
    <span class="hljs-keyword">return</span> result


<span class="hljs-comment"># 方法二</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span>：
    q = deque()
    left = q.appendleft
    right = q.append
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s：
        <span class="hljs-keyword">if</span> i == <span class="hljs-string">"+"</span>：
            left(<span class="hljs-string">"+"</span>)
        elif i == <span class="hljs-string">"-"</span>：
            right(<span class="hljs-string">"-"</span>)


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func3</span><span class="hljs-params">()</span></span>：
    data = list(s)
    start_index = <span class="hljs-number">0</span>
    end_index = <span class="hljs-number">0</span>
    count = len(s)
    <span class="hljs-keyword">while</span> start_index + end_index &lt; count：
        <span class="hljs-keyword">if</span> data[start_index] == <span class="hljs-string">'-'</span>：
            data[start_index], data[count - end_index - <span class="hljs-number">1</span>] = data[count - end_index - <span class="hljs-number">1</span>], data[start_index]
            end_index += <span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>：
            start_index += <span class="hljs-number">1</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>.join(data)


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    timer1 = Timer(<span class="hljs-string">"func1()"</span>, <span class="hljs-string">"from __main__ import func1"</span>)
    print(<span class="hljs-string">"func1"</span>, timer1.timeit(<span class="hljs-number">1000000</span>))
    timer2 = Timer(<span class="hljs-string">"func2()"</span>, <span class="hljs-string">"from __main__ import func2"</span>)
    print(<span class="hljs-string">"func2"</span>, timer2.timeit(<span class="hljs-number">1000000</span>))
    timer3 = Timer(<span class="hljs-string">"func3()"</span>, <span class="hljs-string">"from __main__ import func3"</span>)
    print(<span class="hljs-string">"func3"</span>, timer3.timeit(<span class="hljs-number">1000000</span>))

<span class="hljs-comment"># 1000000 测试结果</span>
<span class="hljs-comment"># func1 1.39003764</span>
<span class="hljs-comment"># func2 1.593012875</span>
<span class="hljs-comment"># func3 3.3487415590000005</span>
<span class="hljs-comment"># func1 的方式最优，其次是 func2</span>
</code></pre>
<h4 id="133">133. 单链表反转</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs ruby"><span class="hljs-string">""</span><span class="hljs-string">"
单链表反转
"</span><span class="hljs-string">""</span>


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, val=None)</span></span>：
        <span class="hljs-keyword">self</span>.val = val
        <span class="hljs-keyword">self</span>.<span class="hljs-keyword">next</span> = None


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkList</span>：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, head=None)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"链表的头部"</span><span class="hljs-string">""</span>
        <span class="hljs-keyword">self</span>._head = head

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, val： int)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        给链表添加元素
        ：param val： 传过来的数字
        ：return：
        "</span><span class="hljs-string">""</span>
        <span class="hljs-comment"># 创建一个节点</span>
        node = Node(val)
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>._head is None：
            <span class="hljs-keyword">self</span>._head = node
        <span class="hljs-keyword">else</span>：
            cur = <span class="hljs-keyword">self</span>._head
            <span class="hljs-keyword">while</span> cur.<span class="hljs-keyword">next</span> is <span class="hljs-keyword">not</span> None：
                cur = cur.<span class="hljs-keyword">next</span>  <span class="hljs-comment"># 移动游标</span>
            cur.<span class="hljs-keyword">next</span> = node  <span class="hljs-comment"># 如果 next 后面没了证明以及到最后一个节点了</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">traversal</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>._head is None：
            <span class="hljs-keyword">return</span>
        <span class="hljs-keyword">else</span>：
            cur = <span class="hljs-keyword">self</span>._head
            <span class="hljs-keyword">while</span> cur is <span class="hljs-keyword">not</span> None：
                print(cur.val)
                cur = cur.<span class="hljs-keyword">next</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">size</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        获取链表的大小
        ：return：
        "</span><span class="hljs-string">""</span>
        count = <span class="hljs-number">0</span>
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>._head is None：
            <span class="hljs-keyword">return</span> count
        <span class="hljs-keyword">else</span>：
            cur = <span class="hljs-keyword">self</span>._head
            <span class="hljs-keyword">while</span> cur is <span class="hljs-keyword">not</span> None：
                count += <span class="hljs-number">1</span>
                cur = cur.<span class="hljs-keyword">next</span>
            <span class="hljs-keyword">return</span> count

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        单链表反转
        思路：
        让 cur.next 先断开即指向 none，指向设定 pre 游标指向断开的元素，然后
        cur.next 指向断开的元素，再把开始 self._head 再最后一个元素的时候.
        ：return：
        "</span><span class="hljs-string">""</span>
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>._head is None <span class="hljs-keyword">or</span> <span class="hljs-keyword">self</span>.size() == <span class="hljs-number">1</span>：
            <span class="hljs-keyword">return</span>
        <span class="hljs-keyword">else</span>：
            pre = None
            cur = <span class="hljs-keyword">self</span>._head
            <span class="hljs-keyword">while</span> cur is <span class="hljs-keyword">not</span> None：
                post = cur.<span class="hljs-keyword">next</span>
                cur.<span class="hljs-keyword">next</span> = pre
                pre = cur
                cur = post
            <span class="hljs-keyword">self</span>._head = pre  <span class="hljs-comment"># 逆向后的头节点</span>


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    single_link = SingleLinkList()
    single_link.add(<span class="hljs-number">3</span>)
    single_link.add(<span class="hljs-number">5</span>)
    single_link.add(<span class="hljs-number">6</span>)
    single_link.add(<span class="hljs-number">7</span>)
    single_link.add(<span class="hljs-number">8</span>)
    print(<span class="hljs-string">"对链表进行遍历"</span>)
    single_link.traversal()
    print(f<span class="hljs-string">"size：{single_link.size()}"</span>)
    print(<span class="hljs-string">"对链表进行逆向操作之后"</span>)
    single_link.reverse()
    single_link.traversal()
</code></pre>
<h4 id="134">134. 交叉链表求交点</h4>
<p><strong>答</strong>：</p>
<pre><code class="hljs ruby"><span class="hljs-comment"># Definition for singly-linked list.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, x)</span></span>：
        <span class="hljs-keyword">self</span>.val = x
        <span class="hljs-keyword">self</span>.<span class="hljs-keyword">next</span> = None


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, headA, headB)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        ：tye head1, head1： ListNode
        ：rtye： ListNode
        "</span><span class="hljs-string">""</span>
        <span class="hljs-keyword">if</span> headA is <span class="hljs-keyword">not</span> None <span class="hljs-keyword">and</span> headB is <span class="hljs-keyword">not</span> None：
            cur1, cur2 = headA, headB

            <span class="hljs-keyword">while</span> cur1 != cur2：
                cur1 = cur1.<span class="hljs-keyword">next</span> <span class="hljs-keyword">if</span> cur1 is <span class="hljs-keyword">not</span> None <span class="hljs-keyword">else</span> headA
                cur2 = cur2.<span class="hljs-keyword">next</span> <span class="hljs-keyword">if</span> cur2 is <span class="hljs-keyword">not</span> None <span class="hljs-keyword">else</span> headB

            <span class="hljs-keyword">return</span> cur1
</code></pre>
<p>cur1、cur2，2 个指针的初始位置是链表 headA、headB 头结点，cur1、cur2 两个指针一直往后遍历。
直到 cur1 指针走到链表的末尾，然后 cur1 指向 headB；
直到 cur2 指针走到链表的末尾，然后 cur2 指向 headA；
然后再继续遍历；
每次 cur1、cur2 指向 None，则将 cur1、cur2 分别指向 headB、headA。
循环的次数越多，cur1、cur2 的距离越接近，直到 cur1 等于 cur2。则是两个链表的相交点。</p>
<h4 id="135">135. 用队列实现栈</h4>
<p><strong>答</strong>：
下面代码分别使用 1 个队列和 2 个队列实现了栈。</p>
<pre><code class="hljs ruby">from queue import Queue

<span class="hljs-comment">#使用 2 个队列实现</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span>：</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        Initialize your data structure here.
        "</span><span class="hljs-string">""</span>
        <span class="hljs-comment"># q1 作为进栈出栈，q2 作为中转站</span>
        <span class="hljs-keyword">self</span>.q1 = Queue()
        <span class="hljs-keyword">self</span>.q2 = Queue()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, x)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        Push element x onto stack.
        ：type x： int
        ：rtype： void
        "</span><span class="hljs-string">""</span>
        <span class="hljs-keyword">self</span>.q1.put(x)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        Removes the element on top of the stack and returns that element.
        ：rtype： int
        "</span><span class="hljs-string">""</span>

        <span class="hljs-keyword">while</span> <span class="hljs-keyword">self</span>.q1.qsize() &gt; <span class="hljs-number">1</span>：
            <span class="hljs-keyword">self</span>.q2.put(<span class="hljs-keyword">self</span>.q1.get())  <span class="hljs-comment"># 将 q1 中除尾元素外的所有元素转到 q2 中</span>
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.q1.qsize() == <span class="hljs-number">1</span>：
            res = <span class="hljs-keyword">self</span>.q1.get()  <span class="hljs-comment"># 弹出 q1 的最后一个元素</span>
            <span class="hljs-keyword">self</span>.q1, <span class="hljs-keyword">self</span>.q2 = <span class="hljs-keyword">self</span>.q2, <span class="hljs-keyword">self</span>.q1  <span class="hljs-comment"># 交换 q1,q2</span>
            <span class="hljs-keyword">return</span> res

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        Get the top element.
        ：rtype： int
        "</span><span class="hljs-string">""</span>
        <span class="hljs-keyword">while</span> <span class="hljs-keyword">self</span>.q1.qsize() &gt; <span class="hljs-number">1</span>：
            <span class="hljs-keyword">self</span>.q2.put(<span class="hljs-keyword">self</span>.q1.get())  <span class="hljs-comment"># 将 q1 中除尾元素外的所有元素转到 q2 中</span>
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.q1.qsize() == <span class="hljs-number">1</span>：
            res = <span class="hljs-keyword">self</span>.q1.get()  <span class="hljs-comment"># 弹出 q1 的最后一个元素</span>
            <span class="hljs-keyword">self</span>.q2.put(res)  <span class="hljs-comment"># 与 pop 唯一不同的是需要将 q1 最后一个元素保存到 q2 中</span>
            <span class="hljs-keyword">self</span>.q1, <span class="hljs-keyword">self</span>.q2 = <span class="hljs-keyword">self</span>.q2, <span class="hljs-keyword">self</span>.q1  <span class="hljs-comment"># 交换 q1,q2</span>
            <span class="hljs-keyword">return</span> res

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        Returns whether the stack is empty.
        ：rtype： bool
        "</span><span class="hljs-string">""</span>
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> bool(<span class="hljs-keyword">self</span>.q1.qsize() + <span class="hljs-keyword">self</span>.q2.qsize())  <span class="hljs-comment"># 为空返回 True，不为空返回 False</span>


<span class="hljs-comment">#使用 1 个队列实现</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack2</span>(<span class="hljs-title">object</span>)：</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        Initialize your data structure here.
        "</span><span class="hljs-string">""</span>
        <span class="hljs-keyword">self</span>.sq1 = Queue()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, x)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        Push element x onto stack.
        ：type x： int
        ：rtype： void
        "</span><span class="hljs-string">""</span>
        <span class="hljs-keyword">self</span>.sq1.put(x)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        Removes the element on top of the stack and returns that element.
        ：rtype： int
        "</span><span class="hljs-string">""</span>
        count = <span class="hljs-keyword">self</span>.sq1.qsize()
        <span class="hljs-keyword">if</span> count == <span class="hljs-number">0</span>：
            <span class="hljs-keyword">return</span> False
        <span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">1</span>：
            x = <span class="hljs-keyword">self</span>.sq1.get()
            <span class="hljs-keyword">self</span>.sq1.put(x)
            count -= <span class="hljs-number">1</span>
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.sq1.get()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        Get the top element.
        ：rtype： int
        "</span><span class="hljs-string">""</span>
        count = <span class="hljs-keyword">self</span>.sq1.qsize()
        <span class="hljs-keyword">if</span> count == <span class="hljs-number">0</span>：
            <span class="hljs-keyword">return</span> False
        <span class="hljs-keyword">while</span> count：
            x = <span class="hljs-keyword">self</span>.sq1.get()
            <span class="hljs-keyword">self</span>.sq1.put(x)
            count -= <span class="hljs-number">1</span>
        <span class="hljs-keyword">return</span> x

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        Returns whether the stack is empty.
        ：rtype： bool
        "</span><span class="hljs-string">""</span>
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.sq1.empty()


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    obj = MyStack2()
    obj.push(<span class="hljs-number">1</span>)
    obj.push(<span class="hljs-number">3</span>)
    obj.push(<span class="hljs-number">4</span>)
    print(obj.pop())
    print(obj.pop())
    print(obj.pop())
    print(obj.empty())
</code></pre>
<h4 id="136">136. 找出数据流的中位数</h4>
<p><strong>答</strong>：对于一个升序排序的数组，中位数为左半部分的最大值，右半部分的最小值，而左右两部分可以是无需的，只要保证左半部分的数均小于右半部分即可。因此，左右两半部分分别可用最大堆、最小堆实现。</p>
<p>如果有奇数个数，则中位数放在左半部分；如果有偶数个数，则取左半部分的最大值、右边部分的最小值之平均值。</p>
<p>分两种情况讨论：
当目前有偶数个数字时，数字先插入最小堆，然后选择最小堆的最小值插入最大堆（第一个数字插入左半部分的最小堆）。</p>
<p>当目前有奇数个数字时，数字先插入最大堆，然后选择最大堆的最大值插入最小堆。
最大堆：根结点的键值是所有堆结点键值中最大者，且每个结点的值都比其孩子的值大。
最小堆：根结点的键值是所有堆结点键值中最小者，且每个结点的值都比其孩子的值小。</p>
<pre><code class="hljs ruby"><span class="hljs-comment"># -*- coding：utf-8 -*-</span>
from heapq import *


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span>：
        <span class="hljs-keyword">self</span>.maxheap = []
        <span class="hljs-keyword">self</span>.minheap = []

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, num)</span></span>：
        <span class="hljs-keyword">if</span> (len(<span class="hljs-keyword">self</span>.maxheap) + len(<span class="hljs-keyword">self</span>.minheap)) &amp; <span class="hljs-number">0x1</span>：  <span class="hljs-comment"># 总数为奇数插入最大堆</span>
            <span class="hljs-keyword">if</span> len(<span class="hljs-keyword">self</span>.minheap) &gt; <span class="hljs-number">0</span>：
                <span class="hljs-keyword">if</span> num &gt; <span class="hljs-keyword">self</span>.minheap[<span class="hljs-number">0</span>]：  <span class="hljs-comment"># 大于最小堆里的元素</span>
                    heappush(<span class="hljs-keyword">self</span>.minheap, num)  <span class="hljs-comment"># 新数据插入最小堆</span>
                    heappush(<span class="hljs-keyword">self</span>.maxheap, -<span class="hljs-keyword">self</span>.minheap[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 最小堆中的最小插入最大堆</span>
                    heappop(<span class="hljs-keyword">self</span>.minheap)
                <span class="hljs-keyword">else</span>：
                    heappush(<span class="hljs-keyword">self</span>.maxheap, -num)
            <span class="hljs-keyword">else</span>：
                heappush(<span class="hljs-keyword">self</span>.maxheap, -num)
        <span class="hljs-keyword">else</span>：  <span class="hljs-comment"># 总数为偶数 插入最小堆</span>
            <span class="hljs-keyword">if</span> len(<span class="hljs-keyword">self</span>.maxheap) &gt; <span class="hljs-number">0</span>：  <span class="hljs-comment"># 小于最大堆里的元素</span>
                <span class="hljs-keyword">if</span> num &lt; -<span class="hljs-keyword">self</span>.maxheap[<span class="hljs-number">0</span>]：
                    heappush(<span class="hljs-keyword">self</span>.maxheap, -num)  <span class="hljs-comment"># 新数据插入最大堆</span>
                    heappush(<span class="hljs-keyword">self</span>.minheap, -<span class="hljs-keyword">self</span>.maxheap[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 最大堆中的最大元素插入最小堆</span>
                    heappop(<span class="hljs-keyword">self</span>.maxheap)
                <span class="hljs-keyword">else</span>：
                    heappush(<span class="hljs-keyword">self</span>.minheap, num)
            <span class="hljs-keyword">else</span>：
                heappush(<span class="hljs-keyword">self</span>.minheap, num)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetMedian</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, n=None)</span></span>：
        <span class="hljs-keyword">if</span> (len(<span class="hljs-keyword">self</span>.maxheap) + len(<span class="hljs-keyword">self</span>.minheap)) &amp; <span class="hljs-number">0x1</span>：
            mid = <span class="hljs-keyword">self</span>.minheap[<span class="hljs-number">0</span>]
        <span class="hljs-keyword">else</span>：
            mid = (<span class="hljs-keyword">self</span>.minheap[<span class="hljs-number">0</span>] - <span class="hljs-keyword">self</span>.maxheap[<span class="hljs-number">0</span>]) / <span class="hljs-number">2.0</span>
        <span class="hljs-keyword">return</span> mid


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    s = Solution()
    s.Insert(<span class="hljs-number">1</span>)
    s.Insert(<span class="hljs-number">2</span>)
    s.Insert(<span class="hljs-number">3</span>)
    s.Insert(<span class="hljs-number">4</span>)
    print(s.GetMedian())
</code></pre>
<h4 id="137k">137. 二叉搜索树中第 K 小的元素</h4>
<p><strong>答</strong>：
  二叉搜索树(Binary Search Tree)，又名二叉排序树(Binary Sort Tree)。
 
二叉搜索树是具有有以下性质的二叉树： </p>
<ol>
<li>若左子树不为空，则左子树上所有节点的值均小于或等于它的根节点的值。</li>
<li>若右子树不为空，则右子树上所有节点的值均大于或等于它的根节点的值。</li>
<li>左、右子树也分别为二叉搜索树。</li>
</ol>
<p>二叉搜索树按照中序遍历的顺序打印出来正好就是排序好的顺序。所以对其遍历一个节点就进行计数，计数达到 k 的时候就结束。</p>
<pre><code class="hljs ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>：</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, x)</span></span>：
        <span class="hljs-keyword">self</span>.val = x
        <span class="hljs-keyword">self</span>.left = None
        <span class="hljs-keyword">self</span>.right = None


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>：</span>
    count = <span class="hljs-number">0</span>
    nodeVal = <span class="hljs-number">0</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, root, k)</span></span>：
        <span class="hljs-string">""</span><span class="hljs-string">"
        ：type root： TreeNode
        ：type k： int
        ：rtype： int
        "</span><span class="hljs-string">""</span>
        <span class="hljs-keyword">self</span>.dfs(root, k)
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.nodeVal

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, node, k)</span></span>：
        <span class="hljs-keyword">if</span> node != None：
            <span class="hljs-keyword">self</span>.dfs(node.left, k)
            <span class="hljs-keyword">self</span>.count = <span class="hljs-keyword">self</span>.count + <span class="hljs-number">1</span>
            <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.count == k：
                <span class="hljs-keyword">self</span>.nodeVal = node.val
                <span class="hljs-comment"># 将该节点的左右子树置为 None,来结束递归，减少时间复杂度</span>
                node.left = None
                node.right = None
            <span class="hljs-keyword">self</span>.dfs(node.right, k)
</code></pre>
<h3 id="-11">爬虫相关</h3>
<h4 id="138requestsrequestscontentrequeststext">138. 在 requests 模块中，requests.content 和 requests.text 什么区别</h4>
<p><strong>答：</strong>
requests.content 获取的是字节，requests.text 获取的是文本内容。</p>
<h4 id="139lxml">139. 简要写一下 lxml 模块的使用方法框架</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs makefile">from lxml import html
source='''
&lt;div class=<span class="hljs-string">"nam"</span>&gt;&lt;span&gt;中国&lt;/span&gt;&lt;/div&gt;
root=html.fromstring(source)
_content=root.xpath(<span class="hljs-string">"string(//div[@class='nam'])"</span>)

if _content and isinstance(_content,list)：
    content=_content[0] 
elif isinstance(_content,str)：
    content=_content    
print(content)
</code></pre>
<h4 id="140scrapy">140. 说一说 scrapy 的工作流程</h4>
<p><strong>答：</strong></p>
<p>首先还是先看张图</p>
<p><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/47a53040-8bf4-11e9-86b6-1bdaa75635da" alt="enter image description here"></p>
<p>已 www.baidu.com 为例：
首先需要知道的事各个模块之间调用都是通过引擎进行的。</p>
<ol>
<li>spider 把百度需要下载的第一个 url：www.baidu.com 交给引擎。</li>
<li>引擎把 url 交给调度器排序入队处理。</li>
<li>调度器把处理好的 request 返回给引擎。</li>
<li>通过引擎调动下载器，按照下载中间件的设置下载这个 request。</li>
<li>下载器下载完毕结果返回给引擎（如果失败：不好意思，这个 request 下载失败，然后引擎告诉调度器，这个 request 下载失败了，你记录一下，我们待会儿再下载。）</li>
<li>引擎调度 spider，把按照 Spider 中间件处理过了的请求，交给 spider 处理。</li>
<li>spider 把处理好的 url 和 item 传给引擎。</li>
<li>引擎根据不同的类型调度不同的模块，调度 Item Pipeline 处理 item。</li>
<li>把 url 交给调度器。
然后从第 4 步开始循环，直到获取到你需要的信息，</li>
</ol>
<p>注意！只有当调度器中不存在任何 request 了，整个程序才会停止。</p>
<h4 id="141scrapy">141. scrapy 的去重原理</h4>
<p><strong>答：</strong>scrapy 本身自带一个去重中间件，scrapy 源码中可以找到一个 dupefilters.py 去重器。里面有个方法叫做 request_seen，它在 scheduler(发起请求的第一时间)的时候被调用。它代码里面调用了 request_fingerprint 方法（就是给 request 生成一个指纹）。</p>
<p>就是给每一个传递过来的 url 生成一个固定长度的唯一的哈希值。但是这种量级千万到亿的级别内存是可以应付的。</p>
<h4 id="142scrapy">142. scrapy 中间件有几种类，你用过哪些中间件</h4>
<p><strong>答：</strong>
scrapy 的中间件理论上有三种(Schduler Middleware,Spider Middleware,Downloader Middleware)。在应用上一般有以下两种</p>
<ol>
<li>爬虫中间件 Spider Middleware：主要功能是在爬虫运行过程中进行一些处理。</li>
<li>下载器中间件 Downloader Middleware：这个中间件可以实现修改 User-Agent 等 headers 信息，处理重定向，设置代理，失败重试，设置 cookies 等功能。</li>
</ol>
<h4 id="143">143. 你写爬虫的时候都遇到过什么？反爬虫措施，你是怎么解决的？</h4>
<p><strong>答：</strong></p>
<ul>
<li><p>Headers：
从用户的 headers 进行反爬是最常见的反爬虫策略。Headers 是一种区分浏览器行为和机器行为中最简单的方法，还有一些网站会对 Referer （上级链接）进行检测（机器行为不太可能通过链接跳转实现）从而实现爬虫。
相应的解决措施：通过审查元素或者开发者工具获取相应的 headers 然后把相应的 headers 传输给 Python 的 requests，这样就能很好地绕过。</p></li>
<li><p>IP 限制
一些网站会根据你的 IP 地址访问的频率，次数进行反爬。也就是说如果你用单一的 IP 地址访问频率过高，那么服务器会在短时间内禁止这个 IP 访问。</p></li>
</ul>
<p>解决措施：构造自己的 IP 代理池，然后每次访问时随机选择代理（但一些 IP 地址不是非常稳定，需要经常检查更新）。</p>
<ul>
<li>UA 限制
UA 是用户访问网站时候的浏览器标识，其反爬机制与 ip 限制类似。</li>
</ul>
<p>解决措施：使用随机 UA</p>
<ul>
<li>验证码反爬虫或者模拟登陆
验证码：这个办法也是相当古老并且相当的有效果，如果一个爬虫要解释一个验证码中的内容，这在以前通过简单的图像识别是可以完成的，但是就现在来讲，验证码的干扰线，噪点都很多，甚至还出现了人类都难以认识的验证码。</li>
</ul>
<p>相应的解决措施：验证码识别的基本方法：截图，二值化、中值滤波去噪、分割、紧缩重排（让高矮统一）、字库特征匹配识别。（Python 的 PIL 库或者其他），复杂的情况需求接入打码平台。</p>
<ul>
<li>Ajax 动态加载
网页的不希望被爬虫拿到的数据使用 Ajax 动态加载，这样就为爬虫造成了绝大的麻烦，如果一个爬虫不具备 js 引擎，或者具备 js 引擎，但是没有处理 js 返回的方案，或者是具备了 js 引擎，但是没办法让站点显示启用脚本设置。基于这些情况，ajax 动态加载反制爬虫还是相当有效的。</li>
</ul>
<p>Ajax 动态加载的工作原理是：从网页的 url 加载网页的源代码之后，会在浏览器里执行 JavaScript 程序。这些程序会加载出更多的内容，并把这些内容传输到网页中。这就是为什么有些网页直接爬它的 URL 时却没有数据的原因。</p>
<p>处理方法：找对应的 ajax 接口，一般数据返回类型为 json。</p>
<ul>
<li>cookie 限制
一次打开网页会生成一个随机 cookie，如果再次打开网页这个 cookie 不存在，那么再次设置，第三次打开仍然不存在，这就非常有可能是爬虫在工作了。</li>
</ul>
<p>解决措施：在 headers 挂上相应的 cookie 或者根据其方法进行构造（例如从中选取几个字母进行构造）。如果过于复杂，可以考虑使用 selenium 模块（可以完全模拟浏览器行为）。</p>
<h4 id="144">144. 为什么会用到代理？</h4>
<p><strong>答：</strong>如果使用同一个 ip 去不断的访问的网站的话,会很容易被封 ip，严重的永久封禁，导致当前的访问不了该网站。不只是通过程序，通过浏览器也无法访问。</p>
<h4 id="145">145. 代理失效了怎么处理？</h4>
<p><strong>答：</strong>一般通过大家代理池来实现代理切换等操作，来实现时时使用新的代理 ip，来避免代理失效的问题。</p>
<h4 id="146header">146. 列出你知道 header 的内容以及信息</h4>
<p><strong>答：</strong>
User-Agent：User-Agent 的内容包含发出请求的用户信息。
Accept：指定客户端能够接收的内容类型。
Accept-Encoding：指定浏览器可以支持的 web 服务器返回内容压缩编码类型。
Accept-Language：浏览器可接受的语言。
Connection：表示是否需要持久连接。（HTTP 1.1 默认进行持久连接）。
Content-Length：请求的内容长度。
If-Modified-Since：如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回 304 代码。
Referer：先前网页的地址，当前请求网页紧随其后，即来路。</p>
<h4 id="147wwwbaiducom">147. 说一说打开浏览器访问 www.baidu.com 获取到结果，整个流程。</h4>
<p><strong>答：</strong>
浏览器向 DNS 服务器发送 baidu.com 域名解析请求。
DNS 服务器返回解析后的 ip 给客户端浏览器，浏览器想该 ip 发送页面请求。
DNS 服务器接收到请求后，查询该页面，并将页面发送给客户端浏览器。
客户端浏览器接收到页面后，解析页面中的引用，并再次向服务器发送引用资源请求。
服务器接收到资源请求后，查找并返回资源给客户端。
客户端浏览器接收到资源后，渲染，输出页面展现给用户。</p>
<h4 id="148">148. 爬取速度过快出现了验证码怎么处理</h4>
<p><strong>答：</strong>一般在爬取过程中出现了验证码根据不同的情况，处理不一样。
如果在一开始访问就有验证码,那么就想办法绕开验证码,比如通过 wap 端或者 app 去发现其他接口等，如果不行就得破解验证码了，复杂验证码就需要接入第三方打码平台了。
如果开始的时候没有验证码，爬了一段时间才出现验证码，这个情况就要考虑更换代理 ip 了。
可能因为同一个访问频率高导致的。</p>
<h4 id="149scrapyscrapyredisredis">149. scrapy 和 scrapy-redis 有什么区别？为什么选择 redis 数据库？</h4>
<p><strong>答：</strong>
scrapy 是一个 Python 爬虫框架，爬取效率极高，具有高度定制性，但是不支持分布式。而 scrapy-redis 一套基于 redis 数据库、运行在 scrapy 框架之上的组件，可以让 scrapy 支持分布式策略，Slaver 端共享 Master 端 redis 数据库里的 item 队列、请求队列和请求指纹集合。</p>
<p>为什么选择 redis 数据库，因为 redis 支持主从同步，而且数据都是缓存在内存中的，所以基于 redis 的分布式爬虫，对请求和数据的高频读取效率非常高。</p>
<h4 id="150">150. 分布式爬虫主要解决什么问题</h4>
<p><strong>答：</strong>使用分布式主要目的就是为了给爬虫加速。解决了单个 ip 的限制，宽带的影响，以及 CPU 的使用情况和 io 等一系列操作</p>
<h4 id="151">151. 写爬虫是用多进程好？还是多线程好？ 为什么？</h4>
<p><strong>答：</strong>
多线程，因为爬虫是对网络操作属于 io 密集型操作适合使用多线程或者协程。</p>
<h4 id="152">152. 解析网页的解析器使用最多的是哪几个</h4>
<p><strong>答：</strong>lxml，pyquery</p>
<h4 id="153ipcookiesession">153. 需要登录的网页，如何解决同时限制 ip，cookie,session（其中有一些是动态生成的）在不使用动态爬取的情况下？</h4>
<p><strong>答：</strong>
解决限制 IP 可以搭建代理 IP 地址池、adsl 拨号使用等。</p>
<p>不适用动态爬取的情况下可以使用反编译 JS 文件获取相应的文件，或者换用其他平台（比如手机端）看看是否可以获取相应的 json 文件，一般要学会习惯性的先找需要爬取网站的 h5 端页面，看看有没有提供接口，进而简化操作。</p>
<h4 id="154">154. 验证码的解决?</h4>
<p><strong>答：</strong>
图形验证码：干扰、杂色不是特别多的图片可以使用开源库 Tesseract 进行识别，太过复杂的需要借助第三方打码平台。
点击和拖动滑块验证码可以借助 selenium、无图形界面浏览器（chromedirver 或者 phantomjs）和 pillow 包来模拟人的点击和滑动操作，pillow 可以根据色差识别需要滑动的位置。</p>
<h4 id="155mysqlmongodbredis">155. 使用最多的数据库（mysql，mongodb，redis 等），对他的理解？</h4>
<p><strong>答：</strong>
MySQL 数据库：开源免费的关系型数据库，需要实现创建数据库、数据表和表的字段，表与表之间可以进行关联（一对多、多对多），是持久化存储。</p>
<p>mongodb 数据库：是非关系型数据库，数据库的三元素是，数据库、集合、文档，可以进行持久化存储，也可作为内存数据库，存储数据不需要事先设定格式，数据以键值对的形式存储。</p>
<p>redis 数据库：非关系型数据库，使用前可以不用设置格式，以键值对的方式保存，文件格式相对自由，主要用与缓存数据库，也可以进行持久化存储。</p>
<h3 id="-12">网络编程</h3>
<h4 id="156tcpudp">156. TCP 和 UDP 的区别？</h4>
<p><strong>答：</strong>
UDP 是面向无连接的通讯协议，UDP 数据包括目的端口号和源端口号信息。</p>
<p>优点：UDP 速度快、操作简单、要求系统资源较少，由于通讯不需要连接，可以实现广播发送。</p>
<p>缺点：UDP 传送数据前并不与对方建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收，也不重复发送，不可靠。</p>
<p>TCP 是面向连接的通讯协议，通过三次握手建立连接，通讯完成时四次挥手。</p>
<p>优点：TCP 在数据传递时，有确认、窗口、重传、阻塞等控制机制，能保证数据正确性，较为可靠。</p>
<p>缺点：TCP 相对于 UDP 速度慢一点，要求系统资源较多。</p>
<h4 id="157">157. 简要介绍三次握手和四次挥手</h4>
<p><strong>答：</strong>
三次握手
第一次握手：主机 A 发送同步报文段（SYN）请求建立连接。
第二次握手：主机 B 听到连接请求，就将该连接放入内核等待队列当中，并向主机 A 发送针对 SYN 的确认 ACK，同时主机 B 也发送自己的请求建立连接（SYN）。
第三次握手：主机 A 针对主机 BSYN 的确认应答 ACK。</p>
<p>四次挥手
第一次挥手：当主机 A 发送数据完毕后，发送 FIN 结束报文段。
第二次挥手：主机 B 收到 FIN 报文段后，向主机 A 发送一个确认序号 ACK（为了防止在这段时间内，对方重传 FIN 报文段）。
第三次挥手：主机 B 准备关闭连接，向主机 A 发送一个 FIN 结束报文段。
第四次挥手：主机 A 收到 FIN 结束报文段后，进入 TIME_WAIT 状态。并向主机 B 发送一个 ACK 表示连接彻底释放。</p>
<p>除此之外经常看的问题还有，为什么 2、3 次挥手不能合在一次挥手中？
那是因为此时 A 虽然不再发送数据了，但是还可以接收数据，B 可能还有数据要发送给 A，所以两次挥手不能合并为一次。</p>
<h4 id="158socket">158. 什么是粘包？ socket 中造成粘包的原因是什么？ 哪些情况会发生粘包现象？</h4>
<p><strong>答：</strong>TCP 是流式协议，只有字节流，流是没有边界的，根部就不存在粘包一说，一般粘包都是业务上没处理好造成的。</p>
<p>但是在描述这个现象的时候，可能还得说粘包。TCP 粘包通俗来讲，就是发送方发送的多个数据包，到接收方后粘连在一起，导致数据包不能完整的体现发送的数据。</p>
<p>导致 TCP 粘包的原因，可能是发送方的原因，也有可能是接受方的原因。</p>
<p>发送方
由于 TCP 需要尽可能高效和可靠，所以 TCP 协议默认采用 Nagle 算法，以合并相连的小数据包，再一次性发送，以达到提升网络传输效率的目的。但是接收方并不知晓发送方合并数据包，而且数据包的合并在 TCP 协议中是没有分界线的，所以这就会导致接收方不能还原其本来的数据包。</p>
<p>接收方
TCP 是基于“流”的。网络传输数据的速度可能会快过接收方处理数据的速度，这时候就会导致，接收方在读取缓冲区时，缓冲区存在多个数据包。在 TCP 协议中接收方是一次读取缓冲区中的所有内容，所以不能反映原本的数据信息。</p>
<p>一般的解决方案大概下面几种：</p>
<ol>
<li>发送定长包。如果每个消息的大小都是一样的，那么在接收对等方只要累计接收数据，直到数据等于一个定长的数值就将它作为一个消息。</li>
<li>包尾加上\r\n 标记。FTP 协议正是这么做的。但问题在于如果数据正文中也含有\r\n，则会误判为消息的边界。</li>
<li>包头加上包体长度。包头是定长的 4 个字节，说明了包体的长度。接收对等方先接收包体长度，依据包体长度来接收包体。</li>
</ol>
<h3 id="-13">并发</h3>
<h4 id="159concurrentfuture">159. 举例说明 concurrent.future 的中线程池的用法</h4>
<p><strong>答：</strong></p>
<pre><code class="hljs coffeescript"><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor
<span class="hljs-keyword">import</span> requests
URLS = [<span class="hljs-string">'http：//www.163.com'</span>, <span class="hljs-string">'https：//www.baidu.com/'</span>, <span class="hljs-string">'https：//github.com/'</span>]
def load_url(url)：
        req= requests.get(url, timeout=<span class="hljs-number">60</span>)
        <span class="hljs-built_in">print</span>(f<span class="hljs-string">'{url} page is {len(req.content))} bytes'</span>)
with ThreadPoolExecutor(max_workers=<span class="hljs-number">3</span>) <span class="hljs-keyword">as</span> pool：
        pool.map(load_url,URLS)
<span class="hljs-built_in">print</span>(<span class="hljs-string">'主线程结束'</span>)
</code></pre>
<h4 id="160">160. 说一说多线程，多进程和协程的区别。</h4>
<p><strong>答</strong>：
概念：</p>
<p>进程：</p>
<pre><code class="hljs">进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,
进程是系统进行资源分配和调度的一个独立单位。每个进程都有自己的独立内存空间，
不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，
所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。
</code></pre>
<p>线程：</p>
<pre><code class="hljs">线程是进程的一个实体,是 CPU 调度和分派的基本单位,
它是比进程更小的能独立运行的基本单位.
线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),
但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。
线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。
</code></pre>
<p>协程：</p>
<pre><code class="hljs">协程是一种用户态的轻量级线程，协程的调度完全由用户控制。
协程拥有自己的寄存器上下文和栈。
协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，
直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。
</code></pre>
<p>区别：
进程与线程比较：
线程是指进程内的一个执行单元,也是进程内的可调度实体。线程与进程的区别：</p>
<pre><code class="hljs">1) 地址空间：线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，
而进程有自己独立的地址空间
2) 资源拥有：进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源
3) 线程是处理器调度的基本单位,但进程不是
4) 二者均可并发执行
5) 每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，
但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制
</code></pre>
<p>协程与线程进行比较：</p>
<pre><code class="hljs">1) 一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样 Python 中则能使用多核 CPU。
2) 线程进程都是同步机制，而协程则是异步
3) 协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态
</code></pre>
<h4 id="161gil">161. 简述 GIL</h4>
<p><strong>答</strong>：
GIL：全局解释器锁。每个线程在执行的过程都需要先获取 GIL，保证同一时刻只有一个线程可以执行代码。 </p>
<p>线程释放 GIL 锁的情况：在 IO 操作等可能会引起阻塞的 systemcall 之前,可以暂时释放 GIL，但在执行完毕后, 必须重新获取 GIL，Python3.x 使用计时器（执行时间达到阈值后，当前线程释放 GIL）或 Python2.x，tickets 计数达到 100 。</p>
<p>Python 使用多进程是可以利用多核的 CPU 资源的。 </p>
<p>多线程爬取比单线程性能有提升，因为遇到 IO 阻塞会自动释放 GIL 锁。</p>
<h4 id="162">162. 进程之间如何通信</h4>
<p><strong>答</strong>：
可以通过队列的形式，示例如下</p>
<pre><code class="hljs perl">from multiprocessing import Queue, Process
import <span class="hljs-keyword">time</span>, random

<span class="hljs-comment"># 要写入的数据</span>
list1 = [<span class="hljs-string">"java"</span>, <span class="hljs-string">"Python"</span>, <span class="hljs-string">"JavaScript"</span>]


def <span class="hljs-keyword">write</span>(queue)：
    <span class="hljs-string">""</span><span class="hljs-string">"
    向队列中添加数据
    ：param queue：
    ：return：
    "</span><span class="hljs-string">""</span>
    <span class="hljs-keyword">for</span> value in list1：
        <span class="hljs-keyword">print</span>(f<span class="hljs-string">"正在向队列中添加数据--&gt;{value}"</span>)
        <span class="hljs-comment"># put_nowait 不会等待队列有空闲位置再放入数据，如果数据放入不成功就直接崩溃,比如数据满了。put 的话就会一直等待</span>
        queue.put_nowait(value)
        time.sleep(random.random())


def <span class="hljs-keyword">read</span>(queue)：

    <span class="hljs-keyword">while</span> True：
        <span class="hljs-comment"># 判断队列是否为空</span>
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> queue.empty()：
            <span class="hljs-comment"># get_nowait 队列为空，取值的时候不等待，但是取不到值那么直接崩溃了</span>
            value = queue.get_nowait()
            <span class="hljs-keyword">print</span>(f<span class="hljs-string">'从队列中取到的数据为--&gt;{value}'</span>)
            time.sleep(random.random())
        <span class="hljs-keyword">else</span>：
            <span class="hljs-keyword">break</span>

<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    <span class="hljs-comment"># 父进程创建出队列，通过参数的形式传递给子进程</span>
    <span class="hljs-comment">#queue = Queue(2)</span>
    queue = Queue()

    <span class="hljs-comment"># 创建两个进程 一个写数据 一个读数据</span>
    write_data = Process(target=<span class="hljs-keyword">write</span>, args=(queue,))
    read_data = Process(target=<span class="hljs-keyword">read</span>, args=(queue,))

    <span class="hljs-comment"># 启动进程 写入数据</span>
    write_data.start()
    <span class="hljs-comment"># 使用 join 等待写数据结束</span>
    write_data.join()
    <span class="hljs-comment"># 启动进程  读取数据</span>
    <span class="hljs-keyword">print</span>(<span class="hljs-string">'*'</span> * <span class="hljs-number">20</span>)
    read_data.start()
    <span class="hljs-comment"># 使用 join  等待读数据结束</span>
    read_data.join()

    <span class="hljs-keyword">print</span>(<span class="hljs-string">'所有的数据都写入并读取完成。。。'</span>)
</code></pre>
<h4 id="163io">163. IO 多路复用的作用？</h4>
<p><strong>答</strong>：
阻塞 I/O 只能阻塞一个 I/O 操作，而 I/O 复用模型能够阻塞多个 I/O 操作，所以才叫做多路复用。</p>
<p>I/O 多路复用是用于提升效率，单个进程可以同时监听多个网络连接 IO。
在 IO 密集型的系统中， 相对于线程切换的开销问题，IO 多路复用可以极大的提升系统效率。</p>
<h4 id="164selectpollepoll">164. select、poll、epoll 模型的区别？</h4>
<p><strong>答</strong>：
select，poll，epoll 都是 IO 多路复用的机制。I/O 多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。</p>
<p>select 模型：
select 目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select 的一 个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在 Linux 上一般为 1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但 是这样也会造成效率的降低。</p>
<p>poll 模型：
poll 和 select 的实现非常类似，本质上的区别就是存放 fd 集合的数据结构不一样。select 在一个进程内可以维持最多 1024 个连接，poll 在此基础上做了加强，可以维持任意数量的连接。</p>
<p>但 select 和 poll 方式有一个很大的问题就是，我们不难看出来 select 是通过轮训的方式来查找是否可读或者可写，打个比方，如果同时有 100 万个连接都没有断开，而只有一个客户端发送了数据，所以这里它还是需要循环这么多次，造成资源浪费。所以后来出现了 epoll 系统调用。</p>
<p>epoll 模型：
epoll 是 select 和 poll 的增强版，epoll 同 poll 一样，文件描述符数量无限制。但是也并不是所有情况下 epoll 都比 select/poll 好，比如在如下场景：在大多数客户端都很活跃的情况下，系统会把所有的回调函数都唤醒，所以会导致负载较高。既然要处理这么多的连接，那倒不如 select 遍历简单有效。</p>
<h4 id="165">165. 什么是并发和并行？</h4>
<p><strong>答</strong>：“并行是指同一时刻同时做多件事情，而并发是指同一时间间隔内做多件事情”。</p>
<p>并发与并行是两个既相似而又不相同的概念：并发性，又称共行性，是指能处理多个同时性活动的能力；并行是指同时发生的两个并发事件，具有并发的含义，而并发则不一定并行，也亦是说并发事件之间不一定要同一时刻发生。</p>
<p>并发的实质是一个物理 CPU(也可以多个物理 CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。 并行性指两个或两个以上事件或活动在同一时刻发生。在多道程序环境下，并行性使多个程序同一时刻可在不同 CPU 上同时执行。</p>
<p>并行，是每个 CPU 运行一个程序。</p>
<h4 id="16612">166. 一个线程 1 让线程 2 去调用一个函数怎么实现</h4>
<p><strong>答</strong>：</p>
<pre><code class="hljs ruby">import threading


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span><span class="hljs-params">(t2)</span></span>：
    print(<span class="hljs-string">'正在执行函数func1'</span>)
    t2.start()


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span>：
    print(<span class="hljs-string">'正在执行函数func2'</span>)


<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">'__main__'</span>：
    t2 = threading.Thread(target=func2)
    t1 = threading.Thread(target=func1, args=(t2,))
    t1.start()
</code></pre>
<h4 id="167">167. 解释什么是异步非阻塞？</h4>
<p><strong>答</strong>：
异步
异步与同步相对，当一个异步过程调用发出后，调用者在没有得到结果之前，就可以继续执行后续操作。当这个调用完成后，一般通过状态、通知和回调来通知调用者。对于异步调用，调用的返回并不受调用者控制。</p>
<p>非阻塞
非阻塞是这样定义的，当线程遇到 I/O 操作时，不会以阻塞的方式等待 I/O 操作的完成或数据的返回，而只是将 I/O 请求发送给操作系统，继续执行下一条语句。当操作系统完成 I/O 操作时，以事件的形式通知执行 I/O 操作的线程，线程会在特定时候处理这个事件。简答理解就是如果程序不会卡住，可以继续执行，就是说非阻塞的。</p>
<h4 id="168threadinglocal">168. threading.local 的作用？</h4>
<p><strong>答</strong>：
threading.local()这个方法是用来保存一个全局变量，但是这个全局变量只有在当前线程才能访问，如果你在开发多线程应用的时候，需要每个线程保存一个单独的数据供当前线程操作，可以考虑使用这个方法，简单有效。代码示例</p>
<pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> threading
<span class="hljs-keyword">import</span> time

a = threading.local()<span class="hljs-comment">#全局对象</span>

def worker()：
    a.x = <span class="hljs-number">0</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">200</span>)：
        time.sleep(<span class="hljs-number">0.01</span>)
        a.x += <span class="hljs-number">1</span>
    <span class="hljs-built_in">print</span>(threading.current_thread(),a.x)

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">20</span>)：
    threading.Thread(target=worker).start()
</code></pre>
<h3 id="git">Git 面试题</h3>
<h4 id="169git">169. 说说你知道的 git 命令</h4>
<p><strong>答</strong>：
git init：该命令将创建一个名为 .git 的子目录,这个子目录含有你初始化的 Git 仓库中所有的必须文件,这些文件是 Git 仓库的骨干
git clone url：将服务器代码下载到本地
git pull：将服务器的代码拉到本地进行同步，如果本地有修改会产生冲突。
git push：提交本地修改的代码到服务器
git checkout -b branch：创建并切换分支
git status：查看修改状态
git add 文件名：提交到暂存区
git commit -m "提交内容"：输入提交的注释内容
git log：查看提交的日志情况</p>
<h4 id="170git">170. git 如何查看某次提交修改的内容</h4>
<p><strong>答</strong>：我们首先可以 git log 显示历史的提交列表
之后我们用 git show <commit-hashid> 便可以显示某次提交的修改内容
同样 git show <commit-hashid> filename 可以显示某次提交的某个内容的修改信息。</commit-hashid></commit-hashid></p>
<hr>
<p>本文首发于 GitChat，未经授权不得转载，转载需与 GitChat 联系。</p></div><div id="writeCommentDiv" style="text-align:center;padding:15px 0;border-bottom:1px solid #f5f5f5;border-top:1px solid #f5f5f5;"><a id="likeArticle" href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#" onclick="articleFavBtnFun(&#39;5cfdc7e67d79973578df3426&#39;,&#39;58f604f4b7f44bd669c11e3e&#39;,this); return false;" style="font-weight:500;line-height:40px;margin:10px 15px;"><span style="vertical-align: middle;color:#ff0000;font-size:26px;" class="icon2 lnr-thumbs-up"></span><span id="favNumText" style="margin-right:10px;color:#555;">53</span></a><a id="unlikeArticle" href="https://gitbook.cn/books/5cfdc7e67d79973578df3426/index.html#" onclick="showComplaintModal(); return false;" style="font-weight:500;line-height:40px;margin:10px 15px;"><span style="vertical-align: middle;color:#0000ff;font-size:26px;" class="icon2 lnr-thumbs-down"></span><span id="unlikeNumText" style="margin-right:10px;color:#555;">1</span></a></div><div><div class="col-xs-12 comment-btn-div"><div><button style="margin:20px 0;" onclick="redirectSubmitPage(&quot;null&quot;)" class="mazi-comment-btn">写评论</button></div><div><a href="https://gitbook.cn/m/mazi/author/5ca1ad4cc97e5d5a48bc7c7e/question" style="cursor:pointer;margin-bottom:20px;background-color:#1169ac;" class="btn btn-primary mazi-comment-btn">向作者提问</a></div></div></div><div class="comments"><div id="comments" bookid="5cfdc7e67d79973578df3426" comment-num="10"><div style="padding-right: 5px;" class="col-xs-12 comment-item-div"><div class="comment-item"><div style="padding:10px;max-width:80px;" class="col-xs-2"><div class="comment-author-image"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/304f6480-0b41-11e9-ba71-1bbddf880548" class="comment-author-thumb"></div></div><div style="padding:0px" class="col-xs-10"><div class="comment-author-name">嘴强王者</div><div style="text-align:justify;" class="comment-content-desc">45题 range写成了rang</div><div class="comment-footer"><div class="comment-time">24天前</div><div ispraise="false" comment-id="5d00644713b90e0e84d62de1" onclick="praiseComment(this)" class="comment-unpraise"></div><div class="comment-like-num">0</div><div onclick="redirectSubmitPage(&#39;5d00644713b90e0e84d62de1&#39;)" class="sub-comment"></div><div class="sub-comment-num">1</div></div><div style="text-align: justify;" class="comment-comment"><span class="sub-comment-name">陈祥安</span><span class="sub-comment-desc">: 谢谢提醒，已经改正</span></div></div></div></div><div style="padding-right: 5px;" class="col-xs-12 comment-item-div"><div class="comment-item"><div style="padding:10px;max-width:80px;" class="col-xs-2"><div class="comment-author-image"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/79c4c850-9bdc-11e8-9a44-4972dd48e97e" class="comment-author-thumb"></div></div><div style="padding:0px" class="col-xs-10"><div class="comment-author-name">zhaimy</div><div style="text-align:justify;" class="comment-content-desc">内容不错，但错别字有点多</div><div class="comment-footer"><div class="comment-time">24天前</div><div ispraise="false" comment-id="5d00b07810c6f3643e82d27f" onclick="praiseComment(this)" class="comment-unpraise"></div><div class="comment-like-num">0</div><div onclick="redirectSubmitPage(&#39;5d00b07810c6f3643e82d27f&#39;)" class="sub-comment"></div><div class="sub-comment-num">0</div></div></div></div></div><div style="padding-right: 5px;" class="col-xs-12 comment-item-div"><div class="comment-item"><div style="padding:10px;max-width:80px;" class="col-xs-2"><div class="comment-author-image"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/749c03c0-6f18-11e8-901c-4d9780703f05" class="comment-author-thumb"></div></div><div style="padding:0px" class="col-xs-10"><div class="comment-author-name">LeonRush</div><div style="text-align:justify;" class="comment-content-desc">27题答案不是最佳，如果是中文字符是会报错的。</div><div class="comment-footer"><div class="comment-time">24天前</div><div ispraise="false" comment-id="5d019b70ac229b6573788fe9" onclick="praiseComment(this)" class="comment-unpraise"></div><div class="comment-like-num">0</div><div onclick="redirectSubmitPage(&#39;5d019b70ac229b6573788fe9&#39;)" class="sub-comment"></div><div class="sub-comment-num">2</div></div><div style="text-align: justify;" class="comment-comment"><span class="sub-comment-name">进击的蜜思特张</span><span class="sub-comment-desc">: 这个答案是不是有问题啊，难道不是应该先decode成unicode再encode成utf-8么</span></div><div style="text-align: justify;" class="comment-comment"><span class="sub-comment-name">陈祥安</span><span class="sub-comment-desc">: 回复楼上 decode的对象是字节数组的，这里的s是字符串。</span></div></div></div></div><div style="padding-right: 5px;" class="col-xs-12 comment-item-div"><div class="comment-item"><div style="padding:10px;max-width:80px;" class="col-xs-2"><div class="comment-author-image"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/3ed86b10-e86d-11e8-a204-6bd63ee6d24c" class="comment-author-thumb"></div></div><div style="padding:0px" class="col-xs-10"><div class="comment-author-name">‭Thor</div><div style="text-align:justify;" class="comment-content-desc">python是一门强类型的动态语言，第一题就是错的。</div><div class="comment-footer"><div class="comment-time">24天前</div><div ispraise="false" comment-id="5d01a945aa4c072307704d62" onclick="praiseComment(this)" class="comment-unpraise"></div><div class="comment-like-num">0</div><div onclick="redirectSubmitPage(&#39;5d01a945aa4c072307704d62&#39;)" class="sub-comment"></div><div class="sub-comment-num">1</div></div><div style="text-align: justify;" class="comment-comment"><span class="sub-comment-name">陈祥安</span><span class="sub-comment-desc">: 谢谢提醒，已经改正谢谢提醒，已经改正</span></div></div></div></div><div style="padding-right: 5px;" class="col-xs-12 comment-item-div"><div class="comment-item"><div style="padding:10px;max-width:80px;" class="col-xs-2"><div class="comment-author-image"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/79c4c850-9bdc-11e8-9a44-4972dd48e97e" class="comment-author-thumb"></div></div><div style="padding:0px" class="col-xs-10"><div class="comment-author-name">zhaimy</div><div style="text-align:justify;" class="comment-content-desc">126题，找重复的，4没有找出来</div><div class="comment-footer"><div class="comment-time">24天前</div><div ispraise="false" comment-id="5d01aa3d4162b64cc6d04be5" onclick="praiseComment(this)" class="comment-unpraise"></div><div class="comment-like-num">0</div><div onclick="redirectSubmitPage(&#39;5d01aa3d4162b64cc6d04be5&#39;)" class="sub-comment"></div><div class="sub-comment-num">1</div></div><div style="text-align: justify;" class="comment-comment"><span class="sub-comment-name">陈祥安</span><span class="sub-comment-desc">: 谢谢提醒，已经改正</span></div></div></div></div><div style="padding-right: 5px;" class="col-xs-12 comment-item-div"><div class="comment-item"><div style="padding:10px;max-width:80px;" class="col-xs-2"><div class="comment-author-image"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/75bc8150-8b30-11e9-97c2-d1f44f51c498" class="comment-author-thumb"></div></div><div style="padding:0px" class="col-xs-10"><div class="comment-author-name">浩恩→_→</div><div style="text-align:justify;" class="comment-content-desc">第148题，第三方大妈平台，字错了吧。。</div><div class="comment-footer"><div class="comment-time">23天前</div><div ispraise="false" comment-id="5d01c2f2cc0a754b0524a8b4" onclick="praiseComment(this)" class="comment-unpraise"></div><div class="comment-like-num">0</div><div onclick="redirectSubmitPage(&#39;5d01c2f2cc0a754b0524a8b4&#39;)" class="sub-comment"></div><div class="sub-comment-num">1</div></div><div style="text-align: justify;" class="comment-comment"><span class="sub-comment-name">陈祥安</span><span class="sub-comment-desc">: 谢谢提醒，已经改正</span></div></div></div></div><div style="padding-right: 5px;" class="col-xs-12 comment-item-div"><div class="comment-item"><div style="padding:10px;max-width:80px;" class="col-xs-2"><div class="comment-author-image"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/92d62080-e00e-11e7-9711-8da7e52fb094" class="comment-author-thumb"></div></div><div style="padding:0px" class="col-xs-10"><div class="comment-author-name">shttty</div><div style="text-align:justify;" class="comment-content-desc">title()方法可以直接将hello world 首字母大写</div><div class="comment-footer"><div class="comment-time">15天前</div><div ispraise="false" comment-id="5d0c73b7f6129c283731800b" onclick="praiseComment(this)" class="comment-unpraise"></div><div class="comment-like-num">0</div><div onclick="redirectSubmitPage(&#39;5d0c73b7f6129c283731800b&#39;)" class="sub-comment"></div><div class="sub-comment-num">1</div></div><div style="text-align: justify;" class="comment-comment"><span class="sub-comment-name">陈祥安</span><span class="sub-comment-desc">: 嗯嗯 这个最好 </span></div></div></div></div><div style="padding-right: 5px;" class="col-xs-12 comment-item-div"><div class="comment-item"><div style="padding:10px;max-width:80px;" class="col-xs-2"><div class="comment-author-image"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/888cfdc0-bd43-11e8-996d-1760a0ea6c6a" class="comment-author-thumb"></div></div><div style="padding:0px" class="col-xs-10"><div class="comment-author-name">hayes.hou</div><div style="text-align:justify;" class="comment-content-desc">写的很赞，有新的收获</div><div class="comment-footer"><div class="comment-time">13天前</div><div ispraise="false" comment-id="5d102e46b6802a486b22b381" onclick="praiseComment(this)" class="comment-unpraise"></div><div class="comment-like-num">0</div><div onclick="redirectSubmitPage(&#39;5d102e46b6802a486b22b381&#39;)" class="sub-comment"></div><div class="sub-comment-num">1</div></div><div style="text-align: justify;" class="comment-comment"><span class="sub-comment-name">陈祥安</span><span class="sub-comment-desc">: 非常高兴能对您 有帮助</span></div></div></div></div><div style="padding-right: 5px;" class="col-xs-12 comment-item-div"><div class="comment-item"><div style="padding:10px;max-width:80px;" class="col-xs-2"><div class="comment-author-image"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/7b2e5870-75eb-11e9-affa-3340883bd6db" class="comment-author-thumb"></div></div><div style="padding:0px" class="col-xs-10"><div class="comment-author-name">进击的蜜思特张</div><div style="text-align:justify;" class="comment-content-desc">59题是不是写反了啊，json转dict应该是loads方法，dict转json才是dumps方法</div><div class="comment-footer"><div class="comment-time">12天前</div><div ispraise="false" comment-id="5d1034d080a5cb0af67373cc" onclick="praiseComment(this)" class="comment-unpraise"></div><div class="comment-like-num">0</div><div onclick="redirectSubmitPage(&#39;5d1034d080a5cb0af67373cc&#39;)" class="sub-comment"></div><div class="sub-comment-num">2</div></div><div style="text-align: justify;" class="comment-comment"><span class="sub-comment-name">陈祥安</span><span class="sub-comment-desc">: import json

dic = {'a'： 123, 'b'： "456", 'c'： "liming"}#定义字典,字段的键和值允许单引号存在。
json_str = json.loads(str(dic).replace("'", "\"")) 
#通过str将字典转换为字符串，然后不加后面的replace就会报错。原因是json.loads的时候不允许有单引号存在.
print(json_str)
dic2 = json.dumps(jon_str)
print(dic2)



这样就应该看懂我的目的了

</span></div><div style="text-align: justify;" class="comment-comment"><span class="sub-comment-name">陈祥安</span><span class="sub-comment-desc">: 更新了  谢谢指正</span></div></div></div></div><div style="padding-right: 5px;" class="col-xs-12 comment-item-div"><div class="comment-item"><div style="padding:10px;max-width:80px;" class="col-xs-2"><div class="comment-author-image"><img src="file:///study/python/Python%20%E5%B8%B8%E8%A7%81%E7%9A%84%20170%20%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%9A2019%20%E7%89%88_files/53e83da0-db5d-11e7-99f9-4b6204a38004" class="comment-author-thumb"></div></div><div style="padding:0px" class="col-xs-10"><div class="comment-author-name">Erica</div><div style="text-align:justify;" class="comment-content-desc">第63题只用StrictRedis就可以了</div><div class="comment-footer"><div class="comment-time">10天前</div><div ispraise="false" comment-id="5d12e4fb87e6304e23d91128" onclick="praiseComment(this)" class="comment-unpraise"></div><div class="comment-like-num">0</div><div onclick="redirectSubmitPage(&#39;5d12e4fb87e6304e23d91128&#39;)" class="sub-comment"></div><div class="sub-comment-num">0</div></div></div></div></div></div><div class="dropload-down" style=""><div class="dropload-noData"></div></div></div></div></div><div id="commentModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" class="modal fade"><div role="document" class="modal-dialog"><div class="modal-content"></div></div></div></div></body></html>